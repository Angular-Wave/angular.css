{
  "version": 3,
  "sources": ["../../@angular-wave/angular.ts/dist/angular-ts.umd.js"],
  "sourcesContent": ["/* Version: 0.9.3 - October 9, 2025 19:24:11 */\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\n  typeof define === 'function' && define.amd ? define(['exports'], factory) :\n  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.angular = {}));\n})(this, (function (exports) { 'use strict';\n\n  const VALID_CLASS = \"ng-valid\";\n  const INVALID_CLASS = \"ng-invalid\";\n  const PRISTINE_CLASS = \"ng-pristine\";\n  const DIRTY_CLASS = \"ng-dirty\";\n  const UNTOUCHED_CLASS = \"ng-untouched\";\n  const TOUCHED_CLASS = \"ng-touched\";\n  const EMPTY_CLASS = \"ng-empty\";\n  const NOT_EMPTY_CLASS = \"ng-not-empty\";\n\n  // x prefix is being kept for view-directive.spec lines 1550, 565\n  const PREFIX_REGEXP = /^((?:x|data)[-])/i;\n  const SPECIAL_CHARS_REGEXP = /[-]+(.)/g;\n\n  const ALIASED_ATTR = {\n    ngMinlength: \"minlength\",\n    ngMaxlength: \"maxlength\",\n    ngMin: \"min\",\n    ngMax: \"max\",\n    ngPattern: \"pattern\",\n    ngStep: \"step\",\n  };\n\n  const isProxySymbol = Symbol(\"isProxy\");\n\n  /**\n   *\n   * @param {*} value\n   * @returns {boolean}\n   */\n  function isProxy(value) {\n    return !!(value && value[isProxySymbol]);\n  }\n\n  const ngMinErr$2 = minErr(\"ng\");\n\n  /**\n   * @type {number}\n   */\n  let uid$1 = 0;\n\n  /**\n   * @returns {number} an unique alpha-numeric string\n   */\n  function nextUid() {\n    uid$1 += 1;\n    return uid$1;\n  }\n\n  /**\n   *\n   * @description Converts the specified string to lowercase.\n   * @param {string} string String to be converted to lowercase.\n   * @returns {string} Lowercased string.\n   */\n  function lowercase(string) {\n    return isString(string) ? string.toLowerCase() : string;\n  }\n\n  /**\n   *\n   * @description Converts the specified string to uppercase.\n   * @param {string} string String to be converted to uppercase.\n   * @returns {string} Uppercased string.\n   */\n  function uppercase(string) {\n    return isString(string) ? string.toUpperCase() : string;\n  }\n\n  /**\n   * @param {*} obj Reference to check.\n   * @return {boolean} Returns true if `obj` is an array or array-like object (NodeList, Arguments,\n   *                   String ...)\n   */\n  function isArrayLike(obj) {\n    // `null`, `undefined` and `window` are not array-like\n    if (obj == null || isWindow(obj)) return false;\n\n    // arrays, strings and jQuery/jqLite objects are array like\n    // * we have to check the existence of JQLite first as this method is called\n    //   via the forEach method when constructing the JQLite object in the first place\n    if (Array.isArray(obj) || obj instanceof Array || isString(obj)) return true;\n\n    // Support: iOS 8.2 (not reproducible in simulator)\n    // \"length\" in obj used to prevent JIT error (gh-11508)\n    const length = \"length\" in Object(obj) && obj.length;\n\n    // NodeList objects (with `item` method) and\n    // other objects with suitable length characteristics are array-like\n    return (\n      isNumber(length) &&\n      ((length >= 0 && length - 1 in obj) || typeof obj.item === \"function\")\n    );\n  }\n\n  /**\n   * Determines if a reference is undefined.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is undefined.\n   */\n  function isUndefined(value) {\n    return typeof value === \"undefined\";\n  }\n\n  /**\n   * Determines if a reference is defined.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is defined.\n   */\n  function isDefined(value) {\n    return typeof value !== \"undefined\";\n  }\n\n  /**\n   * Determines if a reference is an `Object`. Unlike `typeof` in JavaScript, `null`s are not\n   * considered to be objects. Note that JavaScript arrays are objects.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is an `Object` but not `null`.\n   */\n  function isObject(value) {\n    // http://jsperf.com/isobject4\n    return value !== null && typeof value === \"object\";\n  }\n\n  /**\n   * Determines if a reference is a `String`.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a `String`.\n   */\n  function isString(value) {\n    return typeof value === \"string\";\n  }\n\n  /**\n   * Determines if a reference is a null.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a null.\n   */\n  function isNull(value) {\n    return value === null;\n  }\n\n  /**\n   * Determines if a reference is null or undefined.\n   *\n   * @param {*} obj Reference to check.\n   * @returns {boolean} True if `value` is null or undefined.\n   */\n  function isNullOrUndefined(obj) {\n    return obj === null || typeof obj === \"undefined\";\n  }\n\n  /**\n   * Determines if a reference is a `Number`.\n   *\n   * This includes the \"special\" numbers `NaN`, `+Infinity` and `-Infinity`.\n   *\n   * If you wish to exclude these then you can use the native\n   * [`isFinite'](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite)\n   * method.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a `Number`.\n   */\n  function isNumber(value) {\n    return typeof value === \"number\";\n  }\n\n  /**\n   * @module angular\n   * @function isDate\n   *\n   * @description\n   * Determines if a value is a date.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a `Date`.\n   */\n  function isDate(value) {\n    return toString.call(value) === \"[object Date]\";\n  }\n\n  /**\n   * Determines if a reference is an `Error`.\n   * Loosely based on https://www.npmjs.com/package/iserror\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is an `Error`.\n   */\n  function isError(value) {\n    const tag = toString.call(value);\n    switch (tag) {\n      case \"[object Error]\":\n        return true;\n      case \"[object Exception]\":\n        return true;\n      case \"[object DOMException]\":\n        return true;\n      default:\n        return value instanceof Error;\n    }\n  }\n\n  /**\n   * Determines if a reference is a `Function`.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a `Function`.\n   */\n  function isFunction(value) {\n    return typeof value === \"function\";\n  }\n\n  /**\n   * Determines if a value is a regular expression object.\n   *\n   * @param {*} value Reference to check.\n   * @returns {boolean} True if `value` is a `RegExp`.\n   */\n  function isRegExp(value) {\n    return toString.call(value) === \"[object RegExp]\";\n  }\n\n  /**\n   * Checks if `obj` is a window object.\n   *\n   * @param {*} obj Object to check\n   * @returns {boolean} True if `obj` is a window obj.\n   */\n  function isWindow(obj) {\n    return obj && obj.window === obj;\n  }\n\n  /**\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  function isScope(obj) {\n    return obj && obj.$watch;\n  }\n\n  /**\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  function isFile(obj) {\n    return toString.call(obj) === \"[object File]\";\n  }\n\n  /**\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  function isFormData(obj) {\n    return toString.call(obj) === \"[object FormData]\";\n  }\n\n  /**\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  function isBlob(obj) {\n    return toString.call(obj) === \"[object Blob]\";\n  }\n\n  /**\n   * @param {*} value\n   * @returns {boolean}\n   */\n  function isBoolean(value) {\n    return typeof value === \"boolean\";\n  }\n\n  /**\n   * @param {*} obj\n   * @returns {boolean}\n   */\n  function isPromiseLike(obj) {\n    return obj && isFunction(obj.then);\n  }\n\n  /**\n   * @param {*} value\n   * @returns {string | *}\n   */\n  function trim(value) {\n    return isString(value) ? value.trim() : value;\n  }\n\n  function snakeCase(name, separator) {\n    const modseparator = separator;\n    return name.replace(\n      /[A-Z]/g,\n      (letter, pos) => (pos ? modseparator : \"\") + letter.toLowerCase(),\n    );\n  }\n\n  /**\n   * Set or clear the hashkey for an object.\n   * @param obj object\n   * @param h the hashkey (!truthy to delete the hashkey)\n   */\n  function setHashKey(obj, h) {\n    if (h) {\n      obj.$$hashKey = h;\n    } else {\n      delete obj.$$hashKey;\n    }\n  }\n\n  function baseExtend(dst, objs, deep) {\n    const h = dst.$$hashKey;\n\n    for (let i = 0, ii = objs.length; i < ii; ++i) {\n      const obj = objs[i];\n      if (!isObject(obj) && !isFunction(obj)) continue;\n      const keys = Object.keys(obj);\n      for (let j = 0, jj = keys.length; j < jj; j++) {\n        const key = keys[j];\n        const src = obj[key];\n\n        {\n          dst[key] = src;\n        }\n      }\n    }\n\n    setHashKey(dst, h);\n    return dst;\n  }\n\n  /**\n   * Extends the destination object `dst` by copying own enumerable properties from the `src` object(s)\n   * to `dst`. You can specify multiple `src` objects. If you want to preserve original objects, you can do so\n   * by passing an empty object as the target: `let object = angular.extend({}, object1, object2)`.\n   *\n   * **Note:** Keep in mind that `angular.extend` does not support recursive merge (deep copy).\n   *\n   * @param {Object} dst Destination object.\n   * @param {...Object} src Source object(s).\n   * @returns {Object} Reference to `dst`.\n   */\n  function extend(dst, ...src) {\n    return baseExtend(dst, src);\n  }\n\n  /**\n   * @param {any} num\n   * @returns {boolean}\n   */\n  function isNumberNaN(num) {\n    return Number.isNaN(num);\n  }\n\n  /**\n   * @param {Object} parent\n   * @param {Object} extra\n   * @returns {Object}\n   */\n  function inherit$1(parent, extra) {\n    return extend(Object.create(parent), extra);\n  }\n\n  function hasCustomToString(obj) {\n    return isFunction(obj.toString) && obj.toString !== toString;\n  }\n\n  /**\n   * @module angular\n   * @function isElement\n\n   * @function\n   *\n   * @description\n   * Determines if a reference is a DOM element (or wrapped jQuery element).\n   *\n   * @param {*} node Reference to check.\n   * @returns {boolean} True if `value` is a DOM element (or wrapped jQuery element).\n   */\n  function isElement(node) {\n    return !!(\n      node &&\n      (node.nodeName || // We are a direct element.\n        (node.attr && node.find))\n    ); // We have an on and find method part of jQuery API.\n  }\n\n  /**\n   * Returns a string appropriate for the type of node.\n   *\n   * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)\n   *\n   * @param {Element} element\n   * @returns\n   */\n  function getNodeName(element) {\n    return lowercase(element.nodeName);\n  }\n\n  function includes(array, obj) {\n    return Array.prototype.indexOf.call(array, obj) !== -1;\n  }\n\n  /**\n   * Removes the first occurrence of a specified value from an array.\n   *\n   * @template T\n   * @param {Array<T>} array - The array from which to remove the value.\n   * @param {T} value - The value to remove.\n   * @returns {number} - The index of the removed value, or -1 if the value was not found.\n   */\n  function arrayRemove(array, value) {\n    const index = array.indexOf(value);\n    if (index >= 0) {\n      array.splice(index, 1);\n    }\n    return index;\n  }\n\n  function simpleCompare(a, b) {\n    return a === b || (a !== a && b !== b);\n  }\n\n  /**\n   * Determines if two objects or two values are equivalent. Supports value types, regular\n   * expressions, arrays and objects.\n   *\n   * Two objects or values are considered equivalent if at least one of the following is true:\n   *\n   * * Both objects or values pass `===` comparison.\n   * * Both objects or values are of the same type and all of their properties are equal by\n   *   comparing them with `angular.equals`.\n   * * Both values are NaN. (In JavaScript, NaN == NaN => false. But we consider two NaN as equal)\n   * * Both values represent the same regular expression (In JavaScript,\n   *   /abc/ == /abc/ => false. But we consider two regular expressions as equal when their textual\n   *   representation matches).\n   *\n   * During a property comparison, properties of `function` type and properties with names\n   * that begin with `$` are ignored.\n   *\n   * Scope and DOMWindow objects are being compared only by identify (`===`).\n   *\n   * @param {*} o1 Object or value to compare.\n   * @param {*} o2 Object or value to compare.\n   * @returns {boolean} True if arguments are equal.\n   *\n   * @example\n     <example module=\"equalsExample\" name=\"equalsExample\">\n       <file name=\"index.html\">\n        <div ng-controller=\"ExampleController\">\n          <form novalidate>\n            <h3>User 1</h3>\n            Name: <input type=\"text\" ng-model=\"user1.name\">\n            Age: <input type=\"number\" ng-model=\"user1.age\">\n\n            <h3>User 2</h3>\n            Name: <input type=\"text\" ng-model=\"user2.name\">\n            Age: <input type=\"number\" ng-model=\"user2.age\">\n\n            <div>\n              <br/>\n              <input type=\"button\" value=\"Compare\" ng-click=\"compare()\">\n            </div>\n            User 1: <pre>{{user1 | json}}</pre>\n            User 2: <pre>{{user2 | json}}</pre>\n            Equal: <pre>{{result}}</pre>\n          </form>\n        </div>\n      </file>\n      <file name=\"script.js\">\n          angular.module('equalsExample', []).controller('ExampleController', ['$scope', function($scope) {\n            $scope.user1 = {};\n            $scope.user2 = {};\n            $scope.compare = function() {\n              $scope.result = angular.equals($scope.user1, $scope.user2);\n            };\n          }]);\n      </file>\n    </example>\n   */\n  function equals$1(o1, o2) {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    const t1 = typeof o1;\n    const t2 = typeof o2;\n    let length;\n    let key;\n    let keySet;\n    if (t1 === t2 && t1 === \"object\") {\n      if (Array.isArray(o1)) {\n        if (!Array.isArray(o2)) return false;\n        if ((length = o1.length) === o2.length) {\n          for (key = 0; key < length; key++) {\n            if (!equals$1(o1[key], o2[key])) return false;\n          }\n          return true;\n        }\n      } else if (isDate(o1)) {\n        if (!isDate(o2)) return false;\n        return simpleCompare(o1.getTime(), o2.getTime());\n      } else if (isRegExp(o1)) {\n        if (!isRegExp(o2)) return false;\n        return o1.toString() === o2.toString();\n      } else {\n        if (\n          isScope(o1) ||\n          isScope(o2) ||\n          isWindow(o1) ||\n          isWindow(o2) ||\n          Array.isArray(o2) ||\n          isDate(o2) ||\n          isRegExp(o2)\n        )\n          return false;\n        keySet = Object.create(null);\n        for (key in o1) {\n          if (key.charAt(0) === \"$\" || isFunction(o1[key])) continue;\n          if (!equals$1(o1[key], o2[key])) return false;\n          keySet[key] = true;\n        }\n        for (key in o2) {\n          if (\n            !(key in keySet) &&\n            key.charAt(0) !== \"$\" &&\n            isDefined(o2[key]) &&\n            !isFunction(o2[key])\n          )\n            return false;\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * throw error if the name given is hasOwnProperty\n   * @param  {string} name    the name to test\n   * @param  {string} context the context in which the name is used, such as module or directive\n   */\n  function assertNotHasOwnProperty(name, context) {\n    if (name === \"hasOwnProperty\") {\n      throw ngMinErr$2(\n        \"badname\",\n        \"hasOwnProperty is not a valid {0} name\",\n        context,\n      );\n    }\n  }\n\n  function stringify$1(value) {\n    if (value == null) {\n      // null || undefined\n      return \"\";\n    }\n    switch (typeof value) {\n      case \"string\":\n        break;\n      case \"number\":\n        value = `${value}`;\n        break;\n      default:\n        if (hasCustomToString(value) && !Array.isArray(value) && !isDate(value)) {\n          value = value.toString();\n        } else {\n          value = toJson(value);\n        }\n    }\n\n    return value;\n  }\n\n  /**\n   * @param {Number} maxDepth\n   * @return {boolean}\n   */\n  function isValidObjectMaxDepth(maxDepth) {\n    return isNumber(maxDepth) && maxDepth > 0;\n  }\n\n  function concat(array1, array2, index) {\n    return array1.concat(Array.prototype.slice.call(array2, index));\n  }\n\n  function sliceArgs(args, startIndex) {\n    return Array.prototype.slice.call(args, startIndex);\n  }\n\n  /**\n   * Returns a function which calls function `fn` bound to `self` (`self` becomes the `this` for\n   * `fn`). You can supply optional `args` that are prebound to the function. This feature is also\n   * known as [partial application](http://en.wikipedia.org/wiki/Partial_application), as\n   * distinguished from [function currying](http://en.wikipedia.org/wiki/Currying#Contrast_with_partial_function_application).\n   *\n   * @param {Object} context Context which `fn` should be evaluated in.\n   * @param {*} fn Function to be bound.\n   * @returns {Function} Function that wraps the `fn` with all the specified bindings.\n   */\n  function bind(context, fn) {\n    const curryArgs = arguments.length > 2 ? sliceArgs(arguments, 2) : [];\n    if (isFunction(fn) && !(fn instanceof RegExp)) {\n      return curryArgs.length\n        ? function () {\n            return arguments.length\n              ? fn.apply(context, concat(curryArgs, arguments, 0))\n              : fn.apply(context, curryArgs);\n          }\n        : function () {\n            return arguments.length\n              ? fn.apply(context, arguments)\n              : fn.call(context);\n          };\n    }\n    // In IE, native methods are not functions so they cannot be bound (note: they don't need to be).\n    return fn;\n  }\n\n  function toJsonReplacer(key, value) {\n    let val = value;\n\n    if (\n      typeof key === \"string\" &&\n      key.charAt(0) === \"$\" &&\n      key.charAt(1) === \"$\"\n    ) {\n      val = undefined;\n    } else if (isWindow(value)) {\n      val = \"$WINDOW\";\n    } else if (value && window.document === value) {\n      val = \"$DOCUMENT\";\n    } else if (isScope(value)) {\n      val = \"$SCOPE\";\n    }\n\n    return val;\n  }\n\n  /**\n   * Serializes input into a JSON-formatted string. Properties with leading $$ characters will be\n   * stripped since AngularTS uses this notation internally.\n   *\n   * @param {Object|Array|Date|string|number|boolean} obj Input to be serialized into JSON.\n   * @param {boolean|number} [pretty=2] If set to true, the JSON output will contain newlines and whitespace.\n   *    If set to an integer, the JSON output will contain that many spaces per indentation.\n   * @returns {string|undefined} JSON-ified string representing `obj`.\n   * @knownIssue\n   *\n   * The Safari browser throws a `RangeError` instead of returning `null` when it tries to stringify a `Date`\n   * object with an invalid date value. The only reliable way to prevent this is to monkeypatch the\n   * `Date.prototype.toJSON` method as follows:\n   *\n   * ```\n   * let _DatetoJSON = Date.prototype.toJSON;\n   * Date.prototype.toJSON = function() {\n   *   try {\n   *     return _DatetoJSON.call(this);\n   *   } catch(e) {\n   *     if (e instanceof RangeError) {\n   *       return null;\n   *     }\n   *     throw e;\n   *   }\n   * };\n   * ```\n   *\n   * See https://github.com/angular/angular.js/pull/14221 for more information.\n   */\n  function toJson(obj, pretty) {\n    if (isUndefined(obj)) return undefined;\n    if (!isNumber(pretty)) {\n      pretty = pretty ? 2 : null;\n    }\n    return JSON.stringify(obj, toJsonReplacer, /** @type {Number} */ (pretty));\n  }\n\n  /**\n   * Deserializes a JSON string.\n   *\n   * @param {string} json JSON string to deserialize.\n   * @returns {Object|Array|string|number} Deserialized JSON string.\n   */\n  function fromJson(json) {\n    return isString(json) ? JSON.parse(json) : json;\n  }\n\n  function timezoneToOffset(timezone, fallback) {\n    const requestedTimezoneOffset =\n      Date.parse(`Jan 01, 1970 00:00:00 ${timezone}`) / 60000;\n    return isNumberNaN(requestedTimezoneOffset)\n      ? fallback\n      : requestedTimezoneOffset;\n  }\n\n  function addDateMinutes(date, minutes) {\n    const newDate = new Date(date.getTime());\n    newDate.setMinutes(newDate.getMinutes() + minutes);\n    return newDate;\n  }\n\n  function convertTimezoneToLocal(date, timezone, reverse) {\n    const doReverse = 1;\n    const dateTimezoneOffset = date.getTimezoneOffset();\n    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);\n    return addDateMinutes(\n      date,\n      doReverse * (timezoneOffset - dateTimezoneOffset),\n    );\n  }\n\n  /**\n   * Parses an escaped url query string into key-value pairs.\n   * @param {string} keyValue\n   * @returns {Object.<string,boolean|Array>}\n   */\n  function parseKeyValue(keyValue) {\n    const obj = {};\n    (keyValue || \"\").split(\"&\").forEach((keyValue) => {\n      let splitPoint;\n      let key;\n      let val;\n      if (keyValue) {\n        key = keyValue = keyValue.replace(/\\+/g, \"%20\");\n        splitPoint = keyValue.indexOf(\"=\");\n        if (splitPoint !== -1) {\n          key = keyValue.substring(0, splitPoint);\n          val = keyValue.substring(splitPoint + 1);\n        }\n        key = tryDecodeURIComponent(key);\n        if (isDefined(key)) {\n          val = isDefined(val) ? tryDecodeURIComponent(val) : true;\n          if (!hasOwn(obj, /** @type {string} */ (key))) {\n            obj[key] = val;\n          } else if (Array.isArray(obj[key])) {\n            obj[key].push(val);\n          } else {\n            obj[key] = [obj[key], val];\n          }\n        }\n      }\n    });\n    return /** @type {Object.<string,boolean|Array>} */ (obj);\n  }\n\n  function toKeyValue(obj) {\n    const parts = [];\n    obj &&\n      Object.entries(obj).forEach(([key, value]) => {\n        if (Array.isArray(value)) {\n          value.forEach((arrayValue) => {\n            parts.push(\n              encodeUriQuery(key, true) +\n                (arrayValue === true\n                  ? \"\"\n                  : `=${encodeUriQuery(arrayValue, true)}`),\n            );\n          });\n        } else {\n          parts.push(\n            encodeUriQuery(key, true) +\n              (value === true ? \"\" : `=${encodeUriQuery(value, true)}`),\n          );\n        }\n      });\n    return parts.length ? parts.join(\"&\") : \"\";\n  }\n\n  /**\n   * Tries to decode the URI component without throwing an exception.\n   *\n   * @param  {string} value potential URI component to check.\n   * @returns {string|void}\n   */\n  function tryDecodeURIComponent(value) {\n    try {\n      return decodeURIComponent(value);\n    } catch {\n      /* empty */\n    }\n  }\n\n  /**\n   * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n   * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set (pchar) allowed in path\n   * segments:\n   *    segment       = *pchar\n   *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   *    pct-encoded   = \"%\" HEXDIG HEXDIG\n   *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n   *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n   * @param {string} val\n   */\n  function encodeUriSegment(val) {\n    return encodeUriQuery(val, true)\n      .replace(/%26/gi, \"&\")\n      .replace(/%3D/gi, \"=\")\n      .replace(/%2B/gi, \"+\");\n  }\n\n  /**\n   * This method is intended for encoding *key* or *value* parts of query component. We need a custom\n   * method because encodeURIComponent is too aggressive and encodes stuff that doesn't have to be\n   * encoded per http://tools.ietf.org/html/rfc3986:\n   *    query         = *( pchar / \"/\" / \"?\" )\n   *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n   *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n   *    pct-encoded   = \"%\" HEXDIG HEXDIG\n   *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n   *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n   */\n  function encodeUriQuery(val, pctEncodeSpaces) {\n    return encodeURIComponent(val)\n      .replace(/%40/gi, \"@\")\n      .replace(/%3A/gi, \":\")\n      .replace(/%24/g, \"$\")\n      .replace(/%2C/gi, \",\")\n      .replace(/%3B/gi, \";\")\n      .replace(/%20/g, pctEncodeSpaces ? \"%20\" : \"+\");\n  }\n\n  const ngAttrPrefixes = [\"ng-\", \"data-ng-\"];\n\n  function getNgAttribute(element, ngAttr) {\n    let attr;\n    let i;\n    const ii = ngAttrPrefixes.length;\n    for (i = 0; i < ii; ++i) {\n      attr = ngAttrPrefixes[i] + ngAttr;\n      if (isString((attr = element.getAttribute(attr)))) {\n        return attr;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Creates a shallow copy of an object, an array or a primitive.\n   *\n   * Assumes that there are no proto properties for objects.\n   */\n  function shallowCopy(src, dst) {\n    if (Array.isArray(src)) {\n      dst = dst || [];\n\n      for (let i = 0, ii = src.length; i < ii; i++) {\n        dst[i] = src[i];\n      }\n    } else if (isObject(src)) {\n      dst = dst || {};\n\n      for (const key in src) {\n        if (!(key.startsWith(\"$\") && key.charAt(1) === \"$\")) {\n          dst[key] = src[key];\n        }\n      }\n    }\n\n    return dst || src;\n  }\n\n  /**\n   * Throw error if the argument is false\n   * @param {boolean} argument\n   * @param {string} errorMsg\n   */\n  function assert(argument, errorMsg = \"Assertion failed\") {\n    if (!argument) throw new Error(errorMsg);\n  }\n\n  /**\n   * Throw error if the argument is falsy.\n   */\n  function assertArg$1(arg, name, reason) {\n    if (!arg) {\n      throw ngMinErr$2(\n        \"areq\",\n        \"Argument '{0}' is {1}\",\n        name || \"?\",\n        reason || \"required\",\n      );\n    }\n    return arg;\n  }\n\n  function assertArgFn(arg, name, acceptArrayAnnotation) {\n    if (acceptArrayAnnotation && Array.isArray(arg)) {\n      arg = arg[arg.length - 1];\n    }\n\n    assertArg$1(\n      isFunction(arg),\n      name,\n      `not a function, got ${\n      arg && typeof arg === \"object\"\n        ? arg.constructor.name || \"Object\"\n        : typeof arg\n    }`,\n    );\n    return arg;\n  }\n\n  /** @type {import(\"./interface.js\").ErrorHandlingConfig} */\n  const minErrConfig = {\n    objectMaxDepth: 5,\n    urlErrorParamsEnabled: true,\n  };\n\n  /**\n   * Configure several aspects of error handling if used as a setter or return the\n   * current configuration if used as a getter.\n   *\n   * Omitted or undefined options will leave the corresponding configuration values unchanged.\n   *\n   * @param {import(\"./interface.ts\").ErrorHandlingConfig} [config]\n   * @returns {import(\"./interface.ts\").ErrorHandlingConfig}\n   */\n  function errorHandlingConfig(config) {\n    if (isObject(config)) {\n      if (isDefined(config.objectMaxDepth)) {\n        minErrConfig.objectMaxDepth = isValidObjectMaxDepth(config.objectMaxDepth)\n          ? config.objectMaxDepth\n          : NaN;\n      }\n      if (\n        isDefined(config.urlErrorParamsEnabled) &&\n        isBoolean(config.urlErrorParamsEnabled)\n      ) {\n        minErrConfig.urlErrorParamsEnabled = config.urlErrorParamsEnabled;\n      }\n    }\n    return minErrConfig;\n  }\n\n  /**\n   * This object provides a utility for producing rich Error messages within\n   * AngularTS. It can be called as follows:\n   *\n   * let exampleMinErr = minErr('example');\n   * throw exampleMinErr('one', 'This {0} is {1}', foo, bar);\n   *\n   * The above creates an instance of minErr in the example namespace. The\n   * resulting error will have a namespaced error code of example.one.  The\n   * resulting error will replace {0} with the value of foo, and {1} with the\n   * value of bar. The object is not restricted in the number of arguments it can\n   * take.\n   *\n   * If fewer arguments are specified than necessary for interpolation, the extra\n   * interpolation markers will be preserved in the final string.\n   *\n   * Since data will be parsed statically during a build step, some restrictions\n   * are applied with respect to how minErr instances are created and called.\n   * Instances should have names of the form namespaceMinErr for a minErr created\n   * using minErr('namespace'). Error codes, namespaces and template strings\n   * should all be static strings, not variables or general expressions.\n   *\n   * @param {string} module The namespace to use for the new minErr instance.\n   * @returns {function(string, ...*): Error} minErr instance\n   */\n  function minErr(module) {\n    return function (...args) {\n      const code = args[0];\n      const template = args[1];\n      let message = `[${module ? `${module}:` : \"\"}${code}] `;\n      const templateArgs = sliceArgs(args, 2).map((arg) => toDebugString(arg));\n\n      message += template.replace(/\\{\\d+\\}/g, (match) => {\n        const index = +match.slice(1, -1);\n\n        if (index < templateArgs.length) {\n          return templateArgs[index];\n        }\n\n        return match;\n      });\n\n      return new Error(message);\n    };\n  }\n\n  function toDebugString(obj) {\n    if (typeof obj === \"function\") {\n      return obj.toString().replace(/ \\{[\\s\\S]*$/, \"\");\n    }\n    if (isUndefined(obj)) {\n      return \"undefined\";\n    }\n    if (typeof obj !== \"string\") {\n      const seen = [];\n      let copyObj = structuredClone(isProxy(obj) ? obj.$target : obj);\n      return JSON.stringify(copyObj, (key, val) => {\n        const replace = toJsonReplacer(key, val);\n        if (isObject(replace)) {\n          if (seen.indexOf(replace) >= 0) return \"...\";\n\n          seen.push(replace);\n        }\n        return replace;\n      });\n    }\n    return obj;\n  }\n\n  /**\n   * Computes a hash of an 'obj'.\n   * Hash of a:\n   *  string is string\n   *  number is number as string\n   *  object is either result of calling $$hashKey function on the object or uniquely generated id,\n   *         that is also assigned to the $$hashKey property of the object.\n   *\n   * @param {*} obj\n   * @returns {string} hash string such that the same input will have the same hash string.\n   *         The resulting string key is in 'type:hashKey' format.\n   */\n  function hashKey(obj) {\n    const key = obj && obj.$$hashKey;\n\n    if (key) {\n      if (typeof key === \"function\") {\n        return obj.$$hashKey();\n      }\n      return key;\n    }\n\n    const objType = typeof obj;\n    if (objType === \"function\" || (objType === \"object\" && obj !== null)) {\n      obj.$$hashKey = `${objType}:${nextUid()}`;\n      return obj.$$hashKey;\n    }\n\n    if (objType === \"undefined\") {\n      return `${objType}:${nextUid()}`;\n    }\n    // account for primitives\n    return `${objType}:${obj}`;\n  }\n\n  function mergeClasses$1(a, b) {\n    if (!a && !b) return \"\";\n    if (!a) return b;\n    if (!b) return a;\n    if (Array.isArray(a)) a = a.join(\" \");\n    if (Array.isArray(b)) b = b.join(\" \");\n    return a + \" \" + b;\n  }\n\n  /**\n   * Converts all accepted directives format into proper directive name.\n   * @param {string} name Name to normalize\n   * @returns {string}\n   */\n\n  function directiveNormalize(name) {\n    return name\n      .replace(PREFIX_REGEXP, \"\")\n      .replace(SPECIAL_CHARS_REGEXP, (_, letter, offset) =>\n        offset ? letter.toUpperCase() : letter,\n      );\n  }\n\n  /**\n   * Whether element should be animated\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function hasAnimate(node) {\n    return hasCustomOrDataAttribute(node, \"animate\");\n  }\n\n  /**\n   * @param {Node} node\n   * @param {string} attr\n   * @returns {boolean}\n   */\n  function hasCustomOrDataAttribute(node, attr) {\n    if (node.nodeType !== Node.ELEMENT_NODE) return false;\n    const element = /** @type {HTMLElement} */ (node);\n    return (\n      element.dataset[attr] === \"true\" || element.getAttribute(attr) === \"true\"\n    );\n  }\n\n  /**\n   * @param {Object|null|undefined} obj\n   * @returns {boolean}\n   */\n  function isObjectEmpty(obj) {\n    if (!obj) return true;\n    return !Object.keys(obj).length;\n  }\n\n  /**\n   * Checks whether the given object has the specified property as its own (not inherited).\n   *\n   * This is a safe version of `hasOwnProperty` that avoids issues with objects\n   * that have it overridden or missing from their prototype chain.\n   *\n   * @param {object} obj - The object to check.\n   * @param {string|number|symbol} key - The property key to look for.\n   * @returns {boolean} True if the object has the property as its own; otherwise, false.\n   *\n   * @example\n   * hasOwn({ foo: 123 }, 'foo'); // true\n   * hasOwn({}, 'bar'); // false\n   */\n  function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  }\n\n  /**\n   * Wraps a function so it can only be called once.\n   * Subsequent calls do nothing and return undefined.\n   *\n   * @param {Function} fn - The function to wrap.\n   * @returns {Function} A new function that will call `fn` only once.\n   */\n  function callBackOnce(fn) {\n    let called = false;\n\n    return function (...args) {\n      if (!called) {\n        called = true;\n        return fn.apply(this, args);\n      }\n    };\n  }\n\n  /**\n   * Wraps a function so it will only be called starting from the second invocation.\n   * The first call does nothing and returns undefined.\n   *\n   * @param {Function} fn - The function to wrap.\n   * @returns {Function} A new function that will skip the first call.\n   */\n  function callBackAfterFirst(fn) {\n    let calledOnce = false;\n\n    return function (...args) {\n      if (calledOnce) {\n        return fn.apply(this, args);\n      }\n      calledOnce = true;\n    };\n  }\n\n  /**\n   * Delays execution for a specified number of milliseconds.\n   *\n   * @param {number} [t=0] - The number of milliseconds to wait. Defaults to 0.\n   * @returns {Promise<void>} A promise that resolves after the delay.\n   */\n  function wait(t = 0) {\n    return new Promise((resolve) => setTimeout(resolve, t));\n  }\n\n  /**\n   * Checks if a given string starts with a specified substring.\n   *\n   * This is a simple polyfill-like function that mimics the behavior of\n   * `String.prototype.startsWith` without using the built-in method.\n   *\n   * @param {string} str - The full string to evaluate.\n   * @param {string} search - The substring to test against the beginning of `str`.\n   * @returns {boolean} `true` if `str` starts with `search`, otherwise `false`.\n   *\n   * @example\n   * startsWith(\"hello world\", \"hello\");\n   * // returns true\n   *\n   * @example\n   * startsWith(\"hello world\", \"world\");\n   * // returns false\n   *\n   * @example\n   * startsWith(\"test\", \"\");\n   * // returns true (empty search string always matches)\n   *\n   * @example\n   * startsWith(\"abc\", \"abcd\");\n   * // returns false\n   */\n  function startsWith(str, search) {\n    return str.slice(0, search.length) === search;\n  }\n\n  /**\n   * Expando cache for adding properties to DOM nodes with JavaScript.\n   * This used to be an Object in JQLite decorator, but swapped out for a Map\n   *\n   * @type {Map<number, import('../interface.ts').ExpandoStore>}\n   */\n  const Cache = new Map();\n\n  /** @type {number} */\n  let jqId = 1;\n\n  /**\n   * Key for storing isolate scope data, attached to an element\n   */\n  const ISOLATE_SCOPE_KEY = \"$isolateScope\";\n  const EXPANDO = \"ng\";\n\n  /**\n   * Key for storing scope data, attached to an element\n   */\n  const SCOPE_KEY = \"$scope\";\n\n  const DASH_LOWERCASE_REGEXP = /-([a-z])/g;\n  const UNDERSCORE_LOWERCASE_REGEXP = /_([a-z])/g;\n\n  /**\n   * A list of boolean attributes in HTML.\n   * @type {string[]}\n   */\n  const BOOLEAN_ATTR = [\n    \"multiple\",\n    \"selected\",\n    \"checked\",\n    \"disabled\",\n    \"readonly\",\n    \"required\",\n    \"open\",\n  ];\n\n  /**\n   * A list of boolean attributes in HTML\n   * @type {string[]}\n   */\n  const BOOLEAN_ELEMENTS = [\n    \"INPUT\",\n    \"SELECT\",\n    \"OPTION\",\n    \"TEXTAREA\",\n    \"BUTTON\",\n    \"FORM\",\n    \"DETAILS\",\n  ];\n\n  ///////////////////////////////////////////////////////////////////\n  ////////////        HELPER FUNCTIONS      /////////////////////////\n  ///////////////////////////////////////////////////////////////////\n\n  /**\n   *\n   * @returns {number} Next unique JQInstance id\n   */\n  function jqNextId() {\n    return ++jqId;\n  }\n\n  /**\n   * @param {string} _all\n   * @param {string} letter\n   * @returns {string}\n   */\n  function fnCamelCaseReplace(_all, letter) {\n    return letter.toUpperCase();\n  }\n\n  /**\n   * Converts kebab-case to camelCase.\n   * @param {string} name Name to normalize\n   * @returns {string}\n   */\n  function kebabToCamel(name) {\n    return name.replace(DASH_LOWERCASE_REGEXP, fnCamelCaseReplace);\n  }\n\n  /**\n   * Converts sname to camelCase.\n   * @param {string} name\n   * @returns {string}\n   */\n  function snakeToCamel(name) {\n    return name.replace(UNDERSCORE_LOWERCASE_REGEXP, fnCamelCaseReplace);\n  }\n\n  /**\n   * Removes expando data from this element. If key is provided, only\n   * its field is removed. If data is empty, also removes `ExpandoStore`\n   * from cache.\n   * @param {Element} element\n   * @param {string} [name] - key of field to remove\n   */\n  function removeElementData(element, name) {\n    const expandoId = element[EXPANDO];\n    const expandoStore = expandoId && Cache.get(expandoId);\n\n    if (expandoStore) {\n      if (name) {\n        delete expandoStore.data[name];\n      } else {\n        expandoStore.data = {};\n      }\n\n      removeIfEmptyData(element);\n    }\n  }\n\n  /**\n   * Stores data associated with an element inside the expando property of the DOM element.\n   *\n   * @see {@link https://developer.mozilla.org/en-US/docs/Glossary/Expando MDN Glossary: Expando}\n   *\n   * @param {Element} element\n   * @param {boolean} [createIfNecessary=false]\n   * @returns {import(\"../interface.ts\").ExpandoStore}\n   */\n  function getExpando(element, createIfNecessary = false) {\n    let expandoId = element[EXPANDO];\n    let expandoStore = expandoId && Cache.get(expandoId);\n\n    if (createIfNecessary && !expandoStore) {\n      element[EXPANDO] = expandoId = jqNextId();\n      expandoStore = {\n        data: {},\n      };\n      Cache.set(expandoId, expandoStore);\n    }\n\n    return expandoStore;\n  }\n\n  /**\n   * Checks if the string contains HTML tags or entities.\n   * @param {string} html\n   * @returns {boolean} True if the string is plain text, false if it contains HTML tags or entities.\n   */\n  function isTextNode(html) {\n    return !/<|&#?\\w+;/.test(html);\n  }\n\n  /**\n   * Check if element can accept expando data\n   * @param {Element|Node} node\n   * @returns {boolean}\n   */\n  function elementAcceptsData(node) {\n    // The window object can accept data but has no nodeType\n    // Otherwise we are only interested in elements (1) and documents (9)\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n      case Node.DOCUMENT_NODE:\n      case Node.COMMENT_NODE:\n      case undefined: // window.object\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * @param {Element} element\n   * @param {boolean} [onlyDescendants]\n   * @returns {void}\n   */\n  function dealoc(element, onlyDescendants) {\n    if (!element) return;\n    if (Array.isArray(element)) {\n      element.forEach((x) => dealoc(x, onlyDescendants));\n    } else {\n      if (!onlyDescendants && elementAcceptsData(element)) {\n        cleanElementData([element]);\n      }\n\n      if (elementAcceptsData(element)) {\n        cleanElementData(element.querySelectorAll(\"*\"));\n      }\n    }\n    delete element[EXPANDO];\n    element.innerHTML = \"\";\n  }\n\n  /**\n   * If expando store data is empty, then delete it and set its expando id.\n   * to undefined.\n   * @param {Element} element\n   */\n  function removeIfEmptyData(element) {\n    const expandoId = element[EXPANDO];\n    const { data } = Cache.get(expandoId);\n\n    if (!data || !Object.keys(data).length) {\n      Cache.delete(expandoId);\n      element[EXPANDO] = undefined; // don't delete DOM expandos. Chrome don't like it\n    }\n  }\n\n  /**\n   * Gets or sets cache data for a given element.\n   *\n   * @param {Element} element - The DOM element to get or set data on.\n   * @param {string|Object} key - The key (as a string) to get/set or an object for mass-setting.\n   * @param {*} [value] - The value to set. If not provided, the function acts as a getter.\n   * @returns {*} - The retrieved data if acting as a getter. Otherwise, returns undefined.\n   */\n  function getOrSetCacheData(element, key, value) {\n    if (elementAcceptsData(element)) {\n      let prop;\n\n      const isSimpleSetter = isDefined(value);\n      const isSimpleGetter = !isSimpleSetter && key && !isObject(key);\n      const massGetter = !key;\n      const expandoStore = getExpando(element, !isSimpleGetter);\n      const data = expandoStore && expandoStore.data;\n\n      if (isSimpleSetter) {\n        data[kebabToCamel(key)] = value;\n      } else {\n        if (massGetter) {\n          return data;\n        }\n        if (isSimpleGetter) {\n          // don't force creation of expandoStore if it doesn't exist yet\n          return data && data[kebabToCamel(key)];\n        }\n        // mass-setter: data({key1: val1, key2: val2})\n        for (prop in key) {\n          data[kebabToCamel(prop)] = key[prop];\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets cache data for a given element.\n   *\n   * @param {Element|Node} element - The DOM element to get or set data on.\n   * @param {string} key - The key (as a string) to get/set or an object for mass-setting.\n   * @param {*} [value] - The value to set. If not provided, the function acts as a getter.\n   * @returns\n   */\n  function setCacheData(element, key, value) {\n    if (elementAcceptsData(element)) {\n      const expandoStore = getExpando(/** @type {Element} */ (element), true);\n      const data = expandoStore && expandoStore.data;\n      data[kebabToCamel(key)] = value;\n    } else {\n      if (element.parentElement) {\n        // TODO: check should occur perhaps prior at compilation level that this is a valid element\n        setCacheData(element.parentElement, key, value);\n      }\n    }\n  }\n\n  /**\n   * Gets cache data for a given element.\n   *\n   * @param {Element} element - The DOM element to get data from.\n   * @param {string} [key] - The key (as a string) to retrieve. If not provided, returns all data.\n   * @returns {*} - The retrieved data for the given key or all data if no key is provided.\n   */\n  function getCacheData(element, key) {\n    if (elementAcceptsData(element)) {\n      const expandoStore = getExpando(element, false); // Don't create if it doesn't exist\n      const data = expandoStore && expandoStore.data;\n      if (!key) {\n        return undefined;\n      }\n      return data && data[kebabToCamel(key)];\n    }\n    return undefined;\n  }\n\n  /**\n   * Deletes cache data for a given element for a particular key.\n   *\n   * @param {Element} element - The DOM element to delete data from.\n   * @param {string} key - The key (as a string) to delete.\n   * @returns void\n   */\n  function deleteCacheData(element, key) {\n\n    if (elementAcceptsData(element)) {\n      const expandoStore = getExpando(element, false); // Don't create if it doesn't exist\n      const data = expandoStore?.data;\n\n      if (data && hasOwn(data, kebabToCamel(key))) {\n        delete data[kebabToCamel(key)];\n      }\n    }\n  }\n  /**\n   * Gets scope for a given element.\n   *\n   * @param {Element} element - The DOM element to get data from.\n   * @returns {*} - The retrieved data for the given key or all data if no key is provided.\n   */\n  function getScope(element) {\n    return getCacheData(element, SCOPE_KEY);\n  }\n\n  /**\n   * Set scope for a given element.\n   *\n   * @param {Element|Node|ChildNode} element - The DOM element to set data on.\n   * @param {import(\"../core/scope/scope.js\").Scope} scope - The Scope attached to this element\n   */\n  function setScope(element, scope) {\n    return setCacheData(element, SCOPE_KEY, scope);\n  }\n\n  /**\n   * Set isolate scope for a given element.\n   *\n   * @param {Element} element - The DOM element to set data on.\n   * @param {import(\"../core/scope/scope.js\").Scope} scope - The Scope attached to this element\n   */\n  function setIsolateScope(element, scope) {\n    return setCacheData(element, ISOLATE_SCOPE_KEY, scope);\n  }\n\n  /**\n   * Gets the controller instance for a given element, if exists. Defaults to \"ngControllerController\"\n   *\n   * @param {Element} element - The DOM element to get data from.\n   * @param {string} [name] - The DOM element to get data from.\n   * @returns {import(\"../core/scope/scope.js\").Scope|undefined} - The retrieved data\n   */\n  function getController(element, name) {\n    return getInheritedData(element, `$${name || \"ngController\"}Controller`);\n  }\n\n  /**\n   *\n   * @param {Node} element\n   * @param {string} name\n   * @returns\n   */\n  function getInheritedData(element, name) {\n    // if element is the document object work with the html element instead\n    // this makes $(document).scope() possible\n    if (element.nodeType === Node.DOCUMENT_NODE) {\n      element = /** @type {Document} */ (element).documentElement;\n    }\n\n    let value;\n    while (element) {\n      if (\n        isDefined((value = getCacheData(/** @type {Element} */ (element), name)))\n      )\n        return value;\n\n      // If dealing with a document fragment node with a host element, and no parent, use the host\n      // element as the parent. This enables directives within a Shadow DOM or polyfilled Shadow DOM\n      // to lookup parent controllers.\n      element =\n        element.parentNode ||\n        (element.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\n          /** @type {ShadowRoot} */ (element).host);\n    }\n  }\n\n  /**\n   *\n   * @param {Element} element\n   * @param {boolean} keepData\n   */\n  function removeElement(element, keepData = false) {\n    if (!keepData) {\n      dealoc(element);\n    }\n    const parent = element.parentNode;\n    if (parent) parent.removeChild(element);\n  }\n\n  /**\n   * Extracts the starting tag from an HTML string or DOM element.\n   *\n   * @param {string|Element|Node} elementOrStr - The HTML string or DOM element to process.\n   * @returns {string} The starting tag or processed result.\n   */\n  function startingTag(elementOrStr) {\n    let clone;\n\n    if (typeof elementOrStr === \"string\") {\n      const parser = new DOMParser();\n      const doc = parser.parseFromString(elementOrStr, \"text/html\");\n      clone = doc.body.firstChild.cloneNode(true);\n    } else if (elementOrStr instanceof Element || elementOrStr instanceof Node) {\n      clone = elementOrStr.cloneNode(true);\n    } else {\n      throw new Error(\"Input must be an HTML string or a DOM element.\");\n    }\n\n    while (clone.firstChild) {\n      clone.removeChild(clone.firstChild);\n    }\n\n    const divWrapper = document.createElement(\"div\");\n    divWrapper.appendChild(clone);\n    const elemHtml = divWrapper.innerHTML;\n\n    try {\n      if (clone.nodeType === Node.TEXT_NODE) {\n        return elemHtml.toLowerCase();\n      } else if (clone.nodeType === Node.COMMENT_NODE) {\n        return `<!--${/** @type {Comment} **/ (clone).data.trim()}-->`;\n      } else {\n        const match = elemHtml.match(/^(<[^>]+>)/);\n        if (match) {\n          return match[1].replace(/^<([\\w-]+)/, (_match, nodeName) => {\n            return \"<\" + nodeName.toLowerCase();\n          });\n        }\n      }\n    } catch {\n      return elemHtml.toLowerCase();\n    }\n\n    return elemHtml.toLowerCase();\n  }\n\n  /**\n   * Return the DOM siblings between the first and last node in the given array.\n   * @param {Array<Node>} nodes An array-like object\n   * @returns {Element} the inputted object or a JQLite collection containing the nodes\n   */\n  function getBlockNodes(nodes) {\n    // TODO(perf): update `nodes` instead of creating a new object?\n    let node = nodes[0];\n    const endNode = nodes[nodes.length - 1];\n    let blockNodes;\n\n    for (let i = 1; node !== endNode && (node = node.nextSibling); i++) {\n      if (blockNodes || nodes[i] !== node) {\n        if (!blockNodes) {\n          // use element to avoid circular dependency\n          blockNodes = Array.prototype.slice.call(nodes, 0, i);\n        }\n        blockNodes.push(node);\n      }\n    }\n\n    return blockNodes || nodes;\n  }\n\n  /**\n   * Gets the name of a boolean attribute if it exists on a given element.\n   *\n   * @param {Element} element - The DOM element to check.\n   * @param {string} name - The name of the attribute.\n   * @returns {string|false} - The attribute name if valid, otherwise false.\n   */\n  function getBooleanAttrName(element, name) {\n    const normalizedName = name.toLowerCase();\n    const isBooleanAttr = BOOLEAN_ATTR.includes(normalizedName);\n    return isBooleanAttr && BOOLEAN_ELEMENTS.includes(element.nodeName)\n      ? normalizedName\n      : false;\n  }\n\n  /**\n   * Takes an array of elements, calls any `$destroy` event handlers, removes any data in cache, and finally removes any\n   * listeners.\n   * @param {NodeListOf<Element>|Element[]} nodes\n   */\n  function cleanElementData(nodes) {\n    for (let i = 0, ii = nodes.length; i < ii; i++) {\n      removeElementData(nodes[i]);\n    }\n  }\n\n  /**\n   * Return instance of InjectorService attached to element\n   * @param {Element} element\n   * @returns {import('../core/di/internal-injector.js').InjectorService}\n   */\n  function getInjector(element) {\n    return getInheritedData(element, \"$injector\");\n  }\n\n  /**\n   * Creates a DOM element from an HTML string.\n   * @param {string} htmlString - A string representing the HTML to parse. Must have only one root element.\n   * @returns {Element} - The parsed DOM element.\n   */\n  function createElementFromHTML(htmlString) {\n    const template = document.createElement(\"template\");\n    template.innerHTML = htmlString.trim();\n    return /** @type {Element} */ (template.content.firstChild);\n  }\n\n  /**\n   * Creates a DOM element from an HTML string.\n   * @param {string} htmlString - A string representing the HTML to parse.\n   * @returns {NodeList} - The parsed DOM element.\n   */\n  function createNodelistFromHTML(htmlString) {\n    const template = document.createElement(\"template\");\n    template.innerHTML = htmlString.trim();\n    return template.content.childNodes;\n  }\n\n  /**\n   * Remove element from the DOM and clear Cache data, associated with the node.\n   * @param {Element} element\n   */\n  function emptyElement(element) {\n    dealoc(element, true);\n    switch (element.nodeType) {\n      case Node.ELEMENT_NODE:\n      case Node.DOCUMENT_NODE:\n      case Node.DOCUMENT_FRAGMENT_NODE:\n        element.replaceChildren();\n        break;\n    }\n  }\n\n  function domInsert(element, parentElement, afterElement) {\n    // if for some reason the previous element was removed\n    // from the dom sometime before this code runs then let's\n    // just stick to using the parent element as the anchor\n    if (afterElement) {\n      const afterNode = extractElementNode$1(afterElement);\n      if (\n        afterNode &&\n        !afterNode.parentNode &&\n        !afterNode.previousElementSibling\n      ) {\n        afterElement = null;\n      }\n    }\n    if (afterElement) {\n      afterElement.after(element);\n    } else {\n      parentElement.prepend(element);\n    }\n  }\n\n  function extractElementNode$1(element) {\n    const { length } = element;\n    for (let i = 0; i < length; i++) {\n      const elm = element[i];\n      if (elm.nodeType === Node.ELEMENT_NODE) {\n        return elm;\n      }\n    }\n  }\n\n  /**\n   * Returns the base href of the document.\n   *\n   * @returns {string} The base href.\n   */\n  function getBaseHref() {\n    const href = document.querySelector(\"base\")?.getAttribute(\"href\");\n    return href ? href.replace(/^(https?:)?\\/\\/[^/]*/, \"\") : \"\";\n  }\n\n  /**\n   * A helper list of tokens matching the standard injectables that come predefined in the core `ng` module.\n   * These string tokens are commonly injected into services, directives, or components via `$inject`.\n   *\n   * Example:\n   * ```js\n   *\n   * myDirective.$inject = [\n   *   angular.$injectTokens.$animate,\n   *   angular.$injectTokens.$templateRequest,\n   * ];\n   *\n   * function myDirective($animate, $templateRequest) { ... }\n   *\n   * ```\n   * @type Readonly<Record<string, string>>\n   */\n  const $injectTokens = Object.freeze({\n    $attrs: \"$attrs\",\n    $scope: \"$scope\",\n    $element: \"$element\",\n    $$AnimateRunner: \"$$AnimateRunner\",\n    $$animateAsyncRun: \"$$animateAsyncRun\",\n    $$animateCache: \"$$animateCache\",\n    $$animateCssDriver: \"$$animateCssDriver\",\n    $$animateJs: \"$$animateJs\",\n    $$animateJsDriver: \"$$animateJsDriver\",\n    $$animateQueue: \"$$animateQueue\",\n    $$animation: \"$$animation\",\n    $$rAFScheduler: \"$$rAFScheduler\",\n    $$taskTrackerFactory: \"$$taskTrackerFactory\",\n    $anchorScroll: \"$anchorScroll\",\n    $animate: \"$animate\",\n    $animateCss: \"$animateCss\",\n    $aria: \"$aria\",\n    $compile: \"$compile\",\n    $controller: \"$controller\",\n    $eventBus: \"$eventBus\",\n    $exceptionHandler: \"$exceptionHandler\",\n    $filter: \"$filter\",\n    $http: \"$http\",\n    $httpBackend: \"$httpBackend\",\n    $httpParamSerializer: \"$httpParamSerializer\",\n    $interpolate: \"$interpolate\",\n    $location: \"$location\",\n    $log: \"$log\",\n    $viewScroll: \"$viewScroll\",\n    $parse: \"$parse\",\n    $rootScope: \"$rootScope\",\n    $rootElement: \"$rootElement\",\n    $router: \"$router\",\n    $sce: \"$sce\",\n    $sceDelegate: \"$sceDelegate\",\n    $state: \"$state\",\n    $stateRegistry: \"$stateRegistry\",\n    $templateCache: \"$templateCache\",\n    $templateFactory: \"$templateFactory\",\n    $templateRequest: \"$templateRequest\",\n    $transitions: \"$transitions\",\n    $urlConfig: \"$urlConfig\",\n    $url: \"$url\",\n    $view: \"$view\",\n    // provide literals\n    $provide: \"$provide\",\n    $injector: \"$injector\",\n    $compileProvider: \"$compileProvider\",\n    $animateProvider: \"$animateProvider\",\n    $filterProvider: \"$filterProvider\",\n    $controllerProvider: \"$controllerProvider\",\n  });\n\n  /**\n   * Utility for mapping to service-names to providers\n   * @param {String[]} services\n   */\n  function provider(services) {\n    return services.map((x) => x + \"Provider\");\n  }\n\n  /** @private */\n  const INJECTOR_LITERAL = \"$injector\";\n  /** @private */\n  const COMPILE_LITERAL = \"$compileProvider\";\n  /** @private */\n  const ANIMATION_LITERAL = \"$animateProvider\";\n  /** @private */\n  const FILTER_LITERAL = \"$filterProvider\";\n  /** @private */\n  const CONTROLLER_LITERAL = \"$controllerProvider\";\n\n  /**\n   * Modules are collections of application configuration information for components:\n   * controllers, directives, filters, etc. They provide recipes for the injector\n   * to do the actual instantiation. A module itself has no behaviour but only state.\n   * A such, it acts as a data structure between the Angular instance and the injector service.\n   *\n   * Since this is an internal structure that is exposed only via the Angular instance,\n   * it contains no validation of the items it receives. It is up to the instantiator on\n   * modules to do the actual validation.\n   */\n  class NgModule {\n    /**\n     * @param {string} name - Name of the module\n     * @param {Array<string>} requires - List of modules which the injector will load before the current module\n     * @param {import(\"../../interface.js\").Injectable} [configFn]\n     */\n    constructor(name, requires, configFn) {\n      assert(isString(name), \"name required\");\n      assert(Array.isArray(requires), \"requires array required\");\n      /**\n       * Name of the current module.\n       * @type {string}\n       */\n      this.name = name;\n\n      /**\n       * Array of module names that this module depends on.\n       * @type {string[]}\n       */\n      this.requires = requires;\n\n      /**\n       * Holds a collection of tasks, required to instantiate an angular component\n       * @type {!Array<Array<*>>}\n       */\n      this.invokeQueue = [];\n\n      /** @type {!Array<Array<*>>} */\n      this.configBlocks = [];\n\n      /** @type {!Array.<import(\"../../interface.js\").Injectable>} */\n      this.runBlocks = [];\n\n      if (configFn) {\n        this.config(configFn);\n      }\n    }\n\n    /**\n     * @param {string} name\n     * @param {any} object\n     * @returns {NgModule}\n     */\n    value(name, object) {\n      this.invokeQueue.push([$injectTokens.$provide, \"value\", [name, object]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {any} object\n     * @returns {NgModule}\n     */\n    constant(name, object) {\n      this.invokeQueue.unshift([$injectTokens.$provide, \"constant\", [name, object]]);\n      return this;\n    }\n\n    /**\n     *\n     * @param {import(\"../../interface.js\").Injectable} configFn\n     * @returns {NgModule}\n     */\n    config(configFn) {\n      this.configBlocks.push([INJECTOR_LITERAL, \"invoke\", [configFn]]);\n      return this;\n    }\n\n    /**\n     * @param {import(\"../../interface.js\").Injectable} block\n     * @returns {NgModule}\n     */\n    run(block) {\n      this.runBlocks.push(block);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").ComponentOptions} options\n     * @returns {NgModule}\n     */\n    component(name, options) {\n      if (options && isFunction(options)) {\n        options[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([COMPILE_LITERAL, \"component\", [name, options]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} providerFunction\n     * @returns {NgModule}\n     */\n    factory(name, providerFunction) {\n      if (providerFunction && isFunction(providerFunction)) {\n        providerFunction[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([$injectTokens.$provide, \"factory\", [name, providerFunction]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} serviceFunction\n     * @returns {NgModule}\n     */\n    service(name, serviceFunction) {\n      if (serviceFunction && isFunction(serviceFunction)) {\n        serviceFunction[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([$injectTokens.$provide, \"service\", [name, serviceFunction]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} providerType\n     * @returns {NgModule}\n     */\n    provider(name, providerType) {\n      if (providerType && isFunction(providerType)) {\n        providerType[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([$injectTokens.$provide, \"provider\", [name, providerType]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} decorFn\n     * @returns {NgModule}\n     */\n    decorator(name, decorFn) {\n      if (decorFn && isFunction(decorFn)) {\n        decorFn[\"$$moduleName\"] = name;\n      }\n      this.configBlocks.push([$injectTokens.$provide, \"decorator\", [name, decorFn]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} directiveFactory\n     * @returns {NgModule}\n     */\n    directive(name, directiveFactory) {\n      if (directiveFactory && isFunction(directiveFactory)) {\n        directiveFactory[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([\n        COMPILE_LITERAL,\n        \"directive\",\n        [name, directiveFactory],\n      ]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} animationFactory\n     * @returns {NgModule}\n     */\n    animation(name, animationFactory) {\n      if (animationFactory && isFunction(animationFactory)) {\n        animationFactory[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([\n        ANIMATION_LITERAL,\n        \"register\",\n        [name, animationFactory],\n      ]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} filterFn\n     * @return {NgModule}\n     */\n    filter(name, filterFn) {\n      if (filterFn && isFunction(filterFn)) {\n        filterFn[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([FILTER_LITERAL, \"register\", [name, filterFn]]);\n      return this;\n    }\n\n    /**\n     * @param {string} name\n     * @param {import(\"../../interface.js\").Injectable} ctlFn\n     * @returns {NgModule}\n     */\n    controller(name, ctlFn) {\n      if (ctlFn && isFunction(ctlFn)) {\n        ctlFn[\"$$moduleName\"] = name;\n      }\n      this.invokeQueue.push([CONTROLLER_LITERAL, \"register\", [name, ctlFn]]);\n      return this;\n    }\n  }\n\n  const ARROW_ARG$1 = /^([^(]+?)=>/;\n  const FN_ARGS$1 = /^[^(]*\\(\\s*([^)]*)\\)/m;\n  const FN_ARG$1 = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n  const STRIP_COMMENTS$1 = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n  const $injectorMinErr$2 = minErr(INJECTOR_LITERAL);\n\n  const providerSuffix$1 = \"Provider\";\n  const INSTANTIATING = true;\n\n  class AbstractInjector {\n    /**\n     * @param {boolean} strictDi - Indicates if strict dependency injection is enforced.\n     */\n    constructor(strictDi) {\n      /**\n       * @type {Object<String, Function>}\n       */\n      this.cache = {};\n      /** @type {boolean} */\n      this.strictDi = strictDi;\n      /** @type {string[]} */\n      this.path = [];\n      /** @type {Object.<string, import(\"./ng-module.js\").NgModule>} */\n      this.modules = {};\n    }\n\n    /**\n     * Get a service by name.\n     *\n     * @param {string} serviceName\n     * @returns {any}\n     */\n    get(serviceName) {\n      if (hasOwn(this.cache, serviceName)) {\n        if (this.cache[serviceName] === INSTANTIATING) {\n          throw $injectorMinErr$2(\n            \"cdep\",\n            \"Circular dependency found: {0}\",\n            `${serviceName} <- ${this.path.join(\" <- \")}`,\n          );\n        }\n        return this.cache[serviceName];\n      }\n\n      this.path.unshift(serviceName);\n      this.cache[serviceName] = INSTANTIATING;\n      try {\n        this.cache[serviceName] = this.factory(serviceName);\n      } catch (err) {\n        // this is for the error handling being thrown by the providerCache multiple times\n        delete this.cache[serviceName];\n        throw err;\n      }\n      return this.cache[serviceName];\n    }\n\n    /**\n     * Get the injection arguments for a function.\n     *\n     * @param {Function|Array} fn\n     * @param {Object} locals\n     * @param {string} serviceName\n     * @returns\n     */\n    injectionArgs(fn, locals, serviceName) {\n      const args = [];\n      const $inject = annotate$1(fn, this.strictDi, serviceName);\n\n      for (let i = 0, { length } = $inject; i < length; i++) {\n        const key = $inject[i];\n        if (typeof key !== \"string\") {\n          throw $injectorMinErr$2(\n            \"itkn\",\n            \"Incorrect injection token! Expected service name as string, got {0}\",\n            key,\n          );\n        }\n        args.push(locals && hasOwn(locals, key) ? locals[key] : this.get(key));\n      }\n      return args;\n    }\n\n    /**\n     * Invoke a function with optional context and locals.\n     *\n     * @param {Function|String|Array<any>} fn\n     * @param {*} [self]\n     * @param {Object} [locals]\n     * @param {string} [serviceName]\n     * @returns {*}\n     */\n    invoke(fn, self, locals, serviceName) {\n      if (typeof locals === \"string\") {\n        serviceName = locals;\n        locals = null;\n      }\n\n      const args = this.injectionArgs(\n        /** @type {Function} */ (fn),\n        locals,\n        serviceName,\n      );\n      if (Array.isArray(fn)) {\n        fn = fn[fn.length - 1];\n      }\n\n      if (isClass(/** @type {Function} */ (fn))) {\n        args.unshift(null);\n        return new (Function.prototype.bind.apply(fn, args))();\n      } else {\n        return /** @type {Function} */ (fn).apply(self, args);\n      }\n    }\n\n    /**\n     * Instantiate a type constructor with optional locals.\n     * @param {Function|Array} type\n     * @param {*} [locals]\n     * @param {string} [serviceName]\n     */\n    instantiate(type, locals, serviceName) {\n      // Check if type is annotated and use just the given function at n-1 as parameter\n      // e.g. someModule.factory('greeter', ['$window', function(renamed$window) {}]);\n      const ctor = Array.isArray(type) ? type[type.length - 1] : type;\n      const args = this.injectionArgs(type, locals, serviceName);\n      // Empty object at position 0 is ignored for invocation with `new`, but required.\n      args.unshift(null);\n      return new (Function.prototype.bind.apply(ctor, args))();\n    }\n\n    /**\n     * @abstract\n     */\n    loadNewModules() {}\n\n    /**\n     * @abstract\n     * @param {string} _serviceName\n     * @returns {any}\n     */\n    factory(_serviceName) {\n      console.error(`Unhandled ${_serviceName}`);\n    }\n  }\n\n  /**\n   * Injector for providers\n   */\n  class ProviderInjector extends AbstractInjector {\n    /**\n     * @param {Object} cache\n     * @param {boolean} strictDi - Indicates if strict dependency injection is enforced.\n     */\n    constructor(cache, strictDi) {\n      super(strictDi);\n      this.cache = cache;\n    }\n\n    /**\n     * Factory method for creating services.\n     * @param {string} caller - The name of the caller requesting the service.\n     * @throws {Error} If the provider is unknown.\n     */\n    factory(caller) {\n      this.path.push(caller);\n      // prevents lookups to providers through get\n      throw $injectorMinErr$2(\n        \"unpr\",\n        \"Unknown provider: {0}\",\n        this.path.join(\" <- \"),\n      );\n    }\n  }\n\n  /**\n   * Injector for factories and services\n   */\n  class InjectorService extends AbstractInjector {\n    /**\n     * @param {ProviderInjector} providerInjector\n     * @param {boolean} strictDi - Indicates if strict dependency injection is enforced.\n     */\n    constructor(providerInjector, strictDi) {\n      super(strictDi);\n\n      /** @type {ProviderInjector} */\n      this.providerInjector = providerInjector;\n      /** @type {Object.<string, import(\"./ng-module.js\").NgModule>} */\n      this.modules = providerInjector.modules;\n    }\n\n    /**\n     * @param {string} serviceName\n     * @returns {*}\n     */\n    factory(serviceName) {\n      const provider = this.providerInjector.get(serviceName + providerSuffix$1);\n      return this.invoke(provider.$get, provider, undefined, serviceName);\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {boolean}\n     */\n    has(name) {\n      const hasProvider = hasOwn(\n        this.providerInjector.cache,\n        name + providerSuffix$1,\n      );\n      const hasCache = hasOwn(this.cache, name);\n      return hasProvider || hasCache;\n    }\n  }\n\n  // Helpers\n\n  /**\n   * @param {Function} fn\n   * @returns {string}\n   */\n  function stringifyFn$1(fn) {\n    return Function.prototype.toString.call(fn);\n  }\n\n  /**\n   * @param {Function} fn\n   * @returns {Array<any>}\n   */\n  function extractArgs$1(fn) {\n    const fnText = stringifyFn$1(fn).replace(STRIP_COMMENTS$1, \"\");\n    return fnText.match(ARROW_ARG$1) || fnText.match(FN_ARGS$1);\n  }\n\n  /**\n   * @param {Function} func\n   * @returns {boolean}\n   */\n  function isClass(func) {\n    return /^class\\b/.test(stringifyFn$1(func));\n  }\n\n  /**\n   *\n   * @param {any} fn\n   * @param {boolean} strictDi\n   * @param {string} name\n   * @returns {Array<string>}\n   */\n  function annotate$1(fn, strictDi, name) {\n    let $inject, argDecl, last;\n\n    if (typeof fn === \"function\") {\n      if (!($inject = fn.$inject)) {\n        $inject = [];\n        if (fn.length) {\n          if (strictDi) {\n            throw $injectorMinErr$2(\n              \"strictdi\",\n              \"{0} is not using explicit annotation and cannot be invoked in strict mode\",\n              name,\n            );\n          }\n          argDecl = extractArgs$1(fn);\n          argDecl[1].split(/,/).forEach(function (arg) {\n            arg.replace(FN_ARG$1, function (_all, _underscore, name) {\n              $inject.push(name);\n            });\n          });\n        }\n        fn.$inject = $inject;\n      }\n    } else if (Array.isArray(fn)) {\n      last = /** @type {Array} */ (fn).length - 1;\n      assertArgFn(fn[last], \"fn\");\n      $inject = /** @type {Array} */ (fn).slice(0, last);\n    } else {\n      assertArgFn(fn, \"fn\", true);\n    }\n    return $inject;\n  }\n\n  const ARROW_ARG = /^([^(]+?)=>/;\n  const FN_ARGS = /^[^(]*\\(\\s*([^)]*)\\)/m;\n  const FN_ARG_SPLIT = /,/;\n  const FN_ARG = /^\\s*(_?)(\\S+?)\\1\\s*$/;\n  const STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n  const $injectorMinErr$1 = minErr(INJECTOR_LITERAL);\n  const providerSuffix = \"Provider\";\n\n  /**\n   *\n   * @param {Array<String|Function>} modulesToLoad\n   * @param {boolean} [strictDi]\n   * @returns {InjectorService}\n   */\n  function createInjector(modulesToLoad, strictDi = false) {\n    assert(Array.isArray(modulesToLoad), \"modules required\");\n\n    /** @type {Map<String|Function, boolean>} */\n    const loadedModules = new Map(); // Keep track of loaded modules to avoid circular dependencies\n\n    const providerCache = {\n      $provide: {\n        provider: supportObject(provider),\n        factory: supportObject(factory),\n        service: supportObject(service),\n        value: supportObject(value),\n        constant: supportObject(constant),\n        decorator,\n      },\n    };\n\n    const providerInjector = (providerCache.$injector = new ProviderInjector(\n      providerCache,\n      strictDi,\n    ));\n\n    const protoInstanceInjector = new InjectorService(providerInjector, strictDi);\n\n    providerCache.$injectorProvider = {\n      // $injectionProvider return instance injector\n      $get: () => protoInstanceInjector,\n    };\n\n    let instanceInjector = protoInstanceInjector;\n    const runBlocks = loadModules(modulesToLoad);\n    instanceInjector = protoInstanceInjector.get(INJECTOR_LITERAL);\n\n    runBlocks.forEach((fn) => fn && instanceInjector.invoke(fn));\n\n    instanceInjector.loadNewModules = (mods) =>\n      loadModules(mods).forEach((fn) => fn && instanceInjector.invoke(fn));\n\n    return instanceInjector;\n\n    ////////////////////////////////////\n    // $provide methods\n    ////////////////////////////////////\n\n    /**\n     * Registers a provider.\n     * @param {string} name\n     * @param {import('../../interface.ts').ServiceProvider | import('../../interface.ts').InjectableFactory} provider\n     * @returns {import('../../interface.ts').ServiceProvider}\n     */\n    function provider(name, provider) {\n      assertNotHasOwnProperty(name, \"service\");\n      let newProvider;\n      if (isFunction(provider) || Array.isArray(provider)) {\n        newProvider = providerInjector.instantiate(\n          /** @type {Function} */ (provider),\n        );\n      } else {\n        newProvider = provider;\n      }\n      if (!newProvider.$get) {\n        throw $injectorMinErr$1(\n          \"pget\",\n          \"Provider '{0}' must define $get factory method.\",\n          name,\n        );\n      }\n      providerCache[name + providerSuffix] = newProvider;\n      return newProvider;\n    }\n\n    /**\n     * Registers a factory.\n     * @param {string} name\n     * @param {(string|(function(*): *))[]} factoryFn\n     * @returns {import('../../interface.js').ServiceProvider}\n     */\n    function factory(name, factoryFn) {\n      return provider(name, {\n        $get: () => {\n          const result = instanceInjector.invoke(factoryFn, this);\n          if (isUndefined(result)) {\n            throw $injectorMinErr$1(\n              \"undef\",\n              \"Provider '{0}' must return a value from $get factory method.\",\n              name,\n            );\n          }\n          return result;\n        },\n      });\n    }\n\n    /**\n     * Registers a service constructor.\n     * @param {string} name\n     * @param {Function} constructor\n     * @returns {import('../../interface.js').ServiceProvider}\n     */\n    function service(name, constructor) {\n      return factory(name, [\n        INJECTOR_LITERAL,\n        ($injector) => $injector.instantiate(constructor),\n      ]);\n    }\n\n    /**\n     * Register a fixed value as a service.\n     * @param {String} name\n     * @param {any} val\n     * @returns {import('../../interface.ts').ServiceProvider}\n     */\n    function value(name, val) {\n      return (providerCache[name + providerSuffix] = { $get: () => val });\n    }\n\n    /**\n     * Register a constant value (available during config).\n     * @param {string} name\n     * @param {any} value\n     * @returns {void}\n     */\n    function constant(name, value) {\n      assertNotHasOwnProperty(name, \"constant\");\n      providerInjector.cache[name] = value;\n      protoInstanceInjector.cache[name] = value;\n    }\n\n    /**\n     * Register a decorator function to modify or replace an existing service.\n     * @param name - The name of the service to decorate.\n     * @param fn - A function that takes `$delegate` and returns a decorated service.\n     * @returns {void}\n     */\n    function decorator(serviceName, decorFn) {\n      const origProvider = providerInjector.get(serviceName + providerSuffix);\n      const origGet = origProvider.$get;\n\n      origProvider.$get = function () {\n        const origInstance = instanceInjector.invoke(origGet, origProvider);\n        return instanceInjector.invoke(decorFn, null, {\n          $delegate: origInstance,\n        });\n      };\n    }\n\n    /**\n     *\n     * @param {Array<String|Function>} modulesToLoad\n     * @returns\n     */\n    function loadModules(modulesToLoad) {\n      assertArg$1(\n        isUndefined(modulesToLoad) || Array.isArray(modulesToLoad),\n        \"modulesToLoad\",\n        \"not an array\",\n      );\n      let runBlocks = [];\n\n      modulesToLoad.forEach((module) => {\n        if (loadedModules.get(module)) return;\n        loadedModules.set(module, true);\n\n        try {\n          if (isString(module)) {\n            /** @type {import('./ng-module.js').NgModule} */\n            const moduleFn = window[\"angular\"].module(module);\n            instanceInjector.modules[/** @type {string } */ (module)] = moduleFn;\n            runBlocks = runBlocks\n              .concat(loadModules(moduleFn.requires))\n              .concat(moduleFn.runBlocks);\n\n            const invokeQueue = moduleFn.invokeQueue.concat(\n              moduleFn.configBlocks,\n            );\n            invokeQueue.forEach((invokeArgs) => {\n              const provider = providerInjector.get(invokeArgs[0]);\n              provider[invokeArgs[1]].apply(provider, invokeArgs[2]);\n            });\n          } else if (isFunction(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n          } else if (Array.isArray(module)) {\n            runBlocks.push(providerInjector.invoke(module));\n          } else {\n            assertArgFn(module, \"module\");\n          }\n        } catch (e) {\n          if (Array.isArray(module)) {\n            module = module[module.length - 1];\n          }\n          if (e.message && e.stack && e.stack.indexOf(e.message) === -1) {\n            // Safari & FF's stack traces don't contain error.message content\n            // unlike those of Chrome and IE\n            // So if stack doesn't contain message, we create a new string that contains both.\n            // Since error.stack is read-only in Safari, I'm overriding e and not e.stack here.\n\n            e.message = `${e.message}\\n${e.stack}`;\n          }\n          throw $injectorMinErr$1(\n            \"modulerr\",\n            \"Failed to instantiate module {0} due to:\\n{1}\",\n            module,\n            e.stack || e.message || e,\n          );\n        }\n      });\n      return runBlocks;\n    }\n  }\n\n  // Helpers\n\n  /**\n   * @param {String} fn\n   * @returns {String}\n   */\n  function stringifyFn(fn) {\n    return Function.prototype.toString.call(fn);\n  }\n\n  /**\n   * @param {String} fn\n   * @returns {Array<any>}\n   */\n  function extractArgs(fn) {\n    const fnText = stringifyFn(fn).replace(STRIP_COMMENTS, \"\");\n    return fnText.match(ARROW_ARG) || fnText.match(FN_ARGS);\n  }\n\n  /**\n   * @param {any} fn\n   * @param {boolean} [strictDi]\n   * @param {String} [name]\n   * @returns {Array<string>}\n   */\n  function annotate(fn, strictDi, name) {\n    let $inject, argDecl, last;\n\n    if (typeof fn === \"function\") {\n      if (!($inject = fn.$inject)) {\n        $inject = [];\n        if (fn.length) {\n          if (strictDi) {\n            throw $injectorMinErr$1(\n              \"strictdi\",\n              \"{0} is not using explicit annotation and cannot be invoked in strict mode\",\n              name,\n            );\n          }\n          argDecl = extractArgs(/** @type {String} */ (fn));\n          argDecl[1].split(FN_ARG_SPLIT).forEach(function (arg) {\n            arg.replace(FN_ARG, function (all, underscore, name) {\n              $inject.push(name);\n            });\n          });\n        }\n        fn.$inject = $inject;\n      }\n    } else if (Array.isArray(fn)) {\n      last = /** @type {Array} */ (fn).length - 1;\n      assertArgFn(fn[last], \"fn\");\n      $inject = /** @type {Array} */ (fn).slice(0, last);\n    } else {\n      assertArgFn(fn, \"fn\", true);\n    }\n    return $inject;\n  }\n\n  function supportObject(delegate) {\n    return function (key, value) {\n      if (isObject(key)) {\n        Object.entries(key).forEach(([k, v]) => {\n          delegate(k, v);\n        });\n      } else {\n        return delegate(key, value);\n      }\n    };\n  }\n\n  /**\n   * A type-safe wrapper around a DOM Node, HTMLElement, HTML string, NodeList, or an array of Nodes.\n   * Provides guarantees around presence and access.\n   */\n  class NodeRef {\n    /**\n     * @param {Node | Element | string | NodeList | Node[]} element - The DOM node(s) or HTML string to wrap.\n     * @throws {Error} If the argument is invalid or cannot be wrapped properly.\n     */\n    constructor(element) {\n      assertArg$1(element, \"element\");\n      this.initial = null;\n\n      /** @private @type {Node | ChildNode | null} */\n      this._node = null;\n\n      /** @private @type {Element | undefined} */\n      this._element = undefined;\n\n      /** @private @type {Array<Node>} a stable list on nodes */\n      this._nodes = undefined;\n\n      /** @type {boolean} */\n      this.linked = false;\n\n      /** @type {boolean} */\n      this.isList = false;\n\n      // Handle HTML string\n      if (isString(element)) {\n        this.initial = element;\n        let res = createElementFromHTML(/** @type {string} */ (element));\n        switch (true) {\n          case res instanceof Element:\n            this.element = res;\n            break;\n          case res instanceof Node:\n            this.node = res;\n            break;\n        }\n      }\n\n      // Handle NodeList\n      else if (element instanceof NodeList) {\n        this.initial = Array.from(element).map((e) => e.cloneNode(true));\n        if (element.length == 1) {\n          this.node = element[0];\n        } else {\n          this._nodes = Array.from(element);\n          this.isList = true;\n        }\n      }\n\n      // Handle single Element\n      else if (element instanceof Element) {\n        this.initial = element.cloneNode(true);\n        this.element = /** @type {Element} */ element;\n      }\n\n      // Handle single Node\n      else if (element instanceof Node) {\n        this.initial = element.cloneNode(true);\n        this._node = element;\n      }\n\n      // Handle array of elements\n      else if (element instanceof Array) {\n        if (element.length == 1) {\n          this.initial = element[0].cloneNode(true);\n          this.node = element[0];\n        } else {\n          this.initial = Array.from(element).map((e) => e.cloneNode(true));\n          this.nodes = element;\n        }\n      } else {\n        throw new Error(\"Invalid element passed to NodeRef\");\n      }\n    }\n\n    /** @returns {Element} */\n    get element() {\n      assertArg$1(this._element, \"element\");\n      return this._element;\n    }\n\n    /** @param {Element} el */\n    set element(el) {\n      assertArg$1(el instanceof Element, \"element\");\n      this._element = el;\n      this._nodes = undefined;\n      this.isList = false;\n    }\n\n    /** @returns {Node | ChildNode} */\n    get node() {\n      assertArg$1(this._node || this._element, \"node\");\n      return this._node || this._element;\n    }\n\n    /** @param {Node | ChildNode} node */\n    set node(node) {\n      assertArg$1(node instanceof Node, \"node\");\n      this._node = node;\n      if (node.nodeType === Node.ELEMENT_NODE) {\n        this._element = /** @type {Element} */ (node);\n      } else {\n        this._element = undefined;\n      }\n    }\n\n    /** @param {Array<Node>} nodes */\n    set nodes(nodes) {\n      assertArg$1(\n        Array.isArray(nodes) && nodes.every((n) => n instanceof Node),\n        \"nodes\",\n      );\n      this._nodes = nodes;\n      this.isList = true;\n    }\n\n    /** @returns {Array<Node>} */\n    get nodes() {\n      assertArg$1(this._nodes, \"nodes\");\n      return this._nodes;\n    }\n\n    /** @returns {NodeList|Node[]} */\n    get nodelist() {\n      assertArg$1(this.isList, \"nodes\");\n      if (this._nodes.length === 0) {\n        return this._nodes;\n      }\n      if (this._nodes[0].parentElement) {\n        return this._nodes[0].parentElement.childNodes;\n      } else {\n        const fragment = document.createDocumentFragment();\n        this._nodes.forEach((el) => {\n          fragment.appendChild(el);\n        });\n        return fragment.childNodes;\n      }\n    }\n\n    /** @returns {Element | Node | ChildNode | NodeList | Node[]} */\n    get dom() {\n      if (this.isList) return this.nodelist;\n      else return this.node;\n    }\n\n    /** @returns {number} */\n    get size() {\n      return this.isList ? this._nodes.length : 1;\n    }\n\n    /** @returns {Element | Node | ChildNode} */\n    getAny() {\n      if (this.isList) {\n        return this._nodes[0];\n      } else {\n        return this._element || this._node;\n      }\n    }\n\n    /** @returns {Element | Array<Node> | Node | ChildNode} */\n    getAll() {\n      if (this.isList) {\n        return this._nodes;\n      } else {\n        return this._element || this._node;\n      }\n    }\n\n    /** @returns {Array<Element> | Array<Node>} */\n    collection() {\n      if (this.isList) {\n        return Array.from(this._nodes);\n      } else {\n        return [this._element || this._node];\n      }\n    }\n\n    /**\n     * @param {number} index\n     * @returns {Element | Node | ChildNode}\n     */\n    getIndex(index) {\n      if (this.isList) {\n        return this._nodes[index];\n      } else {\n        return this.node;\n      }\n    }\n\n    /**\n     * @param {number} index\n     * @param {Element | Node | ChildNode} node\n     */\n    setIndex(index, node) {\n      assertArg$1(index !== null, \"index\");\n      assertArg$1(node, \"node\");\n      if (this.isList) {\n        this._nodes[index] = node;\n      } else {\n        this.node = node;\n      }\n    }\n\n    /**\n     * @returns {NodeRef}\n     */\n    clone() {\n      const cloned = this.isList\n        ? this.nodes.map((el) => el.cloneNode(true))\n        : this.node.cloneNode(true);\n\n      return new NodeRef(cloned);\n    }\n\n    isElement() {\n      return this._element !== undefined;\n    }\n  }\n\n  const $controllerMinErr = minErr(\"$controller\");\n\n  const CNTRL_REG = /^(\\S+)(\\s+as\\s+([\\w$]+))?$/;\n  function identifierForController(controller, ident) {\n    if (isString(controller)) {\n      const match = CNTRL_REG.exec(controller);\n      if (match) return match[3];\n    }\n  }\n\n  /**\n   * The {@link ng.$controller $controller service} is used by AngularTS to create new\n   * controllers.\n   *\n   * This provider allows controller registration via the\n   * {@link ng.$controllerProvider#register register} method.\n   */\n  class ControllerProvider {\n    constructor() {\n      /**\n       * @type {Map<string, Function|Object>}\n       * @private\n       */\n      this.controllers = new Map();\n    }\n\n    /**\n     * Check if a controller with a given name exists.\n     *\n     * @param {string} name Controller name to check.\n     * @returns {boolean} True if the controller exists, false otherwise.\n     */\n    has(name) {\n      return this.controllers.has(name);\n    }\n\n    /**\n     * Register a controller.\n     *\n     * @param {string|Object} name Controller name, or an object map of controllers where the keys are\n     *    the names and the values are the constructors.\n     * @param {Function|Array} constructor Controller constructor function (optionally decorated with DI\n     *    annotations in the array notation).\n     */\n    register(name, constructor) {\n      assertNotHasOwnProperty(name, \"controller\");\n      if (isObject(name)) {\n        Object.entries(name).forEach(([key, value]) => {\n          this.controllers.set(key, value);\n        });\n      } else {\n        this.controllers.set(name, constructor);\n      }\n    }\n\n    /**\n     * $get method for dependency injection.\n     */\n    $get = [\n      \"$injector\",\n\n      /**\n       * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n       * @returns {Function} A service function that creates controllers.\n       */\n      ($injector) => {\n        return (expression, locals, later, ident) => {\n          let instance;\n          let match;\n          let constructor;\n          let identifier = ident && isString(ident) ? ident : null;\n          later = later === true;\n\n          if (isString(expression)) {\n            match = expression.match(CNTRL_REG);\n            if (!match) {\n              throw $controllerMinErr(\n                \"ctrlfmt\",\n                \"Badly formed controller string '{0}'. Must match `__name__ as __id__` or `__name__`.\",\n                expression,\n              );\n            }\n            constructor = match[1];\n            identifier = identifier || match[3];\n            expression = this.controllers.get(constructor);\n\n            if (!expression) {\n              throw $controllerMinErr(\n                \"ctrlreg\",\n                \"The controller with the name '{0}' is not registered.\",\n                constructor,\n              );\n            }\n\n            assertArgFn(expression, constructor, true);\n          }\n\n          if (later) {\n            const controllerPrototype = (\n              Array.isArray(expression)\n                ? expression[expression.length - 1]\n                : expression\n            ).prototype;\n            instance = Object.create(controllerPrototype || null);\n\n            if (identifier) {\n              instance[\"$controllerIdentifier\"] = identifier;\n              this.addIdentifier(\n                locals,\n                identifier,\n                instance,\n                constructor || expression.name,\n              );\n            }\n\n            return function () {\n              const result = $injector.invoke(\n                expression,\n                instance,\n                locals,\n                constructor,\n              );\n\n              if (\n                result !== instance &&\n                (isObject(result) || isFunction(result))\n              ) {\n                instance = result;\n                if (identifier) {\n                  instance[\"$controllerIdentifier\"] = identifier;\n                  this.addIdentifier(\n                    locals,\n                    identifier,\n                    instance,\n                    constructor || expression.name,\n                  );\n                }\n              }\n\n              return instance;\n            }.bind(this, { instance, identifier });\n          }\n\n          instance = $injector.instantiate(expression, locals, constructor);\n\n          if (identifier) {\n            this.addIdentifier(\n              locals,\n              identifier,\n              instance,\n              constructor || expression.name,\n            );\n          }\n\n          return instance;\n        };\n      },\n    ];\n\n    /**\n     * Adds an identifier to the controller instance in the given locals' scope.\n     *\n     * @param {Object} locals The locals object containing the scope.\n     * @param {string} identifier The identifier to assign.\n     * @param {Object} instance The controller instance.\n     * @param {string} name The name of the controller.\n     */\n    addIdentifier(locals, identifier, instance, name) {\n      if (!(locals && isObject(locals.$scope))) {\n        throw minErr(\"$controller\")(\n          \"noscp\",\n          \"Cannot export controller '{0}' as '{1}'! No $scope object provided via `locals`.\",\n          name,\n          identifier,\n        );\n      }\n      locals.$scope[identifier] = instance;\n    }\n  }\n\n  const originUrl = urlResolve(window.location.href);\n\n  /**\n   * @param {import(\"./interface.js\").ResolvableUrl} url\n   * @return {import(\"./interface.js\").ParsedUrl}\n   */\n  function urlResolve(url) {\n    if (!isString(url))\n      return /** @type {import(\"./interface.js\").ParsedUrl} */ (url);\n\n    const urlParsingNode = new URL(\n      /** @type {string} */ (url),\n      window.location.href,\n    );\n\n    const hostname = urlParsingNode.hostname.includes(\":\")\n      ? `[${urlParsingNode.hostname}]`\n      : urlParsingNode.hostname;\n\n    return {\n      href: urlParsingNode.href,\n      protocol: urlParsingNode.protocol,\n      host: urlParsingNode.host,\n      search: urlParsingNode.search\n        ? urlParsingNode.search.replace(/^\\?/, \"\")\n        : \"\",\n      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \"\") : \"\",\n      hostname,\n      port: urlParsingNode.port,\n      pathname:\n        urlParsingNode.pathname.charAt(0) === \"/\"\n          ? urlParsingNode.pathname\n          : `/${urlParsingNode.pathname}`,\n    };\n  }\n\n  /**\n   * Parse a request URL and determine whether this is a same-origin request as the application\n   * document.\n   *\n   * @param {import(\"./interface.js\").ResolvableUrl} requestUrl The url of the request as a string that will be resolved\n   * or a parsed URL object.\n   * @returns {boolean} Whether the request is for the same origin as the application document.\n   */\n  function urlIsSameOrigin(requestUrl) {\n    return urlsAreSameOrigin(requestUrl, originUrl);\n  }\n\n  /**\n   * Parse a request URL and determine whether it is same-origin as the current document base URL.\n   *\n   * Note: The base URL is usually the same as the document location (`location.href`) but can\n   * be overriden by using the `<base>` tag.\n   *\n   * @param {import(\"./interface.js\").ResolvableUrl} requestUrl The url of the request as a string that will be resolved\n   * or a parsed URL object.\n   * @returns {boolean} Whether the URL is same-origin as the document base URL.\n   */\n  function urlIsSameOriginAsBaseUrl(requestUrl) {\n    return urlsAreSameOrigin(requestUrl, document.baseURI);\n  }\n\n  /**\n   * Create a function that can check a URL's origin against a list of allowed/trusted origins.\n   * The current location's origin is implicitly trusted.\n   *\n   * @param {string[]} trustedOriginUrls - A list of URLs (strings), whose origins are trusted.\n   *\n   * @returns {(url: import(\"./interface.js\").ResolvableUrl) => boolean } - A function that receives a URL (string or parsed URL object) and returns\n   *     whether it is of an allowed origin.\n   */\n  function urlIsAllowedOriginFactory(trustedOriginUrls) {\n    const parsedAllowedOriginUrls = [originUrl].concat(\n      trustedOriginUrls.map(urlResolve),\n    );\n\n    /**\n     * Check whether the specified URL (string or parsed URL object) has an origin that is allowed\n     * based on a list of trusted-origin URLs. The current location's origin is implicitly\n     * trusted.\n     *\n     * @param {import(\"./interface.js\").ResolvableUrl} requestUrl - The URL to be checked (provided as a string that will be\n     *     resolved or a parsed URL object).\n     *\n     * @returns {boolean} - Whether the specified URL is of an allowed origin.\n     */\n    return function urlIsAllowedOrigin(requestUrl) {\n      const parsedUrl = urlResolve(requestUrl);\n      return parsedAllowedOriginUrls.some(\n        urlsAreSameOrigin.bind(null, parsedUrl),\n      );\n    };\n  }\n\n  /**\n   * Determine if two URLs share the same origin.\n   *\n   * @param {import(\"./interface.js\").ResolvableUrl} url1 - First URL to compare as a string or a normalized URL in the form of\n   *     a dictionary object returned by `urlResolve()`.\n   * @param {import(\"./interface.js\").ResolvableUrl} url2 - Second URL to compare as a string or a normalized URL in the form\n   *     of a dictionary object returned by `urlResolve()`.\n   *\n   * @returns {boolean} - True if both URLs have the same origin, and false otherwise.\n   */\n  function urlsAreSameOrigin(url1, url2) {\n    url1 = urlResolve(url1);\n    url2 = urlResolve(url2);\n\n    return url1.protocol === url2.protocol && url1.host === url2.host;\n  }\n\n  /**\n   * Removes a trailing hash ('#') from the given URL if it exists.\n   *\n   * @param {string} url\n   * @returns {string}\n   */\n  function trimEmptyHash(url) {\n    return url.replace(/#$/, \"\");\n  }\n\n  /** @typedef {import(\"../exception/interface.ts\").Interface }  ErrorHandler */\n\n  const $sceMinErr = minErr(\"$sce\");\n\n  const SCE_CONTEXTS = {\n    // HTML is used when there's HTML rendered (e.g. ng-bind-html, iframe srcdoc binding).\n    HTML: \"html\",\n\n    // Style statements or stylesheets. Currently unused in AngularTS.\n    CSS: \"css\",\n\n    // An URL used in a context where it refers to the source of media, which are not expected to be run\n    // as scripts, such as an image, audio, video, etc.\n    MEDIA_URL: \"mediaUrl\",\n\n    // An URL used in a context where it does not refer to a resource that loads code.\n    // A value that can be trusted as a URL can also trusted as a MEDIA_URL.\n    URL: \"url\",\n\n    // RESOURCE_URL is a subtype of URL used where the referred-to resource could be interpreted as\n    // code. (e.g. ng-include, script src binding, templateUrl)\n    // A value that can be trusted as a RESOURCE_URL, can also trusted as a URL and a MEDIA_URL.\n    RESOURCE_URL: \"resourceUrl\",\n\n    // Script. Currently unused in AngularTS.\n    JS: \"js\",\n  };\n\n  // Copied from:\n  // http://docs.closure-library.googlecode.com/git/local_closure_goog_string_string.js.source.html#line1021\n  // Prereq: s is a string.\n  function escapeForRegexp(s) {\n    return s.replace(/([-()[\\]{}+?*.$^|,:#<!\\\\])/g, \"\\\\$1\");\n  }\n\n  function adjustMatcher(matcher) {\n    if (matcher === \"self\") {\n      return matcher;\n    }\n    if (isString(matcher)) {\n      // Strings match exactly except for 2 wildcards - '*' and '**'.\n      // '*' matches any character except those from the set ':/.?&'.\n      // '**' matches any character (like .* in a RegExp).\n      // More than 2 *'s raises an error as it's ill defined.\n      if (matcher.indexOf(\"***\") > -1) {\n        throw $sceMinErr(\n          \"iwcard\",\n          \"Illegal sequence *** in string matcher.  String: {0}\",\n          matcher,\n        );\n      }\n      matcher = escapeForRegexp(matcher)\n        .replace(/\\\\\\*\\\\\\*/g, \".*\")\n        .replace(/\\\\\\*/g, \"[^:/.?&;]*\");\n      return new RegExp(`^${matcher}$`);\n    }\n\n    if (isRegExp(matcher)) {\n      // The only other type of matcher allowed is a Regexp.\n      // Match entire URL / disallow partial matches.\n      // Flags are reset (i.e. no global, ignoreCase or multiline)\n      return new RegExp(`^${matcher.source}$`);\n    }\n    throw $sceMinErr(\n      \"imatcher\",\n      'Matchers may only be \"self\", string patterns or RegExp objects',\n    );\n  }\n\n  /**\n   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\n   * Contextual Escaping (SCE)} services to AngularTS.\n   *\n   * For an overview of this service and the functionnality it provides in AngularTS, see the main\n   * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how\n   * SCE works in their application, which shouldn't be needed in most cases.\n   *\n   * <div class=\"alert alert-danger\">\n   * AngularTS strongly relies on contextual escaping for the security of bindings: disabling or\n   * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,\n   * changes to this service will also influence users, so be extra careful and document your changes.\n   * </div>\n   *\n   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\n   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularTS.  This is\n   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to\n   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\n   * work because `$sce` delegates to `$sceDelegate` for these operations.\n   *\n   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n   *\n   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you\n   * can override it completely to change the behavior of `$sce`, the common case would\n   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\n   * your own trusted and banned resource lists for trusting URLs used for loading AngularTS resources\n   * such as templates.  Refer {@link ng.$sceDelegateProvider#trustedResourceUrlList\n   * $sceDelegateProvider.trustedResourceUrlList} and {@link\n   * ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList}\n   */\n\n  /**\n   *\n   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n   * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.\n   *\n   * The `$sceDelegateProvider` allows one to get/set the `trustedResourceUrlList` and\n   * `bannedResourceUrlList` used to ensure that the URLs used for sourcing AngularTS templates and\n   * other script-running URLs are safe (all places that use the `$sce.RESOURCE_URL` context). See\n   * {@link ng.$sceDelegateProvider#trustedResourceUrlList\n   * $sceDelegateProvider.trustedResourceUrlList} and\n   * {@link ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList},\n   *\n   * For the general details about this service in AngularTS, read the main page for {@link ng.$sce\n   * Strict Contextual Escaping (SCE)}.\n   *\n   * **Example**:  Consider the following case. <a name=\"example\"></a>\n   *\n   * - your app is hosted at url `http://myapp.example.com/`\n   * - but some of your templates are hosted on other domains you control such as\n   *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.\n   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n   *\n   * Here is what a secure configuration for this scenario might look like:\n   *\n   * ```\n   *  angular.module('myApp', []).config(function($sceDelegateProvider) {\n   *    $sceDelegateProvider.trustedResourceUrlList([\n   *      // Allow same origin resource loads.\n   *      'self',\n   *      // Allow loading from our assets domain.  Notice the difference between * and **.\n   *      'http://srv*.assets.example.com/**'\n   *    ]);\n   *\n   *    // The banned resource URL list overrides the trusted resource URL list so the open redirect\n   *    // here is blocked.\n   *    $sceDelegateProvider.bannedResourceUrlList([\n   *      'http://myapp.example.com/clickThru**'\n   *    ]);\n   *  });\n   * ```\n   * Note that an empty trusted resource URL list will block every resource URL from being loaded, and will require\n   * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates\n   * requested by {@link ng.$templateRequest $templateRequest} that are present in\n   * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism\n   * to populate your templates in that cache at config time, then it is a good idea to remove 'self'\n   * from the trusted resource URL lsit. This helps to mitigate the security impact of certain types\n   * of issues, like for instance attacker-controlled `ng-includes`.\n   */\n\n  /**\n   * `$sceDelegate` is a service that is used by the `$sce` service to provide {@link ng.$sce Strict\n   * Contextual Escaping (SCE)} services to AngularTS.\n   *\n   * For an overview of this service and the functionnality it provides in AngularTS, see the main\n   * page for {@link ng.$sce SCE}. The current page is targeted for developers who need to alter how\n   * SCE works in their application, which shouldn't be needed in most cases.\n   *\n   * <div class=\"alert alert-danger\">\n   * AngularTS strongly relies on contextual escaping for the security of bindings: disabling or\n   * modifying this might cause cross site scripting (XSS) vulnerabilities. For libraries owners,\n   * changes to this service will also influence users, so be extra careful and document your changes.\n   * </div>\n   *\n   * Typically, you would configure or override the {@link ng.$sceDelegate $sceDelegate} instead of\n   * the `$sce` service to customize the way Strict Contextual Escaping works in AngularTS.  This is\n   * because, while the `$sce` provides numerous shorthand methods, etc., you really only need to\n   * override 3 core functions (`trustAs`, `getTrusted` and `valueOf`) to replace the way things\n   * work because `$sce` delegates to `$sceDelegate` for these operations.\n   *\n   * Refer {@link ng.$sceDelegateProvider $sceDelegateProvider} to configure this service.\n   *\n   * The default instance of `$sceDelegate` should work out of the box with little pain.  While you\n   * can override it completely to change the behavior of `$sce`, the common case would\n   * involve configuring the {@link ng.$sceDelegateProvider $sceDelegateProvider} instead by setting\n   * your own trusted and banned resource lists for trusting URLs used for loading AngularTS resources\n   * such as templates.  Refer {@link ng.$sceDelegateProvider#trustedResourceUrlList\n   * $sceDelegateProvider.trustedResourceUrlList} and {@link\n   * ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList}\n   */\n  /**\n   *\n   * The `$sceDelegateProvider` provider allows developers to configure the {@link ng.$sceDelegate\n   * $sceDelegate service}, used as a delegate for {@link ng.$sce Strict Contextual Escaping (SCE)}.\n   *\n   * The `$sceDelegateProvider` allows one to get/set the `trustedResourceUrlList` and\n   * `bannedResourceUrlList` used to ensure that the URLs used for sourcing AngularTS templates and\n   * other script-running URLs are safe (all places that use the `$sce.RESOURCE_URL` context). See\n   * {@link ng.$sceDelegateProvider#trustedResourceUrlList\n   * $sceDelegateProvider.trustedResourceUrlList} and\n   * {@link ng.$sceDelegateProvider#bannedResourceUrlList $sceDelegateProvider.bannedResourceUrlList},\n   *\n   * For the general details about this service in AngularTS, read the main page for {@link ng.$sce\n   * Strict Contextual Escaping (SCE)}.\n   *\n   * **Example**:  Consider the following case. <a name=\"example\"></a>\n   *\n   * - your app is hosted at url `http://myapp.example.com/`\n   * - but some of your templates are hosted on other domains you control such as\n   *   `http://srv01.assets.example.com/`, `http://srv02.assets.example.com/`, etc.\n   * - and you have an open redirect at `http://myapp.example.com/clickThru?...`.\n   *\n   * Here is what a secure configuration for this scenario might look like:\n   *\n   * ```\n   *  angular.module('myApp', []).config(function($sceDelegateProvider) {\n   *    $sceDelegateProvider.trustedResourceUrlList([\n   *      // Allow same origin resource loads.\n   *      'self',\n   *      // Allow loading from our assets domain.  Notice the difference between * and **.\n   *      'http://srv*.assets.example.com/**'\n   *    ]);\n   *\n   *    // The banned resource URL list overrides the trusted resource URL list so the open redirect\n   *    // here is blocked.\n   *    $sceDelegateProvider.bannedResourceUrlList([\n   *      'http://myapp.example.com/clickThru**'\n   *    ]);\n   *  });\n   * ```\n   * Note that an empty trusted resource URL list will block every resource URL from being loaded, and will require\n   * you to manually mark each one as trusted with `$sce.trustAsResourceUrl`. However, templates\n   * requested by {@link ng.$templateRequest $templateRequest} that are present in\n   * {@link ng.$templateCache $templateCache} will not go through this check. If you have a mechanism\n   * to populate your templates in that cache at config time, then it is a good idea to remove 'self'\n   * from the trusted resource URL lsit. This helps to mitigate the security impact of certain types\n   * of issues, like for instance attacker-controlled `ng-includes`.\n   */\n  class SceDelegateProvider {\n    constructor() {\n      // Resource URLs can also be trusted by policy.\n      let trustedResourceUrlList = [\"self\"];\n      let bannedResourceUrlList = [];\n\n      /**\n       *\n       * @param {Array=} trustedResourceUrlList When provided, replaces the trustedResourceUrlList with\n       *     the value provided.  This must be an array or null.  A snapshot of this array is used so\n       *     further changes to the array are ignored.\n       *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n       *     allowed in this array.\n       *\n       * @return {Array} The currently set trusted resource URL array.\n       *\n       * @description\n       * Sets/Gets the list trusted of resource URLs.\n       *\n       * The **default value** when no `trustedResourceUrlList` has been explicitly set is `['self']`\n       * allowing only same origin resource requests.\n       *\n       * <div class=\"alert alert-warning\">\n       * **Note:** the default `trustedResourceUrlList` of 'self' is not recommended if your app shares\n       * its origin with other apps! It is a good idea to limit it to only your application's directory.\n       * </div>\n       */\n      this.trustedResourceUrlList = function (value) {\n        if (arguments.length) {\n          trustedResourceUrlList = value.map((v) => adjustMatcher(v));\n        }\n        return trustedResourceUrlList;\n      };\n\n      /**\n       *\n       * @param {Array=} bannedResourceUrlList When provided, replaces the `bannedResourceUrlList` with\n       *     the value provided. This must be an array or null. A snapshot of this array is used so\n       *     further changes to the array are ignored.</p><p>\n       *     Follow {@link ng.$sce#resourceUrlPatternItem this link} for a description of the items\n       *     allowed in this array.</p><p>\n       *     The typical usage for the `bannedResourceUrlList` is to **block\n       *     [open redirects](http://cwe.mitre.org/data/definitions/601.html)** served by your domain as\n       *     these would otherwise be trusted but actually return content from the redirected domain.\n       *     </p><p>\n       *     Finally, **the banned resource URL list overrides the trusted resource URL list** and has\n       *     the final say.\n       *\n       * @return {Array} The currently set `bannedResourceUrlList` array.\n       *\n       * @description\n       * Sets/Gets the `bannedResourceUrlList` of trusted resource URLs.\n       *\n       * The **default value** when no trusted resource URL list has been explicitly set is the empty\n       * array (i.e. there is no `bannedResourceUrlList`.)\n       */\n      this.bannedResourceUrlList = function (value) {\n        if (arguments.length) {\n          bannedResourceUrlList = value.map((v) => adjustMatcher(v));\n        }\n        return bannedResourceUrlList;\n      };\n\n      this.$get = [\n        \"$injector\",\n        \"$$sanitizeUri\",\n        \"$exceptionHandler\",\n        /**\n         *\n         * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n         * @param {*} $$sanitizeUri\n         * @param {ErrorHandler} $exceptionHandler\n         * @returns\n         */\n        function ($injector, $$sanitizeUri, $exceptionHandler) {\n          let htmlSanitizer = function () {\n            $exceptionHandler(\n              $sceMinErr(\n                \"unsafe\",\n                \"Attempting to use an unsafe value in a safe context.\",\n              ),\n            );\n          };\n\n          if ($injector.has(\"$sanitize\")) {\n            htmlSanitizer = $injector.get(\"$sanitize\");\n          }\n\n          /**\n           * @param {string|RegExp} matcher\n           * @param {import(\"../../shared/url-utils/interface\").ParsedUrl} parsedUrl\n           * @return {boolean}\n           */\n          function matchUrl(matcher, parsedUrl) {\n            if (matcher === \"self\") {\n              return (\n                urlIsSameOrigin(parsedUrl) || urlIsSameOriginAsBaseUrl(parsedUrl)\n              );\n            }\n            // definitely a regex.  See adjustMatchers()\n            return !!(/** @type {RegExp} */ (matcher).exec(parsedUrl.href));\n          }\n\n          function isResourceUrlAllowedByPolicy(url) {\n            const parsedUrl = urlResolve(url.toString());\n            let i;\n            let n;\n            let allowed = false;\n            // Ensure that at least one item from the trusted resource URL list allows this url.\n            for (i = 0, n = trustedResourceUrlList.length; i < n; i++) {\n              if (matchUrl(trustedResourceUrlList[i], parsedUrl)) {\n                allowed = true;\n                break;\n              }\n            }\n            if (allowed) {\n              // Ensure that no item from the banned resource URL list has blocked this url.\n              for (i = 0, n = bannedResourceUrlList.length; i < n; i++) {\n                if (matchUrl(bannedResourceUrlList[i], parsedUrl)) {\n                  allowed = false;\n                  break;\n                }\n              }\n            }\n            return allowed;\n          }\n\n          function generateHolderType(Base) {\n            const holderType = function TrustedValueHolderType(trustedValue) {\n              this.$$unwrapTrustedValue = function () {\n                return trustedValue;\n              };\n            };\n            if (Base) {\n              holderType.prototype = new Base();\n            }\n            holderType.prototype.valueOf = function sceValueOf() {\n              return this.$$unwrapTrustedValue();\n            };\n            holderType.prototype.toString = function sceToString() {\n              return this.$$unwrapTrustedValue().toString();\n            };\n            return holderType;\n          }\n\n          const trustedValueHolderBase = generateHolderType();\n          const byType = {};\n\n          byType[SCE_CONTEXTS.HTML] = generateHolderType(trustedValueHolderBase);\n          byType[SCE_CONTEXTS.CSS] = generateHolderType(trustedValueHolderBase);\n          byType[SCE_CONTEXTS.MEDIA_URL] = generateHolderType(\n            trustedValueHolderBase,\n          );\n          byType[SCE_CONTEXTS.URL] = generateHolderType(\n            byType[SCE_CONTEXTS.MEDIA_URL],\n          );\n          byType[SCE_CONTEXTS.JS] = generateHolderType(trustedValueHolderBase);\n          byType[SCE_CONTEXTS.RESOURCE_URL] = generateHolderType(\n            byType[SCE_CONTEXTS.URL],\n          );\n\n          /**\n           * Returns a trusted representation of the parameter for the specified context. This trusted\n           * object will later on be used as-is, without any security check, by bindings or directives\n           * that require this security context.\n           * For instance, marking a string as trusted for the `$sce.HTML` context will entirely bypass\n           * the potential `$sanitize` call in corresponding `$sce.HTML` bindings or directives, such as\n           * `ng-bind-html`. Note that in most cases you won't need to call this function: if you have the\n           * sanitizer loaded, passing the value itself will render all the HTML that does not pose a\n           * security risk.\n           *\n           * See {@link ng.$sceDelegate#getTrusted getTrusted} for the function that will consume those\n           * trusted values, and {@link ng.$sce $sce} for general documentation about strict contextual\n           * escaping.\n           *\n           * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,\n           *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.\n           *\n           * @param {*} trustedValue The value that should be considered trusted.\n           * @return {*} A trusted representation of value, that can be used in the given context.\n           */\n          function trustAs(type, trustedValue) {\n            const Constructor = hasOwn(byType, type) ? byType[type] : null;\n            if (!Constructor) {\n              $exceptionHandler(\n                $sceMinErr(\n                  \"icontext\",\n                  \"Attempted to trust a value in invalid context. Context: {0}; Value: {1}\",\n                  type,\n                  trustedValue,\n                ),\n              );\n              return;\n            }\n            if (\n              trustedValue === null ||\n              isUndefined(trustedValue) ||\n              trustedValue === \"\"\n            ) {\n              return trustedValue;\n            }\n            // All the current contexts in SCE_CONTEXTS happen to be strings.  In order to avoid trusting\n            // mutable objects, we ensure here that the value passed in is actually a string.\n            if (typeof trustedValue !== \"string\") {\n              $exceptionHandler(\n                $sceMinErr(\n                  \"itype\",\n                  \"Attempted to trust a non-string value in a content requiring a string: Context: {0}\",\n                  type,\n                ),\n              );\n              return;\n            }\n            return new Constructor(trustedValue);\n          }\n\n          /**\n           * If the passed parameter had been returned by a prior call to {@link ng.$sceDelegate#trustAs\n           * `$sceDelegate.trustAs`}, returns the value that had been passed to {@link\n           * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}.\n           *\n           * If the passed parameter is not a value that had been returned by {@link\n           * ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}, it must be returned as-is.\n           *\n           * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}\n           *     call or anything else.\n           * @return {*} The `value` that was originally provided to {@link ng.$sceDelegate#trustAs\n           *     `$sceDelegate.trustAs`} if `value` is the result of such a call.  Otherwise, returns\n           *     `value` unchanged.\n           */\n          function valueOf(maybeTrusted) {\n            if (maybeTrusted instanceof trustedValueHolderBase) {\n              return maybeTrusted.$$unwrapTrustedValue();\n            }\n            return maybeTrusted;\n          }\n\n          /**\n           * @description\n           * Given an object and a security context in which to assign it, returns a value that's safe to\n           * use in this context, which was represented by the parameter. To do so, this function either\n           * unwraps the safe type it has been given (for instance, a {@link ng.$sceDelegate#trustAs\n           * `$sceDelegate.trustAs`} result), or it might try to sanitize the value given, depending on\n           * the context and sanitizer availablility.\n           *\n           * The contexts that can be sanitized are $sce.MEDIA_URL, $sce.URL and $sce.HTML. The first two are available\n           * by default, and the third one relies on the `$sanitize` service (which may be loaded through\n           * the `ngSanitize` module). Furthermore, for $sce.RESOURCE_URL context, a plain string may be\n           * accepted if the resource url policy defined by {@link ng.$sceDelegateProvider#trustedResourceUrlList\n           * `$sceDelegateProvider.trustedResourceUrlList`} and {@link ng.$sceDelegateProvider#bannedResourceUrlList\n           * `$sceDelegateProvider.bannedResourceUrlList`} accepts that resource.\n           *\n           * This function will throw if the safe type isn't appropriate for this context, or if the\n           * value given cannot be accepted in the context (which might be caused by sanitization not\n           * being available, or the value not being recognized as safe).\n           *\n           * <div class=\"alert alert-danger\">\n           * Disabling auto-escaping is extremely dangerous, it usually creates a Cross Site Scripting\n           * (XSS) vulnerability in your application.\n           * </div>\n           *\n           * @param {string} type The context in which this value is to be used (such as `$sce.HTML`).\n           * @param {*} maybeTrusted The result of a prior {@link ng.$sceDelegate#trustAs\n           *     `$sceDelegate.trustAs`} call, or anything else (which will not be considered trusted.)\n           * @return {*} A version of the value that's safe to use in the given context, or throws an\n           *     exception if this is impossible.\n           */\n          function getTrusted(type, maybeTrusted) {\n            if (\n              maybeTrusted === null ||\n              isUndefined(maybeTrusted) ||\n              maybeTrusted === \"\"\n            ) {\n              return maybeTrusted;\n            }\n            const constructor = hasOwn(byType, type) ? byType[type] : null;\n            // If maybeTrusted is a trusted class instance or subclass instance, then unwrap and return\n            // as-is.\n            if (constructor && maybeTrusted instanceof constructor) {\n              return maybeTrusted.$$unwrapTrustedValue();\n            }\n\n            // If maybeTrusted is a trusted class instance but not of the correct trusted type\n            // then unwrap it and allow it to pass through to the rest of the checks\n            if (isFunction(maybeTrusted.$$unwrapTrustedValue)) {\n              maybeTrusted = maybeTrusted.$$unwrapTrustedValue();\n            }\n\n            // If we get here, then we will either sanitize the value or throw an exception.\n            if (type === SCE_CONTEXTS.MEDIA_URL || type === SCE_CONTEXTS.URL) {\n              // we attempt to sanitize non-resource URLs\n              return $$sanitizeUri(\n                maybeTrusted.toString(),\n                type === SCE_CONTEXTS.MEDIA_URL,\n              );\n            }\n            if (type === SCE_CONTEXTS.RESOURCE_URL) {\n              if (isResourceUrlAllowedByPolicy(maybeTrusted)) {\n                return maybeTrusted;\n              }\n              $exceptionHandler(\n                $sceMinErr(\n                  \"insecurl\",\n                  \"Blocked loading resource from url not allowed by $sceDelegate policy.  URL: {0}\",\n                  maybeTrusted.toString(),\n                ),\n              );\n              return;\n            } else if (type === SCE_CONTEXTS.HTML) {\n              // htmlSanitizer throws its own error when no sanitizer is available.\n              return htmlSanitizer();\n            }\n            // Default error when the $sce service has no way to make the input safe.\n            $exceptionHandler(\n              $sceMinErr(\n                \"unsafe\",\n                \"Attempting to use an unsafe value in a safe context.\",\n              ),\n            );\n          }\n\n          return { trustAs, getTrusted, valueOf };\n        },\n      ];\n    }\n  }\n\n  function SceProvider() {\n    let enabled = true;\n\n    /**\n     * @param {boolean=} value If provided, then enables/disables SCE application-wide.\n     * @return {boolean} True if SCE is enabled, false otherwise.\n     *\n     * @description\n     * Enables/disables SCE and returns the current value.\n     */\n    this.enabled = function (value) {\n      if (arguments.length) {\n        enabled = !!value;\n      }\n      return enabled;\n    };\n\n    this.$get = [\n      \"$parse\",\n      \"$sceDelegate\",\n      function ($parse, $sceDelegate) {\n        const sce = shallowCopy(SCE_CONTEXTS);\n\n        /**\n         * @return {Boolean} True if SCE is enabled, false otherwise.  If you want to set the value, you\n         *     have to do it at module config time on {@link ng.$sceProvider $sceProvider}.\n         *\n         * @description\n         * Returns a boolean indicating if SCE is enabled.\n         */\n        sce.isEnabled = function () {\n          return enabled;\n        };\n        sce.trustAs = $sceDelegate.trustAs;\n        sce.getTrusted = $sceDelegate.getTrusted;\n        sce.valueOf = $sceDelegate.valueOf;\n\n        if (!enabled) {\n          sce.trustAs = sce.getTrusted = function (type, value) {\n            return value;\n          };\n          sce.valueOf = function ($) {\n            return $;\n          };\n        }\n\n        /**\n         * Converts AngularTS {@link guide/expression expression} into a function.  This is like {@link\n         * ng.$parse $parse} and is identical when the expression is a literal constant.  Otherwise, it\n         * wraps the expression in a call to {@link ng.$sce#getTrusted $sce.getTrusted(*type*,\n         * *result*)}\n         *\n         * @param {string} type The SCE context in which this result will be used.\n         * @param {string} expr String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n        sce.parseAs = function sceParseAs(type, expr) {\n          const parsed = $parse(expr);\n          if (parsed.literal && parsed.constant) {\n            return parsed;\n          }\n          return $parse(expr, (value) => sce.getTrusted(type, value));\n        };\n\n        /**\n         * Delegates to {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs`}. As such, returns a\n         * wrapped object that represents your value, and the trust you have in its safety for the given\n         * context. AngularTS can then use that value as-is in bindings of the specified secure context.\n         * This is used in bindings for `ng-bind-html`, `ng-include`, and most `src` attribute\n         * interpolations. See {@link ng.$sce $sce} for strict contextual escaping.\n         *\n         * @param {string} type The context in which this value is safe for use, e.g. `$sce.URL`,\n         *     `$sce.RESOURCE_URL`, `$sce.HTML`, `$sce.JS` or `$sce.CSS`.\n         *\n         * @param {*} value The value that that should be considered trusted.\n         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n         *     in the context you specified.\n         */\n\n        /**\n         * Shorthand method.  `$sce.trustAsHtml(value)` →\n         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.HTML, value)`}\n         *\n         * @param {*} value The value to mark as trusted for `$sce.HTML` context.\n         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n         *     in `$sce.HTML` context (like `ng-bind-html`).\n         */\n\n        /**\n         * Shorthand method.  `$sce.trustAsCss(value)` →\n         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.CSS, value)`}\n         *\n         * @param {*} value The value to mark as trusted for `$sce.CSS` context.\n         * @return {*} A wrapped version of value that can be used as a trusted variant\n         *     of your `value` in `$sce.CSS` context. This context is currently unused, so there are\n         *     almost no reasons to use this function so far.\n         */\n\n        /**\n         * Shorthand method.  `$sce.trustAsUrl(value)` →\n         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.URL, value)`}\n         *\n         * @param {*} value The value to mark as trusted for `$sce.URL` context.\n         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n         *     in `$sce.URL` context. That context is currently unused, so there are almost no reasons\n         *     to use this function so far.\n         */\n\n        /**\n         * Shorthand method.  `$sce.trustAsResourceUrl(value)` →\n         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.RESOURCE_URL, value)`}\n         *\n         * @param {*} value The value to mark as trusted for `$sce.RESOURCE_URL` context.\n         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n         *     in `$sce.RESOURCE_URL` context (template URLs in `ng-include`, most `src` attribute\n         *     bindings, ...)\n         */\n\n        /**\n         * Shorthand method.  `$sce.trustAsJs(value)` →\n         *     {@link ng.$sceDelegate#trustAs `$sceDelegate.trustAs($sce.JS, value)`}\n         *\n         * @param {*} value The value to mark as trusted for `$sce.JS` context.\n         * @return {*} A wrapped version of value that can be used as a trusted variant of your `value`\n         *     in `$sce.JS` context. That context is currently unused, so there are almost no reasons to\n         *     use this function so far.\n         */\n\n        /**\n         * Delegates to {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted`}.  As such,\n         * takes any input, and either returns a value that's safe to use in the specified context,\n         * or throws an exception. This function is aware of trusted values created by the `trustAs`\n         * function and its shorthands, and when contexts are appropriate, returns the unwrapped value\n         * as-is. Finally, this function can also throw when there is no way to turn `maybeTrusted` in a\n         * safe value (e.g., no sanitization is available or possible.)\n         *\n         * @param {string} type The context in which this value is to be used.\n         * @param {*} maybeTrusted The result of a prior {@link ng.$sce#trustAs\n         *     `$sce.trustAs`} call, or anything else (which will not be considered trusted.)\n         * @return {*} A version of the value that's safe to use in the given context, or throws an\n         *     exception if this is impossible.\n         */\n\n        /**\n         * Shorthand method.  `$sce.getTrustedHtml(value)` →\n         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.HTML, value)`}\n         *\n         * @param {*} value The value to pass to `$sce.getTrusted`.\n         * @return {*} The return value of `$sce.getTrusted($sce.HTML, value)`\n         */\n\n        /**\n         * Shorthand method.  `$sce.getTrustedCss(value)` →\n         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.CSS, value)`}\n         *\n         * @param {*} value The value to pass to `$sce.getTrusted`.\n         * @return {*} The return value of `$sce.getTrusted($sce.CSS, value)`\n         */\n\n        /**\n         * Shorthand method.  `$sce.getTrustedUrl(value)` →\n         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.URL, value)`}\n         *\n         * @param {*} value The value to pass to `$sce.getTrusted`.\n         * @return {*} The return value of `$sce.getTrusted($sce.URL, value)`\n         */\n\n        /**\n         * Shorthand method.  `$sce.getTrustedResourceUrl(value)` →\n         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.RESOURCE_URL, value)`}\n         *\n         * @param {*} value The value to pass to `$sceDelegate.getTrusted`.\n         * @return {*} The return value of `$sce.getTrusted($sce.RESOURCE_URL, value)`\n         */\n\n        /**\n         * Shorthand method.  `$sce.getTrustedJs(value)` →\n         *     {@link ng.$sceDelegate#getTrusted `$sceDelegate.getTrusted($sce.JS, value)`}\n         *\n         * @param {*} value The value to pass to `$sce.getTrusted`.\n         * @return {*} The return value of `$sce.getTrusted($sce.JS, value)`\n         */\n\n        /**\n         * Shorthand method.  `$sce.parseAsHtml(expression string)` →\n         *     {@link ng.$sceparseAs `$sce.parseAs($sce.HTML, value)`}\n         *\n         * @param {string} expression String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n\n        /**\n         * Shorthand method.  `$sce.parseAsCss(value)` →\n         *     {@link ng.$sceparseAs `$sce.parseAs($sce.CSS, value)`}\n         *\n         * @param {string} expression String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n\n        /**\n         * Shorthand method.  `$sce.parseAsUrl(value)` →\n         *     {@link ng.$sceparseAs `$sce.parseAs($sce.URL, value)`}\n         *\n         * @param {string} expression String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n\n        /**\n         * Shorthand method.  `$sce.parseAsResourceUrl(value)` →\n         *     {@link ng.$sceparseAs `$sce.parseAs($sce.RESOURCE_URL, value)`}\n         *\n         * @param {string} expression String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n\n        /**\n         * Shorthand method.  `$sce.parseAsJs(value)` →\n         *     {@link ng.$sceparseAs `$sce.parseAs($sce.JS, value)`}\n         *\n         * @param {string} expression String expression to compile.\n         * @return {function(context, locals)} A function which represents the compiled expression:\n         *\n         *    * `context` – `{object}` – an object against which any expressions embedded in the\n         *      strings are evaluated against (typically a scope object).\n         *    * `locals` – `{object=}` – local variables context object, useful for overriding values\n         *      in `context`.\n         */\n\n        // Shorthand delegations.\n        const parse = sce.parseAs;\n        const { getTrusted } = sce;\n        const { trustAs } = sce;\n\n        Object.entries(SCE_CONTEXTS).forEach(([name, enumValue]) => {\n          const lName = lowercase(name);\n          sce[snakeToCamel(`parse_as_${lName}`)] = function (expr) {\n            return parse(enumValue, expr);\n          };\n          sce[snakeToCamel(`get_trusted_${lName}`)] = function (value) {\n            return getTrusted(enumValue, value);\n          };\n          sce[snakeToCamel(`trust_as_${lName}`)] = function (value) {\n            return trustAs(enumValue, value);\n          };\n        });\n\n        return sce;\n      },\n    ];\n  }\n\n  /*\n   * A collection of directives that allows creation of custom event handlers that are defined as\n   * AngularTS expressions and are compiled and executed within the current scope.\n   */\n\n  /**\n   * @type {Record<string, import(\"../../interface.js\").DirectiveFactory>}\n   */\n  const ngEventDirectives = {};\n\n  \"click copy cut dblclick focus blur keydown keyup load mousedown mouseenter mouseleave mousemove mouseout mouseover mouseup paste submit touchstart touchend touchmove\"\n    .split(\" \")\n    .forEach((eventName) => {\n      const directiveName = directiveNormalize(`ng-${eventName}`);\n      ngEventDirectives[directiveName] = [\n        \"$parse\",\n        \"$exceptionHandler\",\n        /**\n         * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n         * @param {import('../../services/exception/exception-handler.js').ErrorHandler} $exceptionHandler\n         * @returns\n         */\n        ($parse, $exceptionHandler) => {\n          return createEventDirective(\n            $parse,\n            $exceptionHandler,\n            directiveName,\n            eventName,\n          );\n        },\n      ];\n    });\n\n  /**\n   *\n   * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n   * @param {import('../../services/exception/exception-handler.js').ErrorHandler} $exceptionHandler\n   * @param {string} directiveName\n   * @param {string} eventName\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function createEventDirective(\n    $parse,\n    $exceptionHandler,\n    directiveName,\n    eventName,\n  ) {\n    return {\n      restrict: \"A\",\n      compile(_element, attr) {\n        const fn = $parse(attr[directiveName]);\n        return function ngEventHandler(scope, element) {\n          element.addEventListener(eventName, (event) => {\n            try {\n              fn(scope, { $event: event });\n            } catch (error) {\n              $exceptionHandler(error);\n            }\n          });\n        };\n      },\n    };\n  }\n\n  const $compileMinErr$1 = minErr(\"$compile\");\n  const SIMPLE_ATTR_NAME = /^\\w/;\n  const specialAttrHolder = document.createElement(\"div\");\n\n  /**\n   * @implements {Record<string, any>}\n   */\n  class Attributes {\n    static $nonscope = true;\n\n    /**\n     * @param {import('../scope/scope.js').Scope} $rootScope\n     * @param {*} $animate\n     * @param {import(\"../../services/exception/exception-handler.js\").ErrorHandler} $exceptionHandler\n     * @param {*} $sce\n     * @param {import(\"../../shared/noderef.js\").NodeRef} [nodeRef]\n     * @param {Object} [attributesToCopy]\n     */\n    constructor(\n      $rootScope,\n      $animate,\n      $exceptionHandler,\n      $sce,\n      nodeRef,\n      attributesToCopy,\n    ) {\n      this.$rootScope = $rootScope;\n      this.$animate = $animate;\n      this.$exceptionHandler = $exceptionHandler;\n      this.$sce = $sce;\n      if (attributesToCopy) {\n        const keys = Object.keys(attributesToCopy);\n        for (let i = 0, l = keys.length; i < l; i++) {\n          const key = keys[i];\n          this[key] = attributesToCopy[key];\n        }\n      } else {\n        this.$attr = {};\n      }\n\n      /** @type {import(\"../../shared/noderef.js\").NodeRef} */\n      this.$nodeRef = nodeRef;\n    }\n\n    /** @type {Node|Element} */\n    get $$element() {\n      return this.$nodeRef.node;\n    }\n\n    /**\n     * Converts an attribute name (e.g. dash/colon/underscore-delimited string, optionally prefixed with `x-` or\n     * `data-`) to its normalized, camelCase form.\n     *\n     * Also there is special case for Moz prefix starting with upper case letter.\n     *\n     * For further information check out the guide on {@link guide/directive#matching-directives Matching Directives}\n     *\n     * @param {string} name Name to normalize\n     */\n    $normalize = directiveNormalize;\n\n    /**\n     * Adds the CSS class value specified by the classVal parameter to the element. If animations\n     * are enabled then an animation will be triggered for the class addition.\n     *\n     * @param {string} classVal The className value that will be added to the element\n     */\n    $addClass(classVal) {\n      if (classVal && classVal.length > 0) {\n        if (hasAnimate(this.$$element)) {\n          this.$animate.addClass(this.$$element, classVal);\n        } else {\n          this.$nodeRef.element.classList.add(classVal);\n        }\n      }\n    }\n\n    /**\n     * Removes the CSS class value specified by the classVal parameter from the element. If\n     * animations are enabled then an animation will be triggered for the class removal.\n     *\n     * @param {string} classVal The className value that will be removed from the element\n     */\n    $removeClass(classVal) {\n      if (classVal && classVal.length > 0) {\n        if (hasAnimate(this.$$element)) {\n          this.$animate.removeClass(this.$$element, classVal);\n        } else {\n          this.$nodeRef.element.classList.remove(classVal);\n        }\n      }\n    }\n\n    /**\n     * Adds and removes the appropriate CSS class values to the element based on the difference\n     * between the new and old CSS class values (specified as newClasses and oldClasses).\n     *\n     * @param {string} newClasses The current CSS className value\n     * @param {string} oldClasses The former CSS className value\n     */\n    $updateClass(newClasses, oldClasses) {\n      const toAdd = tokenDifference(newClasses, oldClasses);\n      if (toAdd && toAdd.length) {\n        if (hasAnimate(this.$$element)) {\n          this.$animate.addClass(this.$$element, toAdd);\n        } else {\n          this.$nodeRef.element.classList.add(...toAdd.trim().split(/\\s+/));\n        }\n      }\n      const toRemove = tokenDifference(oldClasses, newClasses);\n      if (toRemove && toRemove.length) {\n        if (hasAnimate(this.$$element)) {\n          this.$animate.removeClass(this.$$element, toRemove);\n        } else {\n          this.$nodeRef.element.classList.remove(...toRemove.trim().split(/\\s+/));\n        }\n      }\n    }\n\n    /**\n     * Set a normalized attribute on the element in a way such that all directives\n     * can share the attribute. This function properly handles boolean attributes.\n     * @param {string} key Normalized key. (ie ngAttribute)\n     * @param {string|boolean} value The value to set. If `null` attribute will be deleted.\n     * @param {boolean=} writeAttr If false, does not write the value to DOM element attribute.\n     *     Defaults to true.\n     * @param {string=} attrName Optional none normalized name. Defaults to key.\n     */\n    $set(key, value, writeAttr, attrName) {\n      // TODO: decide whether or not to throw an error if \"class\"\n      // is set through this function since it may cause $updateClass to\n      // become unstable.\n\n      const node = this.$$element;\n      const booleanKey = getBooleanAttrName(/** @type {Element}   */ (node), key);\n      const aliasedKey = ALIASED_ATTR[key];\n      let observer = key;\n\n      if (booleanKey) {\n        this.$$element[key] = value;\n        attrName = booleanKey;\n      } else if (aliasedKey) {\n        this[aliasedKey] = value;\n        observer = aliasedKey;\n      }\n\n      this[key] = value;\n\n      // translate normalized key to actual key\n      if (attrName) {\n        this.$attr[key] = attrName;\n      } else {\n        attrName = this.$attr[key];\n        if (!attrName) {\n          this.$attr[key] = attrName = snakeCase(key, \"-\");\n        }\n      }\n\n      let nodeName = this.$nodeRef.node.nodeName.toLowerCase();\n\n      // Sanitize img[srcset] values.\n      if (nodeName === \"img\" && key === \"srcset\") {\n        this[key] = value = this.sanitizeSrcset(value, \"$set('srcset', value)\");\n      }\n\n      if (writeAttr !== false) {\n        let elem = isProxy(this.$$element)\n          ? this.$$element[\"$target\"]\n          : this.$$element;\n        if (value === null || isUndefined(value)) {\n          elem.removeAttribute(attrName);\n          //\n        } else if (SIMPLE_ATTR_NAME.test(attrName)) {\n          // jQuery skips special boolean attrs treatment in XML nodes for\n          // historical reasons and hence AngularTS cannot freely call\n          // `.getAttribute(attrName, false) with such attributes. To avoid issues\n          // in XHTML, call `removeAttr` in such cases instead.\n          // See https://github.com/jquery/jquery/issues/4249\n          if (booleanKey && value === false) {\n            elem.removeAttribute(attrName);\n          } else {\n            if (booleanKey) {\n              elem.toggleAttribute(attrName, value);\n            } else {\n              elem.setAttribute(attrName, value);\n            }\n          }\n        } else {\n          this.setSpecialAttr(this.$$element, attrName, value);\n        }\n      }\n\n      // fire observers\n      const { $$observers } = this;\n      if ($$observers && $$observers[observer]) {\n        $$observers[observer].forEach((fn) => {\n          try {\n            fn(value);\n          } catch (e) {\n            this.$exceptionHandler(e);\n          }\n        });\n      }\n    }\n\n    /**\n     * Observes an interpolated attribute.\n     * \n     * The observer function will be invoked once during the next `$digest` following\n     * compilation. The observer is then invoked whenever the interpolated value\n     * changes.\n     *\n     * @param {string} key Normalized key. (ie ngAttribute) .\n     * @param {any} fn Function that will be called whenever\n              the interpolated value of the attribute changes.\n    *        See the {@link guide/interpolation#how-text-and-attribute-bindings-work Interpolation\n    *        guide} for more info.\n    * @returns {function()} Returns a deregistration function for this observer.\n    */\n    $observe(key, fn) {\n      const $$observers =\n        this.$$observers || (this.$$observers = Object.create(null));\n      const listeners = $$observers[key] || ($$observers[key] = []);\n\n      listeners.push(fn);\n      if (!listeners.$$inter && hasOwn(this, key) && !isUndefined(this[key])) {\n        // no one registered attribute interpolation function, so lets call it manually\n        fn(this[key]);\n      }\n\n      return function () {\n        arrayRemove(listeners, fn);\n      };\n    }\n\n    setSpecialAttr(element, attrName, value) {\n      // Attributes names that do not start with letters (such as `(click)`) cannot be set using `setAttribute`\n      // so we have to jump through some hoops to get such an attribute\n      // https://github.com/angular/angular.js/pull/13318\n      specialAttrHolder.innerHTML = `<span ${attrName}>`;\n      const { attributes } = /** @type {Element} */ (\n        specialAttrHolder.firstChild\n      );\n      const attribute = attributes[0];\n      // We have to remove the attribute from its container element before we can add it to the destination element\n      attributes.removeNamedItem(attribute.name);\n      attribute.value = value;\n      element.attributes.setNamedItem(attribute);\n    }\n\n    sanitizeSrcset(value, invokeType) {\n      let i;\n      if (!value) {\n        return value;\n      }\n      if (!isString(value)) {\n        throw $compileMinErr$1(\n          \"srcset\",\n          'Can\\'t pass trusted values to `{0}`: \"{1}\"',\n          invokeType,\n          value.toString(),\n        );\n      }\n\n      // Such values are a bit too complex to handle automatically inside $sce.\n      // Instead, we sanitize each of the URIs individually, which works, even dynamically.\n\n      // It's not possible to work around this using `$sce.trustAsMediaUrl`.\n      // If you want to programmatically set explicitly trusted unsafe URLs, you should use\n      // `$sce.trustAsHtml` on the whole `img` tag and inject it into the DOM using the\n      // `ng-bind-html` directive.\n\n      let result = \"\";\n\n      // first check if there are spaces because it's not the same pattern\n      const trimmedSrcset = trim(value);\n      //                (   999x   ,|   999w   ,|   ,|,   )\n      const srcPattern = /(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/;\n      const pattern = /\\s/.test(trimmedSrcset) ? srcPattern : /(,)/;\n\n      // split srcset into tuple of uri and descriptor except for the last item\n      const rawUris = trimmedSrcset.split(pattern);\n\n      // for each tuples\n      const nbrUrisWith2parts = Math.floor(rawUris.length / 2);\n      for (i = 0; i < nbrUrisWith2parts; i++) {\n        const innerIdx = i * 2;\n        // sanitize the uri\n        result += this.$sce.getTrustedMediaUrl(trim(rawUris[innerIdx]));\n        // add the descriptor\n        result += \" \" + trim(rawUris[innerIdx + 1]);\n      }\n\n      // split the last item into uri and descriptor\n      const lastTuple = trim(rawUris[i * 2]).split(/\\s/);\n\n      // sanitize the last uri\n      result += this.$sce.getTrustedMediaUrl(trim(lastTuple[0]));\n\n      // and add the last descriptor if any\n      if (lastTuple.length === 2) {\n        result += \" \" + trim(lastTuple[1]);\n      }\n      return result;\n    }\n  }\n\n  /**\n   * Computes the difference between two space-separated token strings.\n   *\n   * @param {string} str1 - The first string containing space-separated tokens.\n   * @param {string} str2 - The second string containing space-separated tokens.\n   * @returns {string} A string containing tokens that are in str1 but not in str2, separated by spaces.\n   *\n   */\n  function tokenDifference(str1, str2) {\n    const tokens1 = new Set(str1.split(/\\s+/));\n    const tokens2 = new Set(str2.split(/\\s+/));\n\n    const difference = Array.from(tokens1).filter((token) => !tokens2.has(token));\n    return difference.join(\" \");\n  }\n\n  /**\n   * @param {string} source - the name of the attribute to be observed\n   * @param {string} prop - the scope property to be updated with attribute value\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngObserveDirective(source, prop) {\n    return {\n      restrict: \"A\",\n      compile: () => (scope, element) => {\n        const targetElement = element;\n        if (prop === \"\") {\n          prop = source;\n        }\n        const normalized = kebabToCamel(prop);\n        if (!scope[normalized]) {\n          scope[normalized] = targetElement.getAttribute(source);\n        }\n\n        const observer = new MutationObserver((mutations) => {\n          const mutation = mutations[0];\n          const newValue = /** @type {HTMLElement} */ (\n            mutation.target\n          ).getAttribute(source);\n          if (scope[normalized] !== newValue) {\n            scope[normalized] = newValue;\n          }\n        });\n\n        observer.observe(targetElement, {\n          attributes: true,\n          attributeFilter: [source],\n        });\n\n        scope.$on(\"$destroy\", () => {\n          observer.disconnect();\n        });\n      },\n    };\n  }\n\n  /**\n   * A function passed as the fifth argument to a {@type PublicLinkFn} link function.\n   * It behaves like a linking function, with the `scope` argument automatically created\n   * as a new child of the transcluded parent scope.\n   *\n   * The function returns the DOM content to be injected (transcluded) into the directive.\n   *\n   * @callback TranscludeFn\n   * @param {Element | Node | ChildNode | NodeList | Node[]} [clone] - The DOM node to be inserted into the transcluded directive.\n   * @param {import(\"../scope/scope.js\").Scope} [scope] - The new child scope created from the transcluded parent.\n   * @returns void\n\n  /**\n   * A specialized version of {@link TranscludeFn} with the scope argument already bound.\n   * This function requires no parameters and returns the same result as {@link TranscludeFn}.\n   *\n   * @typedef {() => Element|Node} BoundTranscludeFn\n   */\n\n  /**\n   * @typedef {Object} SimpleChange\n   * @property {any} currentValue\n   * @property {boolean} firstChange\n   */\n\n  /**\n   * @description A function returned by the '$compile' service that links a compiled template to a scope.\n   *\n   * @callback PublicLinkFn\n   * @param {import('../scope/scope.js').Scope} scope - Scope to link with element\n   * @param {TranscludeFn} [cloneConnectFn]\n   * @param {*} [options]\n   * @return {Element|Node|ChildNode|Node[]} The nodes to be linked.\n   */\n\n  /**\n   * @description Entry point for the '$compile' service.\n   *\n   * @callback CompileFn\n   * @param {string|Element|Node|ChildNode|NodeList} compileNode - The node to be compiled.\n   * @param {TranscludeFn} [transcludeFn] - An optional transclusion function to be used during compilation.\n   * @param {number} [maxPriority] - An optional maximum priority for directives.\n   * @param {string} [ignoreDirective] - An optional directive to ignore during compilation.\n   * @param {*} [previousCompileContext] - An optional context from a previous compilation. TODO\n   * @returns {PublicLinkFn} A public link function.\n   */\n\n  /**\n   * @typedef {Object} LinkFnMapping\n   * @property {number} index\n   * @property {NodeLinkFnCtx} [nodeLinkFnCtx]\n   * @property {CompositeLinkFn} [childLinkFn]\n   */\n\n  /**\n   * @typedef {function(): CompositeLinkFn} CompileNodesFn\n   */\n\n  /**\n   * @callback NodeLinkFn\n   * @returns {Node|Element|NodeList}\n   */\n\n  /**\n   * @typedef {Object} NodeLinkFnCtx\n   * @property {NodeLinkFn} nodeLinkFn\n   * @property {boolean} terminal\n   * @property {TranscludeFn} transclude\n   * @property {boolean} transcludeOnThisElement\n   * @property {boolean} templateOnThisElement\n   * @property {boolean} newScope\n   */\n\n  /**\n   * @typedef {function(): NodeLinkFn} ApplyDirectivesToNodeFn\n   */\n\n  /**\n   * @description Function that aggregates all linking fns for a compilation root (nodeList)\n   * @callback CompositeLinkFn\n   * @param {import('../scope/scope.js').Scope} scope - The scope to be linked to the template\n   * @param {NodeRef} $linkNode - wrapper around a nodeList\n   * @param {Function} [parentBoundTranscludeFn]\n   */\n\n  const $compileMinErr = minErr(\"$compile\");\n  const EXCLUDED_DIRECTIVES = [\"ngIf\", \"ngRepeat\"];\n  const ALL_OR_NOTHING_ATTRS = [\"ngSrc\", \"ngSrcset\", \"src\", \"srcset\"];\n  const REQUIRE_PREFIX_REGEXP = /^(?:(\\^\\^?)?(\\?)?(\\^\\^?)?)?/;\n  // Ref: http://developers.whatwg.org/webappapis.html#event-handler-idl-attributes\n  // The assumption is that future DOM event attribute names will begin with\n  // 'on' and be composed of only English letters.\n  const EVENT_HANDLER_ATTR_REGEXP = /^(on[a-z]+|formaction)$/;\n  const DirectiveSuffix = \"Directive\";\n\n  class CompileProvider {\n    /* @ignore */ static $inject = [\"$provide\", \"$$sanitizeUriProvider\"];\n\n    /**\n     * @param {import('../../interface.js').Provider} $provide\n     * @param {import('../sanitize/sanitize-uri.js').SanitizeUriProvider} $$sanitizeUriProvider\n     */\n    constructor($provide, $$sanitizeUriProvider) {\n      const hasDirectives = {};\n\n      const bindingCache = Object.create(null);\n\n      /**\n       *\n       * @param {import(\"../scope/scope.js\").Scope} scope\n       * @param {string} directiveName\n       * @param {boolean} isController\n       * @returns {Object} a configuration object for attribute bindings\n       */\n      function parseIsolateBindings(scope, directiveName, isController) {\n        const LOCAL_REGEXP = /^([@&]|[=<]())(\\??)\\s*([\\w$]*)$/;\n\n        const bindings = Object.create(null);\n\n        Object.entries(scope).forEach(([scopeName, definition]) => {\n          definition = definition.trim();\n\n          if (definition in bindingCache) {\n            bindings[scopeName] = bindingCache[definition];\n            return;\n          }\n          const match = definition.match(LOCAL_REGEXP);\n\n          if (!match) {\n            throw $compileMinErr(\n              \"iscp\",\n              \"Invalid {3} for directive '{0}'.\" +\n                \" Definition: {... {1}: '{2}' ...}\",\n              directiveName,\n              scopeName,\n              definition,\n              isController\n                ? \"controller bindings definition\"\n                : \"isolate scope definition\",\n            );\n          }\n\n          bindings[scopeName] = {\n            mode: match[1][0],\n            collection: match[2] === \"*\",\n            optional: match[3] === \"?\",\n            attrName: match[4] || scopeName,\n          };\n          if (match[4]) {\n            bindingCache[definition] = bindings[scopeName];\n          }\n        });\n\n        return bindings;\n      }\n\n      function parseDirectiveBindings(directive, directiveName) {\n        const bindings = {\n          isolateScope: null,\n          bindToController: null,\n        };\n        if (isObject(directive.scope)) {\n          if (directive.bindToController === true) {\n            bindings.bindToController = parseIsolateBindings(\n              directive.scope,\n              directiveName,\n              true,\n            );\n            bindings.isolateScope = {};\n          } else {\n            bindings.isolateScope = parseIsolateBindings(\n              directive.scope,\n              directiveName,\n              false,\n            );\n          }\n        }\n        if (isObject(directive.bindToController)) {\n          bindings.bindToController = parseIsolateBindings(\n            directive.bindToController,\n            directiveName,\n            true,\n          );\n        }\n        if (bindings.bindToController && !directive.controller) {\n          // There is no controller\n          throw $compileMinErr(\n            \"noctrl\",\n            \"Cannot bind to controller without directive '{0}'s controller.\",\n            directiveName,\n          );\n        }\n        return bindings;\n      }\n\n      function getDirectiveRequire(directive) {\n        const require =\n          directive.require || (directive.controller && directive.name);\n\n        if (!Array.isArray(require) && isObject(require)) {\n          Object.entries(require).forEach(([key, value]) => {\n            const match = value.match(REQUIRE_PREFIX_REGEXP);\n            const name = value.substring(match[0].length);\n            if (!name) {\n              require[key] = match[0] + key;\n            }\n          });\n        }\n\n        return require;\n      }\n\n      function getDirectiveRestrict(restrict, name) {\n        if (restrict && !(isString(restrict) && /[EA]/.test(restrict))) {\n          throw $compileMinErr(\n            \"badrestrict\",\n            \"Restrict property '{0}' of directive '{1}' is invalid\",\n            restrict,\n            name,\n          );\n        }\n        // Default is element or attribute\n        return restrict || \"EA\";\n      }\n\n      /**\n       * Register a new directive with the compiler.\n       *\n       * @param {string|Object} name Name of the directive in camel-case (i.e. `ngBind` which will match\n       *    as `ng-bind`), or an object map of directives where the keys are the names and the values\n       *    are the factories.\n       * @param {Function|Array} directiveFactory An injectable directive factory function. See the\n       *    {@link guide/directive directive guide} and the {@link $compile compile API} for more info.\n       * @returns {CompileProvider} Self for chaining.\n       */\n      this.directive = function registerDirective(name, directiveFactory) {\n        assertArg$1(name, \"name\");\n        assertNotHasOwnProperty(name, \"directive\");\n        if (isString(name)) {\n          assertValidDirectiveName(name);\n          assertArg$1(directiveFactory, \"directiveFactory\");\n          if (!hasOwn(hasDirectives, name)) {\n            hasDirectives[name] = [];\n            $provide.factory(name + DirectiveSuffix, [\n              \"$injector\",\n              \"$exceptionHandler\",\n              /**\n               * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n               * @param {import('../../services/exception/exception-handler.js').ErrorHandler} $exceptionHandler\n               */\n              function ($injector, $exceptionHandler) {\n                const directives = [];\n                hasDirectives[name].forEach((directiveFactory, index) => {\n                  try {\n                    let directive = $injector.invoke(directiveFactory);\n                    const valueFn = (value) => () => value;\n                    if (isFunction(directive)) {\n                      directive = { compile: valueFn(directive) };\n                    } else if (!directive.compile && directive.link) {\n                      directive.compile = valueFn(directive.link);\n                    }\n\n                    directive.priority = directive.priority || 0;\n                    directive.index = index;\n                    directive.name = directive.name || name;\n                    directive.require = getDirectiveRequire(directive);\n                    directive.restrict = getDirectiveRestrict(\n                      directive.restrict,\n                      name,\n                    );\n                    directive.$$moduleName = directiveFactory.$$moduleName;\n                    directives.push(directive);\n                  } catch (e) {\n                    $exceptionHandler(e);\n                  }\n                });\n                return directives;\n              },\n            ]);\n          }\n          hasDirectives[name].push(directiveFactory);\n        } else {\n          Object.entries(name).forEach(([k, v]) => registerDirective(k, v));\n        }\n        return this;\n      };\n\n      /**\n       * @param {string|Object} name Name of the component in camelCase (i.e. `myComp` which will match `<my-comp>`),\n       *    or an object map of components where the keys are the names and the values are the component definition objects.\n       * @param {import(\"../../interface.js\").ComponentOptions} options Component definition object (a simplified\n       *    {directive definition object}),\n       *    with the following properties (all optional):\n       *\n       *    - `controller` – `{(string|function()=}` – controller constructor function that should be\n       *      associated with newly created scope or the name of a {controller} if passed as a string. An empty `noop` function by default.\n       *    - `controllerAs` – `{string=}` – identifier name for to reference the controller in the component's scope.\n       *      If present, the controller will be published to scope under the `controllerAs` name.\n       *      If not present, this will default to be `$ctrl`.\n       *    - `template` – `{string=|function()=}` – html template as a string or a function that\n       *      returns an html template as a string which should be used as the contents of this component.\n       *      Empty string by default.\n       *\n       *      If `template` is a function, then it is {injected} with\n       *      the following locals:\n       *\n       *      - `$element` - Current element\n       *      - `$attrs` - Current attributes object for the element\n       *\n       *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n       *      template that should be used  as the contents of this component.\n       *\n       *      If `templateUrl` is a function, then it is {injected} with\n       *      the following locals:\n       *\n       *      - `$element` - Current element\n       *      - `$attrs` - Current attributes object for the element\n       *\n       *    - `bindings` – `{object=}` – defines bindings between DOM attributes and component properties.\n       *      Component properties are always bound to the component controller and not to the scope.\n       *      See {`bindToController`}.\n       *    - `transclude` – `{boolean=}` – whether {content transclusion} is enabled.\n       *      Disabled by default.\n       *    - `require` - `{Object<string, string>=}` - requires the controllers of other directives and binds them to\n       *      this component's controller. The object keys specify the property names under which the required\n       *      controllers (object values) will be bound. See {`require`}.\n       *    - `$...` – additional properties to attach to the directive factory function and the controller\n       *      constructor function. (This is used by the component router to annotate)\n       *\n       * @returns {CompileProvider} the compile provider itself, for chaining of function calls.\n       */\n      this.component = function (name, options) {\n        if (!isString(name)) {\n          Object.entries(name).forEach(([key, val]) => this.component(key, val));\n          return this;\n        }\n\n        const controller = options.controller || function () {};\n\n        function factory($injector) {\n          function makeInjectable(fn) {\n            if (isFunction(fn) || Array.isArray(fn)) {\n              return function (tElement, tAttrs) {\n                return $injector.invoke(fn, this, {\n                  $element: tElement,\n                  $attrs: tAttrs,\n                });\n              };\n            }\n            return fn;\n          }\n\n          const template =\n            !options.template && !options.templateUrl ? \"\" : options.template;\n          const ddo = {\n            controller,\n            controllerAs:\n              identifierForController(options.controller) ||\n              options.controllerAs ||\n              \"$ctrl\",\n            template: makeInjectable(template),\n            templateUrl: makeInjectable(options.templateUrl),\n            transclude: options.transclude,\n            scope: {},\n            bindToController: options.bindings || {},\n            restrict: \"E\",\n            require: options.require,\n          };\n\n          // Copy annotations (starting with $) over to the DDO\n          Object.entries(options).forEach(([key, val]) => {\n            if (key.charAt(0) === \"$\") {\n              ddo[key] = val;\n            }\n          });\n\n          return ddo;\n        }\n\n        // Copy any annotation properties (starting with $) over to the factory and controller constructor functions\n        // These could be used by libraries such as the new component router\n        Object.entries(options).forEach(([key, val]) => {\n          if (key.charAt(0) === \"$\") {\n            factory[key] = val;\n            // Don't try to copy over annotations to named controller\n            if (isFunction(controller)) {\n              controller[key] = val;\n            }\n          }\n        });\n\n        factory.$inject = [\"$injector\"];\n\n        return this.directive(name, factory);\n      };\n\n      /**\n       * Retrieves or overrides the default regular expression that is used for determining trusted safe\n       * urls during a[href] sanitization.\n       *\n       * The sanitization is a security measure aimed at preventing XSS attacks via html links.\n       *\n       * Any url about to be assigned to a[href] via data-binding is first normalized and turned into\n       * an absolute url. Afterwards, the url is matched against the `aHrefSanitizationTrustedUrlList`\n       * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n       * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n       *\n       * @param {RegExp=} regexp New regexp to trust urls with.\n       * @returns {RegExp|import('../sanitize/sanitize-uri.js').SanitizeUriProvider} Current RegExp if called without value or self for\n       *    chaining otherwise.\n       */\n      this.aHrefSanitizationTrustedUrlList = function (regexp) {\n        if (isDefined(regexp)) {\n          $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList(regexp);\n          return;\n        }\n        return $$sanitizeUriProvider.aHrefSanitizationTrustedUrlList();\n      };\n\n      /**\n       * Retrieves or overrides the default regular expression that is used for determining trusted safe\n       * urls during img[src] sanitization.\n       *\n       * The sanitization is a security measure aimed at prevent XSS attacks via html links.\n       *\n       * Any url about to be assigned to img[src] via data-binding is first normalized and turned into\n       * an absolute url. Afterwards, the url is matched against the `imgSrcSanitizationTrustedUrlList`\n       * regular expression. If a match is found, the original url is written into the dom. Otherwise,\n       * the absolute url is prefixed with `'unsafe:'` string and only then is it written into the DOM.\n       *\n       * @param {RegExp=} regexp New regexp to trust urls with.\n       * @returns {RegExp|import('../sanitize/sanitize-uri.js').SanitizeUriProvider} Current RegExp if called without value or self for\n       *    chaining otherwise.\n       */\n      this.imgSrcSanitizationTrustedUrlList = function (regexp) {\n        if (isDefined(regexp)) {\n          $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList(regexp);\n          return;\n        }\n        return $$sanitizeUriProvider.imgSrcSanitizationTrustedUrlList();\n      };\n\n      /**\n       * @param {boolean=} enabled update the strictComponentBindingsEnabled state if provided,\n       * otherwise return the current strictComponentBindingsEnabled state.\n       * @returns {*} current value if used as getter or itself (chaining) if used as setter\n       *\n       * Call this method to enable / disable the strict component bindings check. If enabled, the\n       * compiler will enforce that all scope / controller bindings of a\n       * {@link $compileProvider#directive directive} / {@link $compileProvider#component component}\n       * that are not set as optional with `?`, must be provided when the directive is instantiated.\n       * If not provided, the compiler will throw the\n       * {@link error/$compile/missingattr $compile:missingattr error}.\n       *\n       * The default value is false.\n       */\n      let strictComponentBindingsEnabled = false;\n      this.strictComponentBindingsEnabled = function (enabled) {\n        if (isDefined(enabled)) {\n          strictComponentBindingsEnabled = enabled;\n          return this;\n        }\n        return strictComponentBindingsEnabled;\n      };\n\n      /**\n       * The security context of DOM Properties.\n       */\n      const PROP_CONTEXTS = Object.create(null);\n\n      /**\n       * Defines the security context for DOM properties bound by ng-prop-*.\n       *\n       * @param {string} elementName The element name or '*' to match any element.\n       * @param {string} propertyName The DOM property name.\n       * @param {string} ctx The {@link $sce} security context in which this value is safe for use, e.g. `$sce.URL`\n       * @returns {object} `this` for chaining\n       */\n      this.addPropertySecurityContext = function (\n        elementName,\n        propertyName,\n        ctx,\n      ) {\n        const key = `${elementName.toLowerCase()}|${propertyName.toLowerCase()}`;\n\n        if (key in PROP_CONTEXTS && PROP_CONTEXTS[key] !== ctx) {\n          throw $compileMinErr(\n            \"ctxoverride\",\n            \"Property context '{0}.{1}' already set to '{2}', cannot override to '{3}'.\",\n            elementName,\n            propertyName,\n            PROP_CONTEXTS[key],\n            ctx,\n          );\n        }\n\n        PROP_CONTEXTS[key] = ctx;\n        return this;\n      };\n\n      /* Default property contexts.\n       *\n       * Copy of https://github.com/angular/angular/blob/6.0.6/packages/compiler/src/schema/dom_security_schema.ts#L31-L58\n       * Changing:\n       * - SecurityContext.* => SCE_CONTEXTS/$sce.*\n       * - STYLE => CSS\n       * - various URL => MEDIA_URL\n       * - *|formAction, form|action URL => RESOURCE_URL (like the attribute)\n       */\n      (function registerNativePropertyContexts() {\n        function registerContext(ctx, values) {\n          values.forEach((v) => {\n            PROP_CONTEXTS[v.toLowerCase()] = ctx;\n          });\n        }\n\n        registerContext(SCE_CONTEXTS.HTML, [\n          \"iframe|srcdoc\",\n          \"*|innerHTML\",\n          \"*|outerHTML\",\n        ]);\n        registerContext(SCE_CONTEXTS.CSS, [\"*|style\"]);\n        registerContext(SCE_CONTEXTS.URL, [\n          \"area|href\",\n          \"area|ping\",\n          \"a|href\",\n          \"a|ping\",\n          \"blockquote|cite\",\n          \"body|background\",\n          \"del|cite\",\n          \"input|src\",\n          \"ins|cite\",\n          \"q|cite\",\n        ]);\n        registerContext(SCE_CONTEXTS.MEDIA_URL, [\n          \"audio|src\",\n          \"img|src\",\n          \"img|srcset\",\n          \"source|src\",\n          \"source|srcset\",\n          \"track|src\",\n          \"video|src\",\n          \"video|poster\",\n        ]);\n        registerContext(SCE_CONTEXTS.RESOURCE_URL, [\n          \"*|formAction\",\n          \"applet|code\",\n          \"applet|codebase\",\n          \"base|href\",\n          \"embed|src\",\n          \"frame|src\",\n          \"form|action\",\n          \"head|profile\",\n          \"html|manifest\",\n          \"iframe|src\",\n          \"link|href\",\n          \"media|src\",\n          \"object|codebase\",\n          \"object|data\",\n          \"script|src\",\n        ]);\n      })();\n\n      this.$get = [\n        \"$injector\",\n        \"$interpolate\",\n        \"$exceptionHandler\",\n        \"$templateRequest\",\n        \"$parse\",\n        \"$controller\",\n        \"$rootScope\",\n        \"$sce\",\n        \"$animate\",\n        /**\n         * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n         * @param {*} $interpolate\n         * @param {import(\"../../services/exception/exception-handler.js\").ErrorHandler} $exceptionHandler\n         * @param {*} $templateRequest\n         * @param {import(\"../parse/interface.ts\").ParseService} $parse\n         * @param {*} $controller\n         * @param {import('../scope/scope.js').Scope} $rootScope\n         * @param {*} $sce\n         * @param {*} $animate\n         * @returns\n         */\n        function (\n          $injector,\n          $interpolate,\n          $exceptionHandler,\n          $templateRequest,\n          $parse,\n          $controller,\n          $rootScope,\n          $sce,\n          $animate,\n        ) {\n          // The onChanges hooks should all be run together in a single digest\n          // When changes occur, the call to trigger their hooks will be added to this queue\n          let onChangesQueue;\n\n          // This function is called in a $postUpdate to trigger all the onChanges hooks in a single digest\n          function flushOnChangesQueue() {\n            for (let i = 0, ii = onChangesQueue.length; i < ii; ++i) {\n              try {\n                onChangesQueue[i]();\n              } catch (e) {\n                $exceptionHandler(e);\n              }\n            }\n            // Reset the queue to trigger a new schedule next time there is a change\n            onChangesQueue = undefined;\n          }\n\n          const startSymbol = $interpolate.startSymbol();\n          const endSymbol = $interpolate.endSymbol();\n          /** @type {(string) => string} */\n          const denormalizeTemplate =\n            startSymbol === \"{{\" && endSymbol === \"}}\"\n              ? (x) => x\n              : (x) => x.replace(/\\{\\{/g, startSymbol).replace(/}}/g, endSymbol);\n\n          const NG_PREFIX_BINDING = /^ng(Attr|Prop|On|Observe)([A-Z].*)$/;\n          return compile;\n\n          //= ===============================\n          /**\n           * @type {CompileFn}\n           */\n          function compile(\n            element,\n            transcludeFn,\n            maxPriority,\n            ignoreDirective,\n            previousCompileContext,\n          ) {\n            /** @type {NodeRef | null } */\n            let nodeRef = new NodeRef(element);\n            /**\n             * The composite link function is a composite of individual node linking functions.\n             * It will be invoke by the public link function below.\n             * @type {CompositeLinkFn}\n             */\n            let compositeLinkFn = compileNodes(\n              nodeRef,\n              transcludeFn,\n              maxPriority,\n              ignoreDirective,\n              previousCompileContext,\n            );\n\n            let namespace = null;\n            return publicLinkFn;\n\n            /** @type {PublicLinkFn} */\n            function publicLinkFn(scope, cloneConnectFn, options) {\n              if (!nodeRef) {\n                throw $compileMinErr(\n                  \"multilink\",\n                  \"This element has already been linked.\",\n                );\n              }\n\n              assertArg$1(scope, \"scope\");\n              // could be empty nodelist\n              if (nodeRef.getAny()) {\n                setScope(nodeRef.getAny(), scope);\n              }\n\n              if (\n                previousCompileContext &&\n                previousCompileContext.needsNewScope\n              ) {\n                // A parent directive did a replace and a directive on this element asked\n                // for transclusion, which caused us to lose a layer of element on which\n                // we could hold the new transclusion scope, so we will create it manually\n                // here.\n                scope = scope.$parent.$new();\n              }\n\n              options = options || {};\n              let {\n                transcludeControllers,\n                parentBoundTranscludeFn,\n                futureParentElement,\n              } = options;\n\n              // When `parentBoundTranscludeFn` is passed, it is a\n              // `controllersBoundTransclude` function (it was previously passed\n              // as `transclude` to directive.link) so we must unwrap it to get\n              // its `boundTranscludeFn`\n              if (\n                parentBoundTranscludeFn &&\n                parentBoundTranscludeFn.$$boundTransclude\n              ) {\n                parentBoundTranscludeFn =\n                  parentBoundTranscludeFn.$$boundTransclude;\n              }\n\n              if (!namespace) {\n                namespace = detectNamespaceForChildElements(futureParentElement);\n              }\n              /** @type {NodeRef} */\n              let $linkNode;\n\n              if (namespace !== \"html\") {\n                // When using a directive with replace:true and templateUrl the jqCompileNodes\n                // (or a child element inside of them)\n                // might change, so we need to recreate the namespace adapted compileNodes\n                // for call to the link function.\n                // Note: This will already clone the nodes...\n                const fragment = createElementFromHTML(\"<div></div>\");\n                fragment.append(nodeRef.node);\n                const wrappedTemplate = wrapTemplate(\n                  namespace,\n                  fragment.innerHTML,\n                );\n                $linkNode = new NodeRef(wrappedTemplate[0]);\n              } else if (cloneConnectFn) {\n                $linkNode = nodeRef.clone();\n              } else {\n                $linkNode = nodeRef;\n              }\n\n              if (transcludeControllers) {\n                for (const controllerName in transcludeControllers) {\n                  assertArg$1($linkNode.element, \"element\");\n                  setCacheData(\n                    $linkNode.element,\n                    `$${controllerName}Controller`,\n                    transcludeControllers[controllerName].instance,\n                  );\n                }\n              }\n              if (cloneConnectFn) {\n                cloneConnectFn($linkNode.dom, scope);\n              }\n\n              if (compositeLinkFn) {\n                compositeLinkFn(scope, $linkNode, parentBoundTranscludeFn);\n              }\n\n              if (!cloneConnectFn) {\n                nodeRef = compositeLinkFn = null;\n              }\n\n              $linkNode.linked = true;\n\n              return $linkNode.getAll();\n            }\n          }\n\n          function detectNamespaceForChildElements(parentElement) {\n            // TODO: Make this detect MathML as well...\n            const node = parentElement;\n            if (!node) {\n              return \"html\";\n            }\n            return getNodeName(node) !== \"foreignobject\" &&\n              toString.call(node).match(/SVG/)\n              ? \"svg\"\n              : \"html\";\n          }\n\n          /**\n           * Compile function matches each node in nodeList against the directives. Once all directives\n           * for a particular node are collected their compile functions are executed. The compile\n           * functions return values - the linking functions - are combined into a composite linking\n           * function, which is a linking function for the node.\n           *\n           * @param {NodeRef} nodeRefList a node or an array of nodes or NodeList to compile\n           * @param {*} transcludeFn A linking function, where the\n           *        scope argument is auto-generated to the new child of the transcluded parent scope.\n           * @param {number=} [maxPriority] Max directive priority.\n           * @param {*} [ignoreDirective]\n           * @param {*} [previousCompileContext]\n           * @returns {CompositeLinkFn} A composite linking function of all of the matched directives or null.\n           */\n          function compileNodes(\n            nodeRefList,\n            transcludeFn,\n            maxPriority,\n            ignoreDirective,\n            previousCompileContext,\n          ) {\n            /**\n             * Aggregates for the composite linking function, where a node in a node list is mapped\n             * to a corresponding link function. For single elements, the node should be mapped to\n             * a single node link function.\n             * @type {LinkFnMapping[]}\n             */\n            const linkFnsList = []; // An array to hold node indices and their linkFns\n            let nodeLinkFnFound;\n            let linkFnFound = false;\n            for (let i = 0; i < nodeRefList.size; i++) {\n              const attrs = new Attributes(\n                $rootScope,\n                $animate,\n                $exceptionHandler,\n                $sce,\n              );\n\n              const directives = collectDirectives(\n                /** @type Element */ (nodeRefList.getIndex(i)),\n                attrs,\n                i === 0 ? maxPriority : undefined,\n                ignoreDirective,\n              );\n\n              /** @type {NodeLinkFnCtx} */\n              let nodeLinkFnCtx;\n\n              if (directives.length) {\n                nodeLinkFnCtx = applyDirectivesToNode(\n                  directives,\n                  nodeRefList.getIndex(i),\n                  attrs,\n                  transcludeFn,\n                  null,\n                  [],\n                  [],\n                  Object.assign({}, previousCompileContext, {\n                    index: i,\n                    parentNodeRef: nodeRefList,\n                    ctxNodeRef: nodeRefList,\n                  }),\n                );\n              }\n\n              let childLinkFn;\n              let childNodes;\n              let nodeLinkFn = nodeLinkFnCtx?.nodeLinkFn;\n              if (\n                (nodeLinkFn && nodeLinkFnCtx.terminal) ||\n                !(childNodes = nodeRefList.getIndex(i).childNodes) ||\n                !childNodes.length\n              ) {\n                childLinkFn = null;\n              } else {\n                let transcluded = nodeLinkFn\n                  ? (nodeLinkFnCtx.transcludeOnThisElement ||\n                      !nodeLinkFnCtx.templateOnThisElement) &&\n                    nodeLinkFnCtx.transclude\n                  : transcludeFn;\n                // recursive call\n                const childNodeRef = new NodeRef(childNodes);\n                childLinkFn = compileNodes(childNodeRef, transcluded);\n              }\n\n              if (nodeLinkFn || childLinkFn) {\n                linkFnsList.push({\n                  index: i,\n                  nodeLinkFnCtx: nodeLinkFnCtx,\n                  childLinkFn: childLinkFn,\n                });\n                linkFnFound = true;\n                nodeLinkFnFound = nodeLinkFnFound || nodeLinkFn;\n              }\n\n              // use the previous context only for the first element in the virtual group\n              previousCompileContext = null;\n            }\n\n            // return a composite linking function if we have found anything, null otherwise\n            return linkFnFound ? compositeLinkFn : null;\n\n            /**\n             * The composite link function links all the individual nodes\n             *\n             * @param {import(\"../scope/scope.js\").Scope} scope\n             * @param {NodeRef} nodeRef\n             * @param {*} [parentBoundTranscludeFn]\n             */\n            function compositeLinkFn(scope, nodeRef, parentBoundTranscludeFn) {\n              assertArg$1(nodeRef, \"nodeRef\");\n              let stableNodeList = [];\n              if (nodeLinkFnFound) {\n                // create a stable copy of the nodeList, only copying elements with linkFns\n                const stableLength = nodeRef.isList ? nodeRef.nodes.length : 1;\n                stableNodeList = new Array(stableLength);\n                // create a sparse array by only copying the elements which have a linkFn\n                linkFnsList.forEach((val) => {\n                  let idx = val.index;\n                  if (idx === 0) {\n                    stableNodeList[idx] = nodeRef.isList\n                      ? nodeRef.nodes[idx]\n                      : nodeRef.node;\n                  } else {\n                    if (nodeRefList.getIndex(idx)) {\n                      stableNodeList[idx] = nodeRef.nodes[idx];\n                    }\n                  }\n                });\n              } else {\n                if (nodeRef.isList) {\n                  nodeRef.nodes.forEach((elem) => stableNodeList.push(elem));\n                } else {\n                  stableNodeList.push(nodeRef.node);\n                }\n              }\n\n              linkFnsList.forEach(({ index, nodeLinkFnCtx, childLinkFn }) => {\n                const node = stableNodeList[index];\n                node.stable = true;\n                let childScope;\n                let childBoundTranscludeFn;\n\n                if (nodeLinkFnCtx?.nodeLinkFn) {\n                  childScope = nodeLinkFnCtx.newScope ? scope.$new() : scope;\n\n                  if (nodeLinkFnCtx.transcludeOnThisElement) {\n                    // bind proper scope for the translusion function\n                    childBoundTranscludeFn = createBoundTranscludeFn(\n                      scope,\n                      nodeLinkFnCtx.transclude,\n                      parentBoundTranscludeFn,\n                    );\n                  } else if (\n                    !nodeLinkFnCtx.templateOnThisElement &&\n                    parentBoundTranscludeFn\n                  ) {\n                    childBoundTranscludeFn = parentBoundTranscludeFn;\n                  } else if (!parentBoundTranscludeFn && transcludeFn) {\n                    childBoundTranscludeFn = createBoundTranscludeFn(\n                      scope,\n                      transcludeFn,\n                    );\n                  } else {\n                    childBoundTranscludeFn = null;\n                  }\n\n                  // attach new scope to element\n                  if (nodeLinkFnCtx?.newScope) {\n                    setScope(node, childScope);\n                  }\n                  // @ts-ignore\n                  nodeLinkFnCtx.nodeLinkFn(\n                    // @ts-ignore\n                    childLinkFn,\n                    childScope,\n                    node,\n                    childBoundTranscludeFn,\n                  );\n                } else if (childLinkFn) {\n                  childLinkFn(\n                    scope,\n                    new NodeRef(node.childNodes),\n                    parentBoundTranscludeFn,\n                  );\n                }\n              });\n            }\n          }\n\n          /**\n           * Prebinds the transclusion function to a scope\n           * @param {import(\"../scope/scope.js\").Scope} scope\n           * @param {*} transcludeFn\n           * @param {*} previousBoundTranscludeFn\n           * @returns {BoundTranscludeFn}\n           */\n          function createBoundTranscludeFn(\n            scope,\n            transcludeFn,\n            previousBoundTranscludeFn,\n          ) {\n            function boundTranscludeFn(\n              transcludedScope,\n              cloneFn,\n              controllers,\n              futureParentElement,\n              containingScope,\n            ) {\n              if (!transcludedScope) {\n                transcludedScope = scope.$transcluded(containingScope);\n                transcludedScope.$$transcluded = true;\n              }\n\n              const transcludeRes = transcludeFn(transcludedScope, cloneFn, {\n                parentBoundTranscludeFn: previousBoundTranscludeFn,\n                transcludeControllers: controllers,\n                futureParentElement,\n              });\n\n              return transcludeRes;\n            }\n\n            // We need  to attach the transclusion slots onto the `boundTranscludeFn`\n            // so that they are available inside the `controllersBoundTransclude` function\n            const boundSlots = (boundTranscludeFn.$$slots = Object.create(null));\n            for (const slotName in transcludeFn.$$slots) {\n              if (transcludeFn.$$slots[slotName]) {\n                boundSlots[slotName] = createBoundTranscludeFn(\n                  scope,\n                  transcludeFn.$$slots[slotName],\n                  previousBoundTranscludeFn,\n                );\n              } else {\n                boundSlots[slotName] = null;\n              }\n            }\n\n            return boundTranscludeFn;\n          }\n\n          /**\n           * Looks for directives on the given node and adds them to the directive collection which is\n           * sorted.\n           *\n           * @param {Element} node Node to search.\n           * @param {Attributes|any} attrs The shared attrs object which is used to populate the normalized attributes.\n           * @param {number=} maxPriority Max directive priority.\n           * @param {string} [ignoreDirective]\n           * @return {import('../../interface.ts').Directive[]} An array to which the directives are added to. This array is sorted before the function returns.\n           */\n          function collectDirectives(node, attrs, maxPriority, ignoreDirective) {\n            /**\n             * @type {import('../../interface.ts').Directive[]}\n             */\n            const directives = [];\n            const { nodeType } = node;\n            const attrsMap = attrs.$attr;\n            let nodeName;\n\n            switch (nodeType) {\n              case Node.ELEMENT_NODE /* Element */:\n                nodeName = node.nodeName.toLowerCase();\n                if (ignoreDirective !== directiveNormalize(nodeName)) {\n                  // use the node name: <directive>\n                  addDirective(\n                    directives,\n                    directiveNormalize(nodeName),\n                    \"E\",\n                    maxPriority,\n                  );\n                }\n\n                // iterate over the attributes\n                for (let j = 0; j < node.attributes?.length; j++) {\n                  let isNgAttr = false;\n                  let isNgProp = false;\n                  let isNgEvent = false;\n                  let isNgObserve = false;\n\n                  let attr = node.attributes[j];\n                  let name = attr.name;\n                  let value = attr.value;\n                  let nName = directiveNormalize(name.toLowerCase());\n\n                  // Support ng-attr-*, ng-prop-* and ng-on-*\n                  const ngPrefixMatch = nName.match(NG_PREFIX_BINDING);\n                  if (ngPrefixMatch) {\n                    isNgAttr = ngPrefixMatch[1] === \"Attr\";\n                    isNgProp = ngPrefixMatch[1] === \"Prop\";\n                    isNgEvent = ngPrefixMatch[1] === \"On\";\n                    isNgObserve = ngPrefixMatch[1] === \"Observe\";\n\n                    // Normalize the non-prefixed name\n                    name = name\n                      .replace(PREFIX_REGEXP, \"\")\n                      .toLowerCase()\n                      .substring(4 + ngPrefixMatch[1].length)\n                      .replace(/_(.)/g, (match, letter) => letter.toUpperCase());\n                  }\n\n                  if (isNgProp || isNgEvent) {\n                    attrs[nName] = value;\n                    attrsMap[nName] = attr.name;\n\n                    if (isNgProp) {\n                      addPropertyDirective(node, directives, nName, name);\n                    } else {\n                      directives.push(\n                        createEventDirective(\n                          $parse,\n                          $exceptionHandler,\n                          nName,\n                          name,\n                        ),\n                      );\n                    }\n                  } else if (isNgObserve) {\n                    directives.push(ngObserveDirective(name, value));\n                  } else {\n                    // Update nName for cases where a prefix was removed\n                    // NOTE: the .toLowerCase() is unnecessary and causes https://github.com/angular/angular.js/issues/16624 for ng-attr-*\n                    nName = directiveNormalize(name.toLowerCase());\n                    attrsMap[nName] = name;\n\n                    if (isNgAttr || !hasOwn(attrs, nName)) {\n                      attrs[nName] = value;\n                      if (getBooleanAttrName(node, nName)) {\n                        attrs[nName] = true; // presence means true\n                      }\n                    }\n\n                    addAttrInterpolateDirective(\n                      node,\n                      directives,\n                      value,\n                      nName,\n                      isNgAttr,\n                    );\n\n                    if (nName !== ignoreDirective) {\n                      addDirective(directives, nName, \"A\", maxPriority);\n                    }\n                  }\n                }\n\n                if (\n                  nodeName === \"input\" &&\n                  node.getAttribute(\"type\") === \"hidden\"\n                ) {\n                  // Hidden input elements can have strange behaviour when navigating back to the page\n                  // This tells the browser not to try to cache and reinstate previous values\n                  node.setAttribute(\"autocomplete\", \"off\");\n                }\n\n                break;\n              case Node.TEXT_NODE:\n                addTextInterpolateDirective(directives, node.nodeValue);\n                break;\n            }\n\n            directives.sort(byPriority);\n            return directives;\n          }\n\n          /**\n           * A function generator that is used to support both eager and lazy compilation\n           * linking function.\n           * @param eager\n           * @param {NodeList|Node} compileNodes\n           * @param transcludeFn\n           * @param maxPriority\n           * @param ignoreDirective\n           * @param previousCompileContext\n           * @returns {PublicLinkFn|TranscludeFn}\n           */\n          function compilationGenerator(\n            eager,\n            compileNodes,\n            transcludeFn,\n            maxPriority,\n            ignoreDirective,\n            previousCompileContext,\n          ) {\n            let compiled;\n            if (eager) {\n              return compile(\n                compileNodes,\n                transcludeFn,\n                maxPriority,\n                ignoreDirective,\n                previousCompileContext,\n              );\n            }\n\n            return function lazyCompilation() {\n              if (!compiled) {\n                compiled = compile(\n                  compileNodes,\n                  transcludeFn,\n                  maxPriority,\n                  ignoreDirective,\n                  previousCompileContext,\n                );\n\n                // Null out all of these references for garbage collection\n                compileNodes = transcludeFn = previousCompileContext = null;\n              }\n              return compiled.apply(this, arguments);\n            };\n          }\n\n          /**\n           * Once the directives have been collected, their compile functions are executed. This method\n           * is responsible for inlining directive templates as well as terminating the application\n           * of the directives if the terminal directive has been reached.\n           *\n           * @param {Array} directives Array of collected directives to execute their compile function.\n           *        this needs to be pre-sorted by priority order.\n           * @param {Node | Element} compileNode  DOM node to apply the compile functions to\n           * @param {Attributes} templateAttrs The shared attribute function\n           * @param {TranscludeFn} transcludeFn\n           * @param {Object=} originalReplaceDirective An optional directive that will be ignored when\n           *                                           compiling the transclusion.\n           * @param {Array.<Function>} [preLinkFns]\n           * @param {Array.<Function>} [postLinkFns]\n           * @param {Object} [previousCompileContext] Context used for previous compilation of the current\n           *                                        node\n           * @returns {NodeLinkFnCtx} node link function\n           */\n          function applyDirectivesToNode(\n            directives,\n            compileNode,\n            templateAttrs,\n            transcludeFn,\n            originalReplaceDirective,\n            preLinkFns,\n            postLinkFns,\n            previousCompileContext,\n          ) {\n            previousCompileContext = previousCompileContext || {};\n\n            let terminalPriority = -Number.MAX_VALUE;\n            let terminal = false;\n            let {\n              newScopeDirective,\n              controllerDirectives,\n              newIsolateScopeDirective,\n              templateDirective,\n              nonTlbTranscludeDirective,\n              hasElementTranscludeDirective,\n              ctxNodeRef,\n              parentNodeRef,\n            } = previousCompileContext;\n            let hasTranscludeDirective = false;\n            let hasTemplate = false;\n            let compileNodeRef = new NodeRef(compileNode);\n            const index = previousCompileContext.index;\n            templateAttrs.$nodeRef = compileNodeRef;\n            let directive;\n            let directiveName;\n            let $template;\n            let replaceDirective = originalReplaceDirective;\n            /** @type {TranscludeFn} */\n            let childTranscludeFn = transcludeFn;\n\n            let didScanForMultipleTransclusion = false;\n            let mightHaveMultipleTransclusionError = false;\n            let directiveValue;\n\n            /**\n             * Links all the directives of a single node.\n             * @type {NodeLinkFn}\n             */\n            // @ts-ignore\n            let nodeLinkFn = function (\n              childLinkFn,\n              scope,\n              linkNode,\n              boundTranscludeFn,\n            ) {\n              let i;\n              let ii;\n              let isolateScope;\n              let controllerScope;\n              let elementControllers;\n              let transcludeFn;\n              let scopeToChild = scope;\n\n              /** @type {NodeRef} */\n              let $element;\n              /** @type {Attributes} */\n              let attrs;\n              let scopeBindingInfo;\n\n              if (compileNode === linkNode) {\n                attrs = templateAttrs;\n                $element = templateAttrs.$nodeRef;\n              } else {\n                $element = new NodeRef(linkNode);\n                attrs = new Attributes(\n                  $rootScope,\n                  $animate,\n                  $exceptionHandler,\n                  $sce,\n                  $element,\n                  templateAttrs,\n                );\n              }\n\n              controllerScope = scope;\n              if (newIsolateScopeDirective) {\n                isolateScope = scope.$newIsolate();\n              } else if (newScopeDirective) {\n                controllerScope = scope.$parent;\n              }\n\n              if (boundTranscludeFn) {\n                // track `boundTranscludeFn` so it can be unwrapped if `transcludeFn`\n                // is later passed as `parentBoundTranscludeFn` to `publicLinkFn`\n                transcludeFn = controllersBoundTransclude;\n                transcludeFn[\"$$boundTransclude\"] = boundTranscludeFn;\n                // expose the slots on the `$transclude` function\n                transcludeFn[\"isSlotFilled\"] = function (slotName) {\n                  return !!boundTranscludeFn.$$slots[slotName];\n                };\n              }\n\n              if (controllerDirectives) {\n                elementControllers = setupControllers(\n                  $element,\n                  attrs,\n                  transcludeFn,\n                  controllerDirectives,\n                  isolateScope,\n                  scope,\n                  newIsolateScopeDirective,\n                );\n              }\n\n              if (newIsolateScopeDirective) {\n                isolateScope.$target.$$isolateBindings =\n                  newIsolateScopeDirective.$$isolateBindings;\n                scopeBindingInfo = initializeDirectiveBindings(\n                  scope,\n                  attrs,\n                  isolateScope,\n                  isolateScope.$$isolateBindings,\n                  newIsolateScopeDirective,\n                );\n                if (scopeBindingInfo.removeWatches) {\n                  isolateScope.$on(\"$destroy\", scopeBindingInfo.removeWatches);\n                }\n              }\n\n              // Initialize bindToController bindings\n              for (const name in elementControllers) {\n                const controllerDirective = controllerDirectives[name];\n                const controller = elementControllers[name];\n                const bindings = controllerDirective.$$bindings.bindToController;\n\n                // Controller instance is bound to the scope\n                const controllerInstance = controller();\n                controller.instance = controllerScope.$new(controllerInstance);\n                setCacheData(\n                  $element.node,\n                  `$${controllerDirective.name}Controller`,\n                  controller.instance,\n                );\n                controller.bindingInfo = initializeDirectiveBindings(\n                  controllerScope,\n                  attrs,\n                  controller.instance,\n                  bindings,\n                  controllerDirective,\n                );\n              }\n\n              // Bind the required controllers to the controller, if `require` is an object and `bindToController` is truthy\n              if (controllerDirectives) {\n                Object.entries(controllerDirectives).forEach(\n                  ([name, controllerDirective]) => {\n                    const { require } = controllerDirective;\n                    if (\n                      controllerDirective.bindToController &&\n                      !Array.isArray(require) &&\n                      isObject(require)\n                    ) {\n                      extend(\n                        elementControllers[name].instance,\n                        getControllers(\n                          name,\n                          require,\n                          $element.element,\n                          elementControllers,\n                        ),\n                      );\n                    }\n                  },\n                );\n              }\n\n              // Handle the init and destroy lifecycle hooks on all controllers that have them\n              if (elementControllers) {\n                Object.values(elementControllers).forEach((controller) => {\n                  const controllerInstance = controller.instance;\n                  if (isFunction(controllerInstance.$onChanges)) {\n                    try {\n                      controllerInstance.$onChanges(\n                        controller.bindingInfo.initialChanges,\n                      );\n                    } catch (e) {\n                      $exceptionHandler(e);\n                    }\n                  }\n                  if (isFunction(controllerInstance.$onInit)) {\n                    try {\n                      controllerInstance.$target.$onInit();\n                    } catch (e) {\n                      $exceptionHandler(e);\n                    }\n                  }\n                  if (isFunction(controllerInstance.$onDestroy)) {\n                    controllerScope.$on(\"$destroy\", () => {\n                      controllerInstance.$onDestroy();\n                    });\n                  }\n                });\n              }\n\n              // PRELINKING\n              for (i = 0, ii = preLinkFns.length; i < ii; i++) {\n                let preLinkFn = preLinkFns[i];\n                const controllers =\n                  preLinkFn[\"require\"] &&\n                  getControllers(\n                    preLinkFn[\"directiveName\"],\n                    preLinkFn[\"require\"],\n                    $element.element,\n                    elementControllers,\n                  );\n\n                // invoke link function\n                try {\n                  preLinkFn(\n                    preLinkFn[\"isolateScope\"] ? isolateScope : scope,\n                    $element.node, // Prelink functions accept a Node\n                    attrs,\n                    controllers,\n                    transcludeFn,\n                  );\n                } catch (e) {\n                  $exceptionHandler(e, startingTag($element.getAny()));\n                }\n              }\n\n              // RECURSION\n              // We only pass the isolate scope, if the isolate directive has a template,\n              // otherwise the child elements do not belong to the isolate directive.\n\n              if (\n                newIsolateScopeDirective &&\n                (newIsolateScopeDirective.template ||\n                  newIsolateScopeDirective.templateUrl === null)\n              ) {\n                scopeToChild = isolateScope;\n              }\n              if (\n                childLinkFn &&\n                linkNode &&\n                linkNode.childNodes &&\n                linkNode.childNodes.length\n              ) {\n                childLinkFn(\n                  scopeToChild,\n                  new NodeRef(linkNode.childNodes),\n                  boundTranscludeFn,\n                );\n              }\n              // POSTLINKING\n              for (i = postLinkFns.length - 1; i >= 0; i--) {\n                let postLinkFn = postLinkFns[i];\n                const controllers =\n                  postLinkFn[\"require\"] &&\n                  getControllers(\n                    postLinkFn[\"directiveName\"],\n                    postLinkFn[\"require\"],\n                    /** @type {Element} */ ($element.node),\n                    elementControllers,\n                  );\n\n                // invoke link function\n                try {\n                  if (postLinkFn[\"isolateScope\"]) {\n                    setIsolateScope($element.element, isolateScope);\n                  }\n\n                  postLinkFn(\n                    postLinkFn[\"isolateScope\"] ? isolateScope : scope,\n                    $element.node,\n                    attrs,\n                    controllers,\n                    transcludeFn,\n                  );\n                } catch (e) {\n                  $exceptionHandler(e, startingTag($element.getAny()));\n                }\n              }\n\n              if (elementControllers) {\n                // Trigger $postLink lifecycle hooks\n                Object.values(elementControllers).forEach((controller) => {\n                  const controllerInstance = controller.instance;\n                  if (isFunction(controllerInstance.$postLink)) {\n                    controllerInstance.$postLink();\n                  }\n                });\n              }\n\n              // This is the function that is injected as `$transclude` or\n              // the fifth parameter to the link function.\n              // Example: function link (scope, element, attrs, ctrl, transclude) {}\n              // Note: all arguments are optional!\n              function controllersBoundTransclude(\n                scope,\n                cloneAttachFn,\n                futureParentElement,\n                slotName,\n              ) {\n                let transcludeControllers;\n                // No scope passed in:\n                if (!isScope(scope)) {\n                  slotName = futureParentElement;\n                  futureParentElement = cloneAttachFn;\n                  cloneAttachFn = scope;\n                  scope = undefined;\n                }\n                if (hasElementTranscludeDirective) {\n                  transcludeControllers = elementControllers;\n                }\n                if (!futureParentElement) {\n                  futureParentElement = hasElementTranscludeDirective\n                    ? $element.node.parentElement\n                    : $element.node;\n                }\n                if (slotName) {\n                  // slotTranscludeFn can be one of three things:\n                  //  * a transclude function - a filled slot\n                  //  * `null` - an optional slot that was not filled\n                  //  * `undefined` - a slot that was not declared (i.e. invalid)\n                  const slotTranscludeFn = boundTranscludeFn.$$slots[slotName];\n                  if (slotTranscludeFn) {\n                    return slotTranscludeFn(\n                      scope,\n                      cloneAttachFn,\n                      transcludeControllers,\n                      futureParentElement,\n                      scopeToChild,\n                    );\n                  }\n\n                  if (isUndefined(slotTranscludeFn)) {\n                    throw $compileMinErr(\n                      \"noslot\",\n                      'No parent directive that requires a transclusion with slot name \"{0}\". ' +\n                        \"Element: {1}\",\n                      slotName,\n                      startingTag($element.element),\n                    );\n                  }\n                } else {\n                  return boundTranscludeFn(\n                    scope,\n                    cloneAttachFn,\n                    transcludeControllers,\n                    futureParentElement,\n                    scopeToChild,\n                  );\n                }\n              }\n            };\n\n            // executes all directives on the current element\n            for (let i = 0, ii = directives.length; i < ii; i++) {\n              directive = directives[i];\n              $template = undefined;\n\n              if (terminalPriority > directive.priority) {\n                break; // prevent further processing of directives\n              }\n\n              directiveValue = directive.scope;\n\n              if (directiveValue) {\n                // skip the check for directives with async templates, we'll check the derived sync\n                // directive when the template arrives\n                if (!directive.templateUrl) {\n                  if (isObject(directiveValue)) {\n                    // This directive is trying to add an isolated scope.\n                    // Check that there is no scope of any kind already\n                    assertNoDuplicate(\n                      \"new/isolated scope\",\n                      newIsolateScopeDirective || newScopeDirective,\n                      directive,\n                      compileNodeRef,\n                    );\n                    newIsolateScopeDirective = directive;\n                  } else {\n                    // This directive is trying to add a child scope.\n                    // Check that there is no isolated scope already\n                    assertNoDuplicate(\n                      \"new/isolated scope\",\n                      newIsolateScopeDirective,\n                      directive,\n                      compileNodeRef,\n                    );\n                  }\n                }\n\n                newScopeDirective = newScopeDirective || directive;\n              }\n\n              directiveName = directive.name;\n\n              // If we encounter a condition that can result in transclusion on the directive,\n              // then scan ahead in the remaining directives for others that may cause a multiple\n              // transclusion error to be thrown during the compilation process.  If a matching directive\n              // is found, then we know that when we encounter a transcluded directive, we need to eagerly\n              // compile the `transclude` function rather than doing it lazily in order to throw\n              // exceptions at the correct time\n              const hasReplacedTemplate =\n                directive.replace &&\n                (directive.templateUrl || directive.template);\n              const shouldTransclude =\n                directive.transclude &&\n                !EXCLUDED_DIRECTIVES.includes(directive.name);\n              if (\n                !didScanForMultipleTransclusion &&\n                (hasReplacedTemplate || shouldTransclude)\n              ) {\n                let candidateDirective;\n\n                for (\n                  let scanningIndex = i + 1;\n                  (candidateDirective = directives[scanningIndex++]);\n\n                ) {\n                  if (\n                    (candidateDirective.transclude &&\n                      !EXCLUDED_DIRECTIVES.includes(candidateDirective.name)) ||\n                    (candidateDirective.replace &&\n                      (candidateDirective.templateUrl ||\n                        candidateDirective.template))\n                  ) {\n                    mightHaveMultipleTransclusionError = true;\n                    break;\n                  }\n                }\n\n                didScanForMultipleTransclusion = true;\n              }\n\n              if (!directive.templateUrl && directive.controller) {\n                controllerDirectives =\n                  controllerDirectives || Object.create(null);\n                assertNoDuplicate(\n                  `'${directiveName}' controller`,\n                  controllerDirectives[directiveName],\n                  directive,\n                  compileNodeRef,\n                );\n                controllerDirectives[directiveName] = directive;\n              }\n\n              directiveValue = directive.transclude;\n\n              if (directiveValue) {\n                hasTranscludeDirective = true;\n\n                // Special case ngIf and ngRepeat so that we don't complain about duplicate transclusion.\n                // This option should only be used by directives that know how to safely handle element transclusion,\n                // where the transcluded nodes are added or replaced after linking.\n                if (!EXCLUDED_DIRECTIVES.includes(directive.name)) {\n                  assertNoDuplicate(\n                    \"transclusion\",\n                    nonTlbTranscludeDirective,\n                    directive,\n                    compileNodeRef,\n                  );\n                  nonTlbTranscludeDirective = directive;\n                }\n\n                if (directiveValue === \"element\") {\n                  hasElementTranscludeDirective = true;\n                  terminalPriority = directive.priority;\n                  $template = compileNodeRef;\n                  compileNodeRef = new NodeRef(document.createComment(\"\"));\n                  templateAttrs.$nodeRef = compileNodeRef;\n                  compileNode = compileNodeRef.node;\n                  ctxNodeRef.node = compileNode;\n                  replaceWith(\n                    new NodeRef($template.getAny()),\n                    compileNode,\n                    index,\n                  );\n\n                  // @ts-ignore\n                  childTranscludeFn = compilationGenerator(\n                    mightHaveMultipleTransclusionError,\n                    $template.getAny(),\n                    transcludeFn,\n                    terminalPriority,\n                    replaceDirective && replaceDirective.name,\n                    {\n                      // Don't pass in:\n                      // - controllerDirectives - otherwise we'll create duplicates controllers\n                      // - newIsolateScopeDirective or templateDirective - combining templates with\n                      //   element transclusion doesn't make sense.\n                      //\n                      // We need only nonTlbTranscludeDirective so that we prevent putting transclusion\n                      // on the same element more than once.\n                      nonTlbTranscludeDirective,\n                    },\n                  );\n                } else {\n                  const slots = Object.create(null);\n\n                  if (!isObject(directiveValue)) {\n                    //\n                    // Clone childnodes before clearing contents on transcluded directives\n                    $template = compileNode.cloneNode(true).childNodes;\n                  } else {\n                    // We have transclusion slots,\n                    // collect them up, compile them and store their transclusion functions\n                    $template = document.createDocumentFragment();\n\n                    const slotMap = Object.create(null);\n                    const filledSlots = Object.create(null);\n\n                    // Parse the element selectors\n                    Object.entries(directiveValue).forEach(\n                      ([slotName, elementSelector]) => {\n                        // If an element selector starts with a ? then it is optional\n                        const optional = elementSelector.charAt(0) === \"?\";\n                        elementSelector = optional\n                          ? elementSelector.substring(1)\n                          : elementSelector;\n\n                        slotMap[elementSelector] = slotName;\n\n                        // We explicitly assign `null` since this implies that a slot was defined but not filled.\n                        // Later when calling boundTransclusion functions with a slot name we only error if the\n                        // slot is `undefined`\n                        slots[slotName] = null;\n\n                        // filledSlots contains `true` for all slots that are either optional or have been\n                        // filled. This is used to check that we have not missed any required slots\n                        filledSlots[slotName] = optional;\n                      },\n                    );\n\n                    // Add the matching elements into their slot\n                    compileNodeRef.element.childNodes.forEach((node) => {\n                      const slotName =\n                        slotMap[\n                          directiveNormalize(\n                            getNodeName(/** @type {Element} */ (node)),\n                          )\n                        ];\n                      if (slotName) {\n                        filledSlots[slotName] = true;\n                        slots[slotName] =\n                          slots[slotName] || document.createDocumentFragment();\n                        slots[slotName].appendChild(node);\n                      } else {\n                        $template.appendChild(node);\n                      }\n                    });\n\n                    // Check for required slots that were not filled\n                    Object.entries(filledSlots).forEach(([slotName, filled]) => {\n                      if (!filled) {\n                        throw $compileMinErr(\n                          \"reqslot\",\n                          \"Required transclusion slot `{0}` was not filled.\",\n                          slotName,\n                        );\n                      }\n                    });\n\n                    for (const slotName in slots) {\n                      if (slots[slotName]) {\n                        // Only define a transclusion function if the slot was filled\n                        const slotCompileNodes = slots[slotName].childNodes;\n                        slots[slotName] = compilationGenerator(\n                          mightHaveMultipleTransclusionError,\n                          slotCompileNodes,\n                          transcludeFn,\n                        );\n                      }\n                    }\n\n                    $template = $template.childNodes;\n                  }\n\n                  emptyElement(/** @type {Element} */ (compileNode)); // clear contents on transcluded directives\n\n                  // lazily compile transcluded template and generate a transcluded link function\n                  // @ts-ignore\n                  childTranscludeFn = compilationGenerator(\n                    mightHaveMultipleTransclusionError,\n                    $template,\n                    transcludeFn,\n                    undefined,\n                    undefined,\n                    {\n                      needsNewScope:\n                        directive.$$isolateScope || directive.$$newScope,\n                    },\n                  );\n                  childTranscludeFn[\"$$slots\"] = slots;\n                }\n              }\n\n              if (directive.template) {\n                hasTemplate = true;\n                assertNoDuplicate(\n                  \"template\",\n                  templateDirective,\n                  directive,\n                  compileNodeRef,\n                );\n                templateDirective = directive;\n\n                directiveValue = isFunction(directive.template)\n                  ? directive.template(compileNodeRef.node, templateAttrs)\n                  : directive.template;\n\n                directiveValue = denormalizeTemplate(directiveValue);\n                if (directive.replace) {\n                  replaceDirective = directive;\n                  if (isTextNode(directiveValue)) {\n                    $template = [];\n                  } else {\n                    $template = removeComments(\n                      wrapTemplate(\n                        directive.templateNamespace,\n                        trim(directiveValue),\n                      ),\n                    );\n                  }\n\n                  if (isString($template)) {\n                    $template = Array.from(\n                      createNodelistFromHTML($template),\n                    ).filter((x) => x.nodeType === Node.ELEMENT_NODE);\n                  }\n                  compileNode = $template[0];\n\n                  if (\n                    $template.length !== 1 ||\n                    compileNode.nodeType !== Node.ELEMENT_NODE\n                  ) {\n                    throw $compileMinErr(\n                      \"tplrt\",\n                      \"Template for directive '{0}' must have exactly one root element. {1}\",\n                      directiveName,\n                      \"\",\n                    );\n                  }\n\n                  replaceWith(compileNodeRef, compileNode);\n\n                  if (parentNodeRef) {\n                    parentNodeRef.setIndex(index, compileNode);\n                  }\n\n                  const newTemplateAttrs = { $attr: {} };\n\n                  // combine directives from the original node and from the template:\n                  // - take the array of directives for this element\n                  // - split it into two parts, those that already applied (processed) and those that weren't (unprocessed)\n                  // - collect directives from the template and sort them by priority\n                  // - combine directives as: processed + template + unprocessed\n                  const templateDirectives = collectDirectives(\n                    /** @type {Element} */ (compileNode),\n                    newTemplateAttrs,\n                  );\n                  const unprocessedDirectives = directives.splice(\n                    i + 1,\n                    directives.length - (i + 1),\n                  );\n\n                  if (newIsolateScopeDirective || newScopeDirective) {\n                    // The original directive caused the current element to be replaced but this element\n                    // also needs to have a new scope, so we need to tell the template directives\n                    // that they would need to get their scope from further up, if they require transclusion\n                    markDirectiveScope(\n                      templateDirectives,\n                      newIsolateScopeDirective,\n                      newScopeDirective,\n                    );\n                  }\n                  directives = directives\n                    .concat(templateDirectives)\n                    .concat(unprocessedDirectives);\n\n                  mergeTemplateAttributes(templateAttrs, newTemplateAttrs);\n\n                  ii = directives.length;\n                } else {\n                  if (compileNodeRef.isElement()) {\n                    compileNodeRef.element.innerHTML = directiveValue;\n                  }\n                }\n              }\n\n              if (directive.templateUrl) {\n                hasTemplate = true;\n                assertNoDuplicate(\n                  \"template\",\n                  templateDirective,\n                  directive,\n                  compileNodeRef,\n                );\n                templateDirective = directive;\n\n                if (directive.replace) {\n                  replaceDirective = directive;\n                }\n                // @ts-ignore\n                nodeLinkFn = compileTemplateUrl(\n                  directives.splice(i, directives.length - i),\n                  compileNodeRef,\n                  templateAttrs,\n                  /** @type {Element} */ (compileNode),\n                  hasTranscludeDirective && childTranscludeFn,\n                  preLinkFns,\n                  postLinkFns,\n                  {\n                    index,\n                    controllerDirectives,\n                    newScopeDirective:\n                      newScopeDirective !== directive && newScopeDirective,\n                    newIsolateScopeDirective,\n                    templateDirective,\n                    nonTlbTranscludeDirective,\n                    futureParentElement:\n                      previousCompileContext.futureParentElement,\n                  },\n                );\n                ii = directives.length;\n              } else if (directive.compile) {\n                try {\n                  /** @type {PublicLinkFn} */\n                  const linkFn = directive.compile(\n                    compileNodeRef.getAny(),\n                    templateAttrs,\n                    childTranscludeFn,\n                  );\n                  const context = directive.$$originalDirective || directive;\n                  if (isFunction(linkFn)) {\n                    addLinkFns(null, bind(context, linkFn));\n                  } else if (linkFn) {\n                    addLinkFns(\n                      bind(context, linkFn[\"pre\"]),\n                      bind(context, linkFn[\"post\"]),\n                    );\n                  }\n                } catch (e) {\n                  $exceptionHandler(e, startingTag(compileNodeRef.getAny()));\n                }\n              }\n\n              if (directive.terminal) {\n                terminal = true;\n                terminalPriority = Math.max(terminalPriority, directive.priority);\n              }\n            }\n\n            previousCompileContext.hasElementTranscludeDirective =\n              hasElementTranscludeDirective;\n\n            // might be normal or delayed nodeLinkFn depending on if templateUrl is present\n            return {\n              nodeLinkFn,\n              terminal,\n              transclude: childTranscludeFn,\n              transcludeOnThisElement: hasTranscludeDirective,\n              templateOnThisElement: hasTemplate,\n              newScope: newScopeDirective && newScopeDirective.scope === true,\n            };\n\n            /// /////////////////\n            function addLinkFns(pre, post) {\n              if (pre) {\n                pre.require = directive.require;\n                pre.directiveName = directiveName;\n                if (\n                  newIsolateScopeDirective === directive ||\n                  directive.$$isolateScope\n                ) {\n                  pre = cloneAndAnnotateFn(pre, { isolateScope: true });\n                }\n                preLinkFns.push(pre);\n              }\n              if (post) {\n                post.require = directive.require;\n                post.directiveName = directiveName;\n                if (\n                  newIsolateScopeDirective === directive ||\n                  directive.$$isolateScope\n                ) {\n                  post = cloneAndAnnotateFn(post, { isolateScope: true });\n                }\n                postLinkFns.push(post);\n              }\n            }\n          }\n\n          /**\n           *\n           * @param {*} directiveName\n           * @param {*} require\n           * @param {Element} $element\n           * @param {*} elementControllers\n           * @returns\n           */\n          function getControllers(\n            directiveName,\n            require,\n            $element,\n            elementControllers,\n          ) {\n            let value;\n\n            if (isString(require)) {\n              const match = require.match(REQUIRE_PREFIX_REGEXP);\n              const name = require.substring(match[0].length);\n              const inheritType = match[1] || match[3];\n              const optional = match[2] === \"?\";\n\n              // If only parents then start at the parent element\n              if (inheritType === \"^^\") {\n                if ($element.parentElement) {\n                  $element = $element.parentElement;\n                } else {\n                  $element = undefined;\n                }\n                // Otherwise attempt getting the controller from elementControllers in case\n                // the element is transcluded (and has no data) and to avoid .data if possible\n              } else {\n                value = elementControllers && elementControllers[name];\n                value = value && value.instance;\n              }\n\n              if (!value) {\n                const dataName = `$${name}Controller`;\n                if (\n                  inheritType === \"^^\" &&\n                  $element &&\n                  $element.nodeType === Node.DOCUMENT_NODE\n                ) {\n                  // inheritedData() uses the documentElement when it finds the document, so we would\n                  // require from the element itself.\n                  value = null;\n                } else {\n                  value = $element\n                    ? inheritType\n                      ? getInheritedData($element, dataName)\n                      : getCacheData($element, dataName)\n                    : undefined;\n                }\n              }\n              if (!value && !optional) {\n                throw $compileMinErr(\n                  \"ctreq\",\n                  \"Controller '{0}', required by directive '{1}', can't be found!\",\n                  name,\n                  directiveName,\n                );\n              }\n            } else if (Array.isArray(require)) {\n              value = [];\n              for (let i = 0, ii = require.length; i < ii; i++) {\n                value[i] = getControllers(\n                  directiveName,\n                  require[i],\n                  $element,\n                  elementControllers,\n                );\n              }\n            } else if (isObject(require)) {\n              value = {};\n              Object.entries(require).forEach(([property, controller]) => {\n                value[property] = getControllers(\n                  directiveName,\n                  controller,\n                  $element,\n                  elementControllers,\n                );\n              });\n            }\n\n            return value || null;\n          }\n\n          /**\n           * @param {NodeRef} $element\n           * @param attrs\n           * @param transcludeFn\n           * @param controllerDirectives\n           * @param isolateScope\n           * @param scope\n           * @param newIsolateScopeDirective\n           * @returns {any}\n           */\n          function setupControllers(\n            $element,\n            attrs,\n            transcludeFn,\n            controllerDirectives,\n            isolateScope,\n            scope,\n            newIsolateScopeDirective,\n          ) {\n            const elementControllers = Object.create(null);\n            for (const controllerKey in controllerDirectives) {\n              const directive = controllerDirectives[controllerKey];\n              const locals = {\n                $scope:\n                  directive === newIsolateScopeDirective ||\n                  directive.$$isolateScope\n                    ? isolateScope\n                    : scope,\n                $element: $element.node,\n                $attrs: attrs,\n                $transclude: transcludeFn,\n              };\n\n              let { controller } = directive;\n              if (controller === \"@\") {\n                controller = attrs[directive.name];\n              }\n\n              const controllerInstance = $controller(\n                controller,\n                locals,\n                true,\n                directive.controllerAs,\n              );\n\n              // For directives with element transclusion the element is a comment.\n              // In this case .data will not attach any data.\n              // Instead, we save the controllers for the element in a local hash and attach to .data\n              // later, once we have the actual element.\n              elementControllers[directive.name] = controllerInstance;\n              if ($element.isElement()) {\n                setCacheData(\n                  $element.element,\n                  `$${directive.name}Controller`,\n                  controllerInstance.instance,\n                );\n              }\n            }\n            return elementControllers;\n          }\n\n          // Depending upon the context in which a directive finds itself it might need to have a new isolated\n          // or child scope created. For instance:\n          // * if the directive has been pulled into a template because another directive with a higher priority\n          // asked for element transclusion\n          // * if the directive itself asks for transclusion but it is at the root of a template and the original\n          // element was replaced. See https://github.com/angular/angular.js/issues/12936\n          function markDirectiveScope(directives, isolateScope, newScope) {\n            for (let j = 0, jj = directives.length; j < jj; j++) {\n              directives[j] = inherit$1(directives[j], {\n                $$isolateScope: isolateScope,\n                $$newScope: newScope,\n              });\n            }\n          }\n\n          /**\n           * looks up the directive and decorates it with exception handling and proper parameters. We\n           * call this the boundDirective.\n           *\n           * @param {string} name name of the directive to look up.\n           * @param {string} location The directive must be found in specific format.\n           *   String containing any of these characters:\n           *\n           *   * `E`: element name\n           *   * `A': attribute\n           * @returns {boolean} true if directive was added.\n           */\n          function addDirective(tDirectives, name, location, maxPriority) {\n            let match = false;\n            if (hasOwn(hasDirectives, name)) {\n              for (\n                let directive,\n                  directives = $injector.get(name + DirectiveSuffix),\n                  i = 0,\n                  ii = directives.length;\n                i < ii;\n                i++\n              ) {\n                directive = directives[i];\n                if (\n                  (isUndefined(maxPriority) ||\n                    maxPriority > directive.priority) &&\n                  directive.restrict.indexOf(location) !== -1\n                ) {\n                  if (!directive.$$bindings) {\n                    const bindings = (directive.$$bindings =\n                      parseDirectiveBindings(directive, directive.name));\n                    if (isObject(bindings.isolateScope)) {\n                      directive.$$isolateBindings = bindings.isolateScope;\n                    }\n                  }\n                  tDirectives.push(directive);\n                  match = directive;\n                }\n              }\n            }\n            return match;\n          }\n\n          /**\n           * When the element is replaced with HTML template then the new attributes\n           * on the template need to be merged with the existing attributes in the DOM.\n           * The desired effect is to have both of the attributes present.\n           *\n           * @param {object} dst destination attributes (original DOM)\n           * @param {object} src source attributes (from the directive template)\n           */\n          function mergeTemplateAttributes(dst, src) {\n            const srcAttr = src.$attr;\n            const dstAttr = dst.$attr;\n\n            // reapply the old attributes to the new element\n            Object.entries(dst).forEach(([key, value]) => {\n              if (key.charAt(0) !== \"$\") {\n                if (src[key] && src[key] !== value) {\n                  if (value.length) {\n                    value += (key === \"style\" ? \";\" : \" \") + src[key];\n                  } else {\n                    value = src[key];\n                  }\n                }\n                dst.$set(key, value, true, srcAttr[key]);\n              }\n            });\n\n            // copy the new attributes on the old attrs object\n            Object.entries(src).forEach(([key, value]) => {\n              // Check if we already set this attribute in the loop above.\n              // `dst` will never contain hasOwnProperty as DOM parser won't let it.\n              // You will get an \"InvalidCharacterError: DOM Exception 5\" error if you\n              // have an attribute like \"has-own-property\" or \"data-has-own-property\", etc.\n              if (!hasOwn(dst, key) && key.charAt(0) !== \"$\") {\n                dst[key] = value;\n\n                if (key !== \"class\" && key !== \"style\") {\n                  dstAttr[key] = srcAttr[key];\n                }\n              }\n            });\n          }\n\n          /**\n           *\n           * @param {import(\"../../interface.ts\").Directive[]} directives\n           * @param {NodeRef} $compileNode\n           * @param {Attributes} tAttrs\n           * @param {Element} $rootElement\n           * @param {*} childTranscludeFn\n           * @param {Array} preLinkFns\n           * @param {Array} postLinkFns\n           * @param {*} previousCompileContext\n           * @returns\n           */\n          function compileTemplateUrl(\n            directives,\n            $compileNode,\n            tAttrs,\n            $rootElement,\n            childTranscludeFn,\n            preLinkFns,\n            postLinkFns,\n            previousCompileContext,\n          ) {\n            let linkQueue = [];\n            /** @type {any} */\n            let afterTemplateNodeLinkFn;\n            let afterTemplateChildLinkFn;\n            let afterTemplateNodeLinkFnCtx;\n            const beforeTemplateCompileNode = $compileNode.getAny();\n            const origAsyncDirective = directives.shift();\n            const derivedSyncDirective = inherit$1(origAsyncDirective, {\n              templateUrl: null,\n              transclude: null,\n              replace: null,\n              $$originalDirective: origAsyncDirective,\n            });\n            const templateUrl = isFunction(origAsyncDirective.templateUrl)\n              ? /** @type { ((element: Element, tAttrs: Attributes) => string) } */ (\n                  origAsyncDirective.templateUrl\n                )($compileNode.element, tAttrs)\n              : origAsyncDirective.templateUrl;\n            const { templateNamespace } = origAsyncDirective;\n\n            emptyElement($compileNode.element);\n\n            $templateRequest(templateUrl)\n              .then((content) => {\n                /** @type {Element} */\n                let compileNode;\n                let tempTemplateAttrs;\n                let $template;\n                let childBoundTranscludeFn;\n\n                content = denormalizeTemplate(content);\n\n                if (origAsyncDirective.replace) {\n                  if (isTextNode(content)) {\n                    $template = [];\n                  } else if (isString(content)) {\n                    $template = Array.from(\n                      createNodelistFromHTML(content),\n                    ).filter(\n                      (node) =>\n                        node.nodeType !== Node.COMMENT_NODE &&\n                        node.nodeType !== Node.TEXT_NODE,\n                    );\n                  } else {\n                    $template = removeComments(\n                      wrapTemplate(templateNamespace, trim(content)),\n                    );\n                  }\n                  compileNode = $template[0];\n                  if (\n                    $template.length !== 1 ||\n                    compileNode.nodeType !== Node.ELEMENT_NODE\n                  ) {\n                    throw $compileMinErr(\n                      \"tplrt\",\n                      \"Template for directive '{0}' must have exactly one root element. {1}\",\n                      origAsyncDirective.name,\n                      templateUrl,\n                    );\n                  }\n\n                  tempTemplateAttrs = { $attr: {} };\n\n                  replaceWith(\n                    $compileNode,\n                    compileNode,\n                    previousCompileContext.index,\n                  );\n\n                  const templateDirectives = collectDirectives(\n                    compileNode,\n                    tempTemplateAttrs,\n                  );\n\n                  if (isObject(origAsyncDirective.scope)) {\n                    // the original directive that caused the template to be loaded async required\n                    // an isolate scope\n                    markDirectiveScope(templateDirectives, true);\n                  }\n                  directives = templateDirectives.concat(directives);\n\n                  mergeTemplateAttributes(tAttrs, tempTemplateAttrs);\n                } else {\n                  compileNode = /** @type {Element} */ (\n                    beforeTemplateCompileNode\n                  );\n                  $compileNode.element.innerHTML = content;\n                }\n\n                directives.unshift(derivedSyncDirective);\n                afterTemplateNodeLinkFnCtx = applyDirectivesToNode(\n                  directives,\n                  compileNode,\n                  tAttrs,\n                  childTranscludeFn,\n                  origAsyncDirective,\n                  preLinkFns,\n                  postLinkFns,\n                  { ...previousCompileContext, ctxNodeRef: $compileNode },\n                );\n\n                afterTemplateNodeLinkFn = afterTemplateNodeLinkFnCtx?.nodeLinkFn;\n                if ($rootElement) {\n                  Object.entries($rootElement).forEach(([i, node]) => {\n                    if (node === compileNode) {\n                      $rootElement[i] = $compileNode;\n                    }\n                  });\n                }\n                afterTemplateChildLinkFn = compileNodes(\n                  new NodeRef($compileNode.getAny().childNodes),\n                  childTranscludeFn,\n                );\n\n                while (linkQueue.length) {\n                  const scope = linkQueue.shift();\n                  const beforeTemplateLinkNode = linkQueue.shift();\n                  const boundTranscludeFn = linkQueue.shift();\n                  let linkNode = $compileNode.getAny();\n\n                  if (scope.$$destroyed) {\n                    continue;\n                  }\n\n                  if (beforeTemplateLinkNode !== beforeTemplateCompileNode) {\n                    const oldClasses = beforeTemplateLinkNode.className;\n\n                    if (\n                      !(\n                        previousCompileContext.hasElementTranscludeDirective &&\n                        origAsyncDirective.replace\n                      )\n                    ) {\n                      // it was cloned therefore we have to clone as well.\n                      linkNode = compileNode.cloneNode(true);\n                      beforeTemplateLinkNode.appendChild(linkNode);\n                    }\n                    // Copy in CSS classes from original node\n                    try {\n                      if (oldClasses !== \"\") {\n                        $compileNode.element.classList.forEach((cls) =>\n                          beforeTemplateLinkNode.classList.add(cls),\n                        );\n                      }\n                    } catch {\n                      // ignore, since it means that we are trying to set class on\n                      // SVG element, where class name is read-only.\n                    }\n                  }\n                  if (afterTemplateNodeLinkFnCtx.transcludeOnThisElement) {\n                    childBoundTranscludeFn = createBoundTranscludeFn(\n                      scope,\n                      afterTemplateNodeLinkFnCtx.transclude,\n                      boundTranscludeFn,\n                    );\n                  } else {\n                    childBoundTranscludeFn = boundTranscludeFn;\n                  }\n\n                  afterTemplateNodeLinkFn(\n                    afterTemplateChildLinkFn,\n                    scope,\n                    linkNode,\n                    childBoundTranscludeFn,\n                  );\n                }\n                linkQueue = null;\n              })\n              .catch((error) => {\n                if (isError(error)) {\n                  $exceptionHandler(error);\n                } else {\n                  $exceptionHandler(new Error(error));\n                }\n              });\n\n            return function delayedNodeLinkFn(\n              _ignoreChildLinkFn,\n              scope,\n              node,\n              rootElement,\n              boundTranscludeFn,\n            ) {\n              let childBoundTranscludeFn = boundTranscludeFn;\n              if (scope.$$destroyed) {\n                return;\n              }\n              if (linkQueue) {\n                linkQueue.push(scope, node, rootElement);\n              } else {\n                if (afterTemplateNodeLinkFn.transcludeOnThisElement) {\n                  childBoundTranscludeFn = createBoundTranscludeFn(\n                    scope,\n                    afterTemplateNodeLinkFn.transclude,\n                    boundTranscludeFn,\n                  );\n                }\n                afterTemplateNodeLinkFn(\n                  afterTemplateChildLinkFn,\n                  scope,\n                  node,\n                  rootElement,\n                  childBoundTranscludeFn,\n                );\n              }\n            };\n          }\n\n          /**\n           * Sorting function for bound directives.\n           */\n          function byPriority(a, b) {\n            const diff = b.priority - a.priority;\n            if (diff !== 0) {\n              return diff;\n            }\n            if (a.name !== b.name) {\n              return a.name < b.name ? -1 : 1;\n            }\n            return a.index - b.index;\n          }\n\n          function assertNoDuplicate(\n            what,\n            previousDirective,\n            directive,\n            element,\n          ) {\n            function wrapModuleNameIfDefined(moduleName) {\n              return moduleName ? ` (module: ${moduleName})` : \"\";\n            }\n\n            if (previousDirective) {\n              throw $compileMinErr(\n                \"multidir\",\n                \"Multiple directives [{0}{1}, {2}{3}] asking for {4} on: {5}\",\n                previousDirective.name,\n                wrapModuleNameIfDefined(previousDirective.$$moduleName),\n                directive.name,\n                wrapModuleNameIfDefined(directive.$$moduleName),\n                what,\n                startingTag(element.getAny()),\n              );\n            }\n          }\n\n          function addTextInterpolateDirective(directives, text) {\n            const interpolateFn = $interpolate(text, true);\n            if (interpolateFn) {\n              directives.push({\n                priority: 0,\n                compile: () => (scope, node) => {\n                  interpolateFn.expressions.forEach((x) => {\n                    scope.$watch(x, () => {\n                      const res = interpolateFn(\n                        isProxy(scope) ? scope.$target : scope,\n                      );\n                      switch (node.nodeType) {\n                        case 1:\n                          node.innerHTML = res;\n                          break;\n                        default:\n                          node.nodeValue = res;\n                      }\n                    });\n                  });\n                },\n              });\n            }\n          }\n\n          /**\n           * @param {string} type\n           * @param {string} template\n           * @returns\n           */\n          function wrapTemplate(type, template) {\n            type = (type || \"html\").toLowerCase();\n            switch (type) {\n              case \"svg\":\n              case \"math\": {\n                const wrapper =\n                  /** @type {HTMLDivElement} */ document.createElement(\"div\");\n                wrapper.innerHTML = `<${type}>${template}</${type}>`;\n                return wrapper.childNodes[0].childNodes;\n              }\n              default:\n                return template;\n            }\n          }\n\n          function getTrustedAttrContext(nodeName, attrNormalizedName) {\n            if (attrNormalizedName === \"srcdoc\") {\n              return $sce.HTML;\n            }\n            // All nodes with src attributes require a RESOURCE_URL value, except for\n            // img and various html5 media nodes, which require the MEDIA_URL context.\n            if (attrNormalizedName === \"src\" || attrNormalizedName === \"ngSrc\") {\n              if (\n                [\"img\", \"video\", \"audio\", \"source\", \"track\"].indexOf(nodeName) ===\n                -1\n              ) {\n                return $sce.RESOURCE_URL;\n              }\n              return $sce.MEDIA_URL;\n            }\n            if (attrNormalizedName === \"xlinkHref\") {\n              // Some xlink:href are okay, most aren't\n              if (nodeName === \"image\") {\n                return $sce.MEDIA_URL;\n              }\n              if (nodeName === \"a\") {\n                return $sce.URL;\n              }\n              return $sce.RESOURCE_URL;\n            }\n            if (\n              // Formaction\n              (nodeName === \"form\" && attrNormalizedName === \"action\") ||\n              // If relative URLs can go where they are not expected to, then\n              // all sorts of trust issues can arise.\n              (nodeName === \"base\" && attrNormalizedName === \"href\") ||\n              // links can be stylesheets or imports, which can run script in the current origin\n              (nodeName === \"link\" && attrNormalizedName === \"href\")\n            ) {\n              return $sce.RESOURCE_URL;\n            }\n            if (\n              nodeName === \"a\" &&\n              (attrNormalizedName === \"href\" || attrNormalizedName === \"ngHref\")\n            ) {\n              return $sce.URL;\n            }\n          }\n\n          function getTrustedPropContext(nodeName, propNormalizedName) {\n            const prop = propNormalizedName.toLowerCase();\n            return (\n              PROP_CONTEXTS[`${nodeName}|${prop}`] || PROP_CONTEXTS[`*|${prop}`]\n            );\n          }\n\n          function sanitizeSrcset(value, invokeType) {\n            if (!value) {\n              return value;\n            }\n            if (!isString(value)) {\n              throw $compileMinErr(\n                \"srcset\",\n                'Can\\'t pass trusted values to `{0}`: \"{1}\"',\n                invokeType,\n                value.toString(),\n              );\n            }\n\n            // Such values are a bit too complex to handle automatically inside $sce.\n            // Instead, we sanitize each of the URIs individually, which works, even dynamically.\n            // It's not possible to work around this using `$sce.trustAsMediaUrl`.\n            // If you want to programmatically set explicitly trusted unsafe URLs, you should use\n            // `$sce.trustAsHtml` on the whole `img` tag and inject it into the DOM using the\n            // `ng-bind-html` directive.\n            let result = \"\";\n\n            // first check if there are spaces because it's not the same pattern\n            const trimmedSrcset = trim(value);\n            //                (   999x   ,|   999w   ,|   ,|,   )\n            const srcPattern = /(\\s+\\d+x\\s*,|\\s+\\d+w\\s*,|\\s+,|,\\s+)/;\n            const pattern = /\\s/.test(trimmedSrcset) ? srcPattern : /(,)/;\n\n            // split srcset into tuple of uri and descriptor except for the last item\n            const rawUris = trimmedSrcset.split(pattern);\n\n            // for each tuples\n            const nbrUrisWith2parts = Math.floor(rawUris.length / 2);\n            let i;\n            for (i = 0; i < nbrUrisWith2parts; i++) {\n              const innerIdx = i * 2;\n              // sanitize the uri\n              result += $sce.getTrustedMediaUrl(trim(rawUris[innerIdx]));\n              // add the descriptor\n              result += \" \" + trim(rawUris[innerIdx + 1]);\n            }\n\n            // split the last item into uri and descriptor\n            const lastTuple = trim(rawUris[i * 2]).split(/\\s/);\n\n            // sanitize the last uri\n            result += $sce.getTrustedMediaUrl(trim(lastTuple[0]));\n\n            // and add the last descriptor if any\n            if (lastTuple.length === 2) {\n              result += \" \" + trim(lastTuple[1]);\n            }\n            return result;\n          }\n\n          function addPropertyDirective(node, directives, attrName, propName) {\n            if (EVENT_HANDLER_ATTR_REGEXP.test(propName)) {\n              throw $compileMinErr(\n                \"nodomevents\",\n                \"Property bindings for HTML DOM event properties are disallowed\",\n              );\n            }\n\n            const nodeName = getNodeName(node);\n            const trustedContext = getTrustedPropContext(nodeName, propName);\n\n            let sanitizer = (x) => x;\n            // Sanitize img[srcset] + source[srcset] values.\n            if (\n              propName === \"srcset\" &&\n              (nodeName === \"img\" || nodeName === \"source\")\n            ) {\n              sanitizer = (value) =>\n                sanitizeSrcset($sce.valueOf(value), \"ng-prop-srcset\");\n            } else if (trustedContext) {\n              sanitizer = $sce.getTrusted.bind($sce, trustedContext);\n            }\n\n            directives.push({\n              priority: 100,\n              compile: function ngPropCompileFn(_, attr) {\n                const ngPropGetter = $parse(attr[attrName]);\n                return {\n                  pre: function ngPropPreLinkFn(scope, $element) {\n                    function applyPropValue() {\n                      const propValue = ngPropGetter(scope);\n                      $element[propName] = sanitizer(propValue);\n                    }\n\n                    applyPropValue();\n                    scope.$watch(propName, applyPropValue);\n                    scope.$watch(attr[attrName], (val) => {\n                      $sce.valueOf(val);\n                      applyPropValue();\n                    });\n                  },\n                };\n              },\n            });\n          }\n\n          function addAttrInterpolateDirective(\n            node,\n            directives,\n            value,\n            name,\n            isNgAttr,\n          ) {\n            const nodeName = getNodeName(node);\n            const trustedContext = getTrustedAttrContext(nodeName, name);\n            const mustHaveExpression = !isNgAttr;\n            const allOrNothing = ALL_OR_NOTHING_ATTRS.includes(name) || isNgAttr;\n\n            let interpolateFn = $interpolate(\n              value,\n              mustHaveExpression,\n              trustedContext,\n              allOrNothing,\n            );\n\n            // no interpolation found -> ignore\n            if (!interpolateFn) {\n              return;\n            }\n\n            if (name === \"multiple\" && nodeName === \"select\") {\n              throw $compileMinErr(\n                \"selmulti\",\n                \"Binding to the 'multiple' attribute is not supported. Element: {0}\",\n                startingTag(node.outerHTML),\n              );\n            }\n\n            if (EVENT_HANDLER_ATTR_REGEXP.test(name)) {\n              throw $compileMinErr(\n                \"nodomevents\",\n                \"Interpolations for HTML DOM event attributes are disallowed\",\n              );\n            }\n\n            directives.push({\n              priority: 100,\n              compile() {\n                return {\n                  pre: function attrInterpolatePreLinkFn(scope, element, attr) {\n                    const $$observers =\n                      attr.$$observers ||\n                      (attr.$$observers = Object.create(null));\n\n                    // If the attribute has changed since last $interpolate()ed\n                    const newValue = attr[name];\n                    if (newValue !== value) {\n                      // we need to interpolate again since the attribute value has been updated\n                      // (e.g. by another directive's compile function)\n                      // ensure unset/empty values make interpolateFn falsy\n                      interpolateFn =\n                        newValue &&\n                        $interpolate(\n                          newValue,\n                          true,\n                          trustedContext,\n                          allOrNothing,\n                        );\n                      value = newValue;\n                    }\n\n                    // if attribute was updated so that there is no interpolation going on we don't want to\n                    // register any observers\n                    if (!interpolateFn) {\n                      return;\n                    }\n\n                    // initialize attr object so that it's ready in case we need the value for isolate\n                    // scope initialization, otherwise the value would not be available from isolate\n                    // directive's linking fn during linking phase\n                    attr[name] = interpolateFn(scope);\n\n                    ($$observers[name] || ($$observers[name] = [])).$$inter =\n                      true;\n                    interpolateFn.expressions.forEach((x) => {\n                      const targetScope =\n                        (attr.$$observers && attr.$$observers[name].$$scope) ||\n                        scope;\n                      targetScope.$watch(x, () => {\n                        let newValue = interpolateFn(scope);\n                        // special case for class attribute addition + removal\n                        // so that class changes can tap into the animation\n                        // hooks provided by the $animate service. Be sure to\n                        // skip animations when the first digest occurs (when\n                        // both the new and the old values are the same) since\n                        // the CSS classes are the non-interpolated values\n                        if (name === \"class\") {\n                          attr.$updateClass(\n                            newValue,\n                            attr.$$element.classList.value,\n                          );\n                        } else {\n                          attr.$set(name, newValue);\n                        }\n                      });\n                    });\n\n                    if (interpolateFn.expressions.length == 0) {\n                      // if there is nothing to watch, its a constant\n                      attr.$set(name, newValue);\n                    }\n                  },\n                };\n              },\n            });\n          }\n\n          /**\n           *\n           * @param {NodeRef} elementsToRemove The JQLite element which we are going to replace. We keep\n           *                                  the shell, but replace its DOM node reference.\n           * @param {Node} newNode The new DOM node.\n           * @param {number} [index] Parent node index.\n           */\n          function replaceWith(elementsToRemove, newNode, index) {\n            const firstElementToRemove = elementsToRemove.getAny();\n            // const removeCount = elementsToRemove.length;\n            const parent = firstElementToRemove.parentNode;\n\n            if (parent) {\n              if (isDefined(index)) {\n                const oldChild = parent.childNodes[index];\n                if (oldChild) {\n                  parent.replaceChild(newNode, oldChild);\n                }\n              } else {\n                parent.insertBefore(newNode, parent.firstChild);\n                //parent.append(newNode);\n              }\n            }\n\n            // Append all the `elementsToRemove` to a fragment. This will...\n            // - remove them from the DOM\n            // - allow them to still be traversed with .nextSibling\n            // - allow a single fragment.qSA to fetch all elements being removed\n            const fragment = document.createDocumentFragment();\n            elementsToRemove.collection().forEach((element) => {\n              fragment.appendChild(element);\n            });\n\n            elementsToRemove.node = newNode;\n          }\n\n          function cloneAndAnnotateFn(fn, annotation) {\n            return extend(\n              function () {\n                return fn.apply(null, arguments);\n              },\n              fn,\n              annotation,\n            );\n          }\n\n          function strictBindingsCheck(attrName, directiveName) {\n            if (strictComponentBindingsEnabled) {\n              throw $compileMinErr(\n                \"missingattr\",\n                \"Attribute '{0}' of '{1}' is non-optional and must be set!\",\n                attrName,\n                directiveName,\n              );\n            }\n          }\n\n          // Set up $watches for isolate scope and controller bindings.\n          /**\n           *\n           * @param {import('../scope/scope.js').Scope} scope\n           * @param {*} attrs\n           * @param {import('../scope/scope.js').Scope}  destination - child scope or isolate scope\n           * @param {*} bindings\n           * @param {*} directive\n           * @returns\n           */\n          function initializeDirectiveBindings(\n            scope,\n            attrs,\n            destination,\n            bindings,\n            directive,\n          ) {\n            const removeWatchCollection = [];\n            const initialChanges = {};\n            let changes;\n\n            if (bindings) {\n              Object.entries(bindings).forEach(([scopeName, definition]) => {\n                const {\n                  attrName,\n                  optional,\n                  mode, // @, =, <, or &\n                } = definition;\n                let lastValue;\n                let parentGet;\n                let parentSet;\n                let compare;\n                let removeWatch;\n                let firstCall = true;\n                let firstChange = true;\n\n                switch (mode) {\n                  case \"@\":\n                    if (!optional && !hasOwn(attrs, attrName)) {\n                      strictBindingsCheck(attrName, directive.name);\n                      destination[scopeName] = attrs[attrName] = undefined;\n                    }\n\n                    removeWatch = attrs.$observe(attrName, (value) => {\n                      if (isString(value) || isBoolean(value)) {\n                        recordChanges(scopeName, value, firstChange);\n\n                        destination[scopeName] = value;\n                        if (firstCall) {\n                          firstCall = false;\n                        } else {\n                          triggerOnChangesHook();\n                          firstChange = false;\n                        }\n                      }\n                    });\n                    attrs.$$observers[attrName].$$scope = scope;\n                    lastValue = attrs[attrName];\n                    if (isString(lastValue)) {\n                      // If the attribute has been provided then we trigger an interpolation to ensure\n                      // the value is there for use in the link fn\n                      destination[scopeName] = $interpolate(lastValue)(scope);\n                    } else if (isBoolean(lastValue)) {\n                      // If the attributes is one of the BOOLEAN_ATTR then AngularTS will have converted\n                      // the value to boolean rather than a string, so we special case this situation\n                      destination[scopeName] = lastValue;\n                    }\n\n                    /**\n                     * @type {SimpleChange}\n                     */\n                    initialChanges[scopeName] = {\n                      currentValue: destination[scopeName],\n                      firstChange: true,\n                    };\n                    removeWatchCollection.push(removeWatch);\n                    break;\n\n                  case \"=\": {\n                    if (!hasOwn(attrs, attrName)) {\n                      if (optional) {\n                        break;\n                      }\n                      strictBindingsCheck(attrName, directive.name);\n                      attrs[attrName] = undefined;\n                    }\n                    if (optional && !attrs[attrName]) {\n                      break;\n                    }\n\n                    parentGet = $parse(attrs[attrName]);\n                    if (parentGet.literal) {\n                      compare = equals$1;\n                    } else {\n                      compare = simpleCompare;\n                    }\n\n                    parentSet =\n                      parentGet.assign ||\n                      function () {\n                        // reset the change, or we will throw this exception on every $digest\n                        lastValue = destination.$target[scopeName] =\n                          parentGet(scope);\n                        throw $compileMinErr(\n                          \"nonassign\",\n                          \"Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!\",\n                          attrs[attrName],\n                          attrName,\n                          directive.name,\n                        );\n                      };\n                    // store the value that the parent scope had after the last check:\n                    lastValue = destination.$target[scopeName] = parentGet(\n                      scope.$target,\n                    );\n                    const parentValueWatch = function parentValueWatch(\n                      parentValue,\n                    ) {\n                      if (!compare(parentValue, destination[scopeName])) {\n                        // we are out of sync and need to copy\n                        if (!compare(parentValue, lastValue)) {\n                          // parent changed and it has precedence\n                          destination[scopeName] = parentValue;\n                        } else {\n                          // if the parent can be assigned then do so\n                          parentSet(\n                            scope,\n                            (parentValue = destination[scopeName]),\n                          );\n                        }\n                      }\n                      lastValue = parentValue;\n                      return lastValue;\n                    };\n                    parentValueWatch.$stateful = true;\n                    if (definition.collection) {\n                      removeWatch = scope.$watch(\n                        attrs[attrName],\n                        parentValueWatch,\n                      );\n                    } else {\n                      if (attrs[attrName]) {\n                        let expr = attrs[attrName];\n                        // make it lazy as we dont want to trigger the two way data binding at this point\n                        scope.$watch(\n                          expr,\n                          (val) => {\n                            const res = $parse(attrs[attrName], parentValueWatch);\n                            if (val) {\n                              if (parentGet.literal) {\n                                scope.$target[attrName] = val;\n                              } else {\n                                scope[attrName] = val;\n                              }\n                              res(scope);\n                            } else {\n                              scope[attrName] = scope[attrs[attrName]];\n                            }\n                          },\n                          true,\n                        );\n                      }\n\n                      removeWatch = destination.$watch(\n                        attrName,\n                        (val) => {\n                          if (\n                            val === lastValue &&\n                            !isUndefined(attrs[attrName])\n                          ) {\n                            return;\n                          }\n                          if (\n                            (!!parentGet.inputs && !parentGet.literal) ||\n                            (isUndefined(attrs[attrName]) && isDefined(val))\n                          ) {\n                            destination.$target[attrName] = lastValue;\n                            throw $compileMinErr(\n                              \"nonassign\",\n                              \"Expression '{0}' in attribute '{1}' used with directive '{2}' is non-assignable!\",\n                              attrs[attrName],\n                              attrName,\n                              directive.name,\n                            );\n                          } else {\n                            // manually set the handler to avoid watch cycles\n                            if (isObject(val)) {\n                              Object.entries(val).forEach(([key, value]) => {\n                                scope.$target[key] = value;\n                              });\n                            } else {\n                              parentSet(scope.$target, (lastValue = val));\n                              scope.$handler.watchers\n                                .get(attrs[attrName])\n                                ?.forEach((watchFn) => {\n                                  watchFn.listenerFn(val);\n                                });\n                            }\n                          }\n                        },\n                        true,\n                      );\n                    }\n                    removeWatchCollection.push(removeWatch);\n                    break;\n                  }\n\n                  case \"<\":\n                    if (!hasOwn(attrs, attrName)) {\n                      if (optional) {\n                        break;\n                      }\n                      strictBindingsCheck(attrName, directive.name);\n                      attrs[attrName] = undefined;\n                    }\n                    if (optional && !attrs[attrName]) {\n                      break;\n                    }\n\n                    parentGet = $parse(attrs[attrName]);\n\n                    destination.$target[scopeName] = parentGet(scope.$target);\n                    /** @type {SimpleChange} */\n                    initialChanges[scopeName] = {\n                      currentValue: destination.$target[scopeName],\n                      firstChange: firstChange,\n                    };\n                    scope.$target.attrs = attrs;\n\n                    if (attrs[attrName]) {\n                      removeWatch = scope.$watch(\n                        attrs[attrName],\n                        (val) => {\n                          destination.$target[scopeName] = val;\n                          recordChanges(scopeName, val, firstChange);\n                          if (firstChange) {\n                            firstChange = false;\n                          }\n                        },\n                        true,\n                      );\n                      removeWatchCollection.push(removeWatch);\n                    }\n                    break;\n\n                  case \"&\":\n                    if (!optional && !hasOwn(attrs, attrName)) {\n                      strictBindingsCheck(attrName, directive.name);\n                    }\n                    // Don't assign Object.prototype method to scope\n                    parentGet = hasOwn(attrs, attrName)\n                      ? $parse(attrs[attrName])\n                      : () => {};\n\n                    // Don't assign noop to destination if expression is not valid\n                    if (\n                      parentGet.toString() === (() => {}).toString() &&\n                      optional\n                    ) {\n                      break;\n                    }\n\n                    destination.$target[scopeName] = function (locals) {\n                      return parentGet(scope.$target, locals);\n                    };\n\n                    break;\n                }\n              });\n            }\n\n            function recordChanges(key, currentValue, initial) {\n              if (isFunction(destination[\"$onChanges\"])) {\n                // If we have not already scheduled the top level onChangesQueue handler then do so now\n                if (!onChangesQueue) {\n                  scope.$postUpdate(flushOnChangesQueue);\n                  onChangesQueue = [];\n                }\n                // If we have not already queued a trigger of onChanges for this controller then do so now\n                if (!changes) {\n                  changes = {};\n                  onChangesQueue.push(triggerOnChangesHook);\n                }\n                // Store this change\n                changes[key] = {\n                  currentValue: currentValue,\n                  firstChange: initial,\n                };\n              }\n            }\n\n            function triggerOnChangesHook() {\n              destination[\"$onChanges\"] &&\n                changes &&\n                destination[\"$onChanges\"](changes);\n              // Now clear the changes so that we schedule onChanges when more changes arrive\n              changes = undefined;\n            }\n\n            return {\n              initialChanges,\n              removeWatches:\n                removeWatchCollection.length &&\n                function removeWatches() {\n                  for (\n                    let i = 0, ii = removeWatchCollection.length;\n                    i < ii;\n                    ++i\n                  ) {\n                    removeWatchCollection[i]();\n                  }\n                },\n            };\n          }\n        },\n      ];\n    }\n  }\n\n  function removeComments(jqNodes) {\n    let i = jqNodes.length;\n\n    if (i <= 1) {\n      return jqNodes;\n    }\n\n    while (i--) {\n      const node = jqNodes[i];\n      if (\n        node.nodeType === Node.COMMENT_NODE ||\n        (node.nodeType === Node.TEXT_NODE && node.nodeValue.trim() === \"\")\n      ) {\n        [].splice.call(jqNodes, i, 1);\n      }\n    }\n    return jqNodes;\n  }\n\n  /**\n   * @param {String} name\n   * @returns {void}\n   */\n  function assertValidDirectiveName(name) {\n    const letter = name.charAt(0);\n    if (!letter || letter !== lowercase(letter)) {\n      throw $compileMinErr(\n        \"baddir\",\n        \"Directive/Component name '{0}' is invalid. The first character must be a lowercase letter\",\n        name,\n      );\n    }\n    if (name !== name.trim()) {\n      throw $compileMinErr(\n        \"baddir\",\n        \"Directive/Component name '{0}' is invalid. The name should not contain leading or trailing whitespaces\",\n        name,\n      );\n    }\n  }\n\n  /**\n   * @type {{\n   *   $nonscope: boolean,\n   *   $addControl: Function,\n   *   $getControls: () => any[],\n   *   $$renameControl: Function,\n   *   $removeControl: Function,\n   *   $setValidity: Function | ((key: any, isValid: boolean, control: any) => any),\n   *   $setDirty: Function,\n   *   $setPristine: Function,\n   *   $setSubmitted: Function,\n   *   $$setSubmitted: Function\n   * }}\n   */\n  const nullFormCtrl = {\n    $nonscope: true,\n    $addControl: () => {},\n    $getControls: () => [],\n    $$renameControl: (control, name) => {\n      control.$name = name;\n    },\n    $removeControl: () => {},\n    $setValidity: () => {},\n    $setDirty: () => {},\n    $setPristine: () => {},\n    $setSubmitted: () => {},\n    $$setSubmitted: () => {},\n  };\n\n  const PENDING_CLASS = \"ng-pending\";\n  const SUBMITTED_CLASS = \"ng-submitted\";\n\n  /**\n   * @property {boolean} $dirty True if user has already interacted with the form.\n   * @property {boolean} $valid True if all of the containing forms and controls are valid.\n   * @property {boolean} $invalid True if at least one containing control or form is invalid.\n   * @property {boolean} $submitted True if user has submitted the form even if its invalid.\n   *\n   * @property {Object} $pending An object hash, containing references to controls or forms with\n   *  pending validators, where:\n   *\n   *  - keys are validations tokens (error names).\n   *  - values are arrays of controls or forms that have a pending validator for the given error name.\n   *\n   * See {@link form.FormController#$error $error} for a list of built-in validation tokens.\n   *\n   * @property {Object} $error An object hash, containing references to controls or forms with failing\n   *  validators, where:\n   *\n   *  - keys are validation tokens (error names),\n   *  - values are arrays of controls or forms that have a failing validator for the given error name.\n   *\n   *  Built-in validation tokens:\n   *  - `email`\n   *  - `max`\n   *  - `maxlength`\n   *  - `min`\n   *  - `minlength`\n   *  - `number`\n   *  - `pattern`\n   *  - `required`\n   *  - `url`\n   *  - `date`\n   *  - `datetimelocal`\n   *  - `time`\n   *  - `week`\n   *  - `month`\n   *\n   * @description\n   * `FormController` keeps track of all its controls and nested forms as well as the state of them,\n   * such as being valid/invalid or dirty/pristine.\n   *\n   * Each {@link ng.directive:form form} directive creates an instance\n   * of `FormController`.\n   *\n   */\n  // asks for $scope to fool the BC controller module\n\n  class FormController {\n    static $nonscope = true;\n    /* @ignore */ static $inject = [\n      \"$element\",\n      \"$attrs\",\n      \"$scope\",\n      \"$animate\",\n      \"$interpolate\",\n    ];\n\n    /**\n     * @param {Element} $element\n     * @param {import(\"../../core/compile/attributes.js\").Attributes} $attrs\n     * @param {import(\"../../core/scope/scope.js\").Scope} $scope\n     * @param {*} $animate\n     * @param {*} $interpolate\n     */\n    constructor($element, $attrs, $scope, $animate, $interpolate) {\n      this.$$controls = [];\n\n      this.$name = $interpolate($attrs[\"name\"] || $attrs[\"ngForm\"] || \"\")($scope);\n\n      /**\n       * @property {boolean} $dirty True if user has already interacted with the form.\n       */\n      this.$dirty = false;\n\n      /**\n       * @propertys {boolean} $pristine - True if user has not interacted with the form yet.s\n       */\n      this.$pristine = true;\n      this.$valid = true;\n      this.$invalid = false;\n      this.$submitted = false;\n      /** @type {FormController|Object} */\n      this.$$parentForm = nullFormCtrl;\n\n      this.$$element = $element;\n      this.$$animate = $animate;\n      this.$error = {};\n      this.$$success = {};\n      this.$pending = undefined;\n      this.$$classCache = {};\n      const isValid = this.$$element.classList.contains(VALID_CLASS);\n      this.$$classCache[VALID_CLASS] = isValid;\n      this.$$classCache[INVALID_CLASS] = !isValid;\n    }\n\n    /**\n     * Rollback all form controls pending updates to the `$modelValue`.\n     *\n     * Updates may be pending by a debounced event or because the input is waiting for a some future\n     * event defined in `ng-model-options`. This method is typically needed by the reset button of\n     * a form that uses `ng-model-options` to pend updates.\n     */\n    $rollbackViewValue() {\n      this.$$controls.forEach((control) => {\n        control.$rollbackViewValue();\n      });\n    }\n\n    /**\n     * Commit all form controls pending updates to the `$modelValue`.\n     *\n     * Updates may be pending by a debounced event or because the input is waiting for a some future\n     * event defined in `ng-model-options`. This method is rarely needed as `NgModelController`\n     * usually handles calling this in response to input events.\n     */\n    $commitViewValue() {\n      this.$$controls.forEach((control) => {\n        control.$commitViewValue();\n      });\n    }\n\n    /**\n     * Register a control with the form. Input elements using ngModelController do this automatically\n     * when they are linked.\n     *\n     * Note that the current state of the control will not be reflected on the new parent form. This\n     * is not an issue with normal use, as freshly compiled and linked controls are in a `$pristine`\n     * state.\n     *\n     * However, if the method is used programmatically, for example by adding dynamically created controls,\n     * or controls that have been previously removed without destroying their corresponding DOM element,\n     * it's the developers responsibility to make sure the current state propagates to the parent form.\n     *\n     * For example, if an input control is added that is already `$dirty` and has `$error` properties,\n     * calling `$setDirty()` and `$validate()` afterwards will propagate the state to the parent form.\n     */\n    $addControl(control) {\n      // Breaking change - before, inputs whose name was \"hasOwnProperty\" were quietly ignored\n      // and not added to the scope.  Now we throw an error.\n      assertNotHasOwnProperty(control.$name, \"input\");\n      this.$$controls.push(control);\n\n      if (control.$name) {\n        this[control.$name] = control;\n      }\n      control.$target.$$parentForm = this;\n    }\n\n    /**\n     * This method returns a **shallow copy** of the controls that are currently part of this form.\n     * The controls can be instances of {@link form.FormController `FormController`}\n     * ({@link ngForm \"child-forms\"}) and of {@link ngModel.NgModelController `NgModelController`}.\n     * If you need access to the controls of child-forms, you have to call `$getControls()`\n     * recursively on them.\n     * This can be used for example to iterate over all controls to validate them.\n     *\n     * The controls can be accessed normally, but adding to, or removing controls from the array has\n     * no effect on the form. Instead, use {@link form.FormController#$addControl `$addControl()`} and\n     * {@link form.FormController#$removeControl `$removeControl()`} for this use-case.\n     * Likewise, adding a control to, or removing a control from the form is not reflected\n     * in the shallow copy. That means you should get a fresh copy from `$getControls()` every time\n     * you need access to the controls.\n     */\n    $getControls() {\n      return shallowCopy(this.$$controls);\n    }\n\n    // Private API: rename a form control\n    $$renameControl(control, newName) {\n      const oldName = control.$name;\n\n      if (this[oldName] === control) {\n        delete this[oldName];\n      }\n      this[newName] = control;\n      control.$name = newName;\n    }\n\n    /**\n     * Deregister a control from the form.\n     *\n     * Input elements using ngModelController do this automatically when they are destroyed.\n     *\n     * Note that only the removed control's validation state (`$errors`etc.) will be removed from the\n     * form. `$dirty`, `$submitted` states will not be changed, because the expected behavior can be\n     * different from case to case. For example, removing the only `$dirty` control from a form may or\n     * may not mean that the form is still `$dirty`.\n     */\n    $removeControl(control) {\n      if (control.$name && this[control.$name] === control) {\n        delete this[control.$name];\n      }\n      this.$pending &&\n        Object.keys(this.$pending).forEach((name) => {\n          this.$setValidity(name, null, control);\n        });\n      this.$error &&\n        Object.keys(this.$error).forEach((name) => {\n          this.$setValidity(name, null, control);\n        });\n      this.$$success &&\n        Object.keys(this.$$success).forEach((name) => {\n          this.$setValidity(name, null, control);\n        });\n\n      arrayRemove(this.$$controls, control);\n\n      control.$target[\"$$parentForm\"] = nullFormCtrl;\n    }\n\n    /**\n     * Sets the form to a dirty state.\n     *\n     * This method can be called to add the 'ng-dirty' class and set the form to a dirty\n     * state (ng-dirty class). This method will also propagate to parent forms.\n     */\n    $setDirty() {\n      this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);\n      this.$$animate.addClass(this.$$element, DIRTY_CLASS);\n      this.$dirty = true;\n      this.$pristine = false;\n      this.$$parentForm.$setDirty();\n    }\n\n    /**\n     * Sets the form to its pristine state.\n     *\n     * This method sets the form's `$pristine` state to true, the `$dirty` state to false, removes\n     * the `ng-dirty` class and adds the `ng-pristine` class. Additionally, it sets the `$submitted`\n     * state to false.\n     *\n     * This method will also propagate to all the controls contained in this form.\n     *\n     * Setting a form back to a pristine state is often useful when we want to 'reuse' a form after\n     * saving or resetting it.\n     */\n    $setPristine() {\n      this.$$animate.setClass(\n        this.$$element,\n        PRISTINE_CLASS,\n        `${DIRTY_CLASS} ${SUBMITTED_CLASS}`,\n      );\n      this.$dirty = false;\n      this.$pristine = true;\n      this.$submitted = false;\n      this.$$controls.forEach((control) => {\n        control.$setPristine();\n      });\n    }\n\n    /**\n     * Sets the form to its untouched state.\n     *\n     * This method can be called to remove the 'ng-touched' class and set the form controls to their\n     * untouched state (ng-untouched class).\n     *\n     * Setting a form controls back to their untouched state is often useful when setting the form\n     * back to its pristine state.\n     */\n    $setUntouched() {\n      this.$$controls.forEach((control) => {\n        control.$setUntouched();\n      });\n    }\n\n    /**\n     * Sets the form to its `$submitted` state. This will also set `$submitted` on all child and\n     * parent forms of the form.\n     */\n    $setSubmitted() {\n      /** @type {FormController} */\n      let rootForm = this;\n      while (rootForm.$$parentForm && rootForm.$$parentForm !== nullFormCtrl) {\n        rootForm = rootForm.$$parentForm;\n      }\n      rootForm.$$setSubmitted();\n    }\n\n    $$setSubmitted() {\n      this.$$animate.addClass(this.$$element, SUBMITTED_CLASS);\n      this.$submitted = true;\n      this.$$controls.forEach((control) => {\n        if (control.$$setSubmitted) {\n          control.$$setSubmitted();\n        }\n      });\n    }\n\n    set(object, property, controller) {\n      const list = object[property];\n      if (!list) {\n        if (isProxy(object)) {\n          object = object.$target;\n        }\n        object[property] = [controller];\n      } else {\n        const index = list.indexOf(controller);\n        if (index === -1) {\n          list.push(controller);\n        }\n      }\n    }\n\n    unset(object, property, controller) {\n      const list = object[property];\n      if (!list) {\n        return;\n      }\n      const index = arrayRemove(list, controller);\n      if (index === -1) {\n        arrayRemove(list, controller.$target);\n      }\n      if (list.length === 0) {\n        delete object[property];\n      }\n    }\n\n    /**\n     * Change the validity state of the form, and notify the parent form (if any).\n     *\n     * Application developers will rarely need to call this method directly. It is used internally, by\n     * {@link ngModel.NgModelController#$setValidity NgModelController.$setValidity()}, to propagate a\n     * control's validity state to the parent `FormController`.\n     *\n     * @param {string} validationErrorKey Name of the validator. The `validationErrorKey` will be\n     *        assigned to either `$error[validationErrorKey]` or `$pending[validationErrorKey]` (for\n     *        unfulfilled `$asyncValidators`), so that it is available for data-binding. The\n     *        `validationErrorKey` should be in camelCase and will get converted into dash-case for\n     *        class name. Example: `myError` will result in `ng-valid-my-error` and\n     *        `ng-invalid-my-error` classes and can be bound to as `{{ someForm.$error.myError }}`.\n     * @param {boolean} state Whether the current state is valid (true), invalid (false), pending\n     *        (undefined),  or skipped (null). Pending is used for unfulfilled `$asyncValidators`.\n     *        Skipped is used by AngularTS when validators do not run because of parse errors and when\n     *        `$asyncValidators` do not run because any of the `$validators` failed.\n     * @param {import(\"../model/model.js\").NgModelController | FormController} controller - The controller whose validity state is\n     *        triggering the change.\n     */\n    $setValidity(validationErrorKey, state, controller) {\n      let that = this;\n      if (isUndefined(state)) {\n        createAndSet(this, \"$pending\", validationErrorKey, controller);\n      } else {\n        unsetAndCleanup(this, \"$pending\", validationErrorKey, controller);\n      }\n      if (!isBoolean(state)) {\n        this.unset(this.$error, validationErrorKey, controller);\n        this.unset(this.$$success, validationErrorKey, controller);\n      } else if (state) {\n        this.unset(this.$error, validationErrorKey, controller);\n        this.set(this.$$success, validationErrorKey, controller);\n      } else {\n        this.set(this.$error, validationErrorKey, controller);\n        this.unset(this.$$success, validationErrorKey, controller);\n      }\n      if (this.$pending) {\n        cachedToggleClass(this, PENDING_CLASS, true);\n        this.$valid = this.$invalid = undefined;\n        toggleValidationCss(this, \"\", null);\n      } else {\n        cachedToggleClass(this, PENDING_CLASS, false);\n        this.$valid = isObjectEmpty(this.$error);\n        this.$invalid = !this.$valid;\n        toggleValidationCss(this, \"\", this.$valid);\n      }\n\n      // re-read the state as the set/unset methods could have\n      // combined state in this.$error[validationError] (used for forms),\n      // where setting/unsetting only increments/decrements the value,\n      // and does not replace it.\n      let combinedState;\n      if (this.$pending && this.$pending[validationErrorKey]) {\n        combinedState = undefined;\n      } else if (this.$error[validationErrorKey]) {\n        combinedState = false;\n      } else if (this.$$success[validationErrorKey]) {\n        combinedState = true;\n      } else {\n        combinedState = null;\n      }\n\n      toggleValidationCss(this, validationErrorKey, combinedState);\n      this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);\n      function createAndSet(ctrl, name, value, controller) {\n        if (!ctrl[name]) {\n          ctrl[name] = {};\n        }\n        that.set(ctrl[name], value, controller);\n      }\n\n      function unsetAndCleanup(ctrl, name, value, controller) {\n        if (ctrl[name]) {\n          that.unset(ctrl[name], value, controller);\n        }\n        if (isObjectEmpty(ctrl[name])) {\n          ctrl[name] = undefined;\n        }\n      }\n\n      function cachedToggleClass(ctrl, className, switchValue) {\n        if (switchValue && !ctrl.$$classCache[className]) {\n          ctrl.$$animate.addClass(ctrl.$$element, className);\n          ctrl.$$classCache[className] = true;\n        } else if (!switchValue && ctrl.$$classCache[className]) {\n          ctrl.$$animate.removeClass(ctrl.$$element, className);\n          ctrl.$$classCache[className] = false;\n        }\n      }\n\n      function toggleValidationCss(ctrl, validationErrorKey, isValid) {\n        validationErrorKey = validationErrorKey\n          ? `-${snakeCase(validationErrorKey, \"-\")}`\n          : \"\";\n\n        cachedToggleClass(\n          ctrl,\n          VALID_CLASS + validationErrorKey,\n          isValid === true,\n        );\n        cachedToggleClass(\n          ctrl,\n          INVALID_CLASS + validationErrorKey,\n          isValid === false,\n        );\n      }\n    }\n  }\n\n  /**\n   * Helper directive that makes it possible to create control groups inside a\n   * {@link ng.directive:form `form`} directive.\n   * These \"child forms\" can be used, for example, to determine the validity of a sub-group of\n   * controls.\n   *\n   * <div class=\"alert alert-danger\">\n   * **Note**: `ngForm` cannot be used as a replacement for `<form>`, because it lacks its\n   * [built-in HTML functionality](https://html.spec.whatwg.org/#the-form-element).\n   * Specifically, you cannot submit `ngForm` like a `<form>` tag. That means,\n   * you cannot send data to the server with `ngForm`, or integrate it with\n   * {@link ng.directive:ngSubmit `ngSubmit`}.\n   * </div>\n   *\n   * @param {string=} ngForm|name Name of the form. If specified, the form controller will\n   *                              be published into the related scope, under this name.\n   *\n   */\n\n  /**\n   * Directive that instantiates\n   * {@link form.FormController FormController}.\n   *\n   * If the `name` attribute is specified, the form controller is published onto the current scope under\n   * this name.\n   *\n   * ## Alias: {@link ng.directive:ngForm `ngForm`}\n   *\n   * In AngularTS, forms can be nested. This means that the outer form is valid when all of the child\n   * forms are valid as well. However, browsers do not allow nesting of `<form>` elements, so\n   * AngularTS provides the {@link ng.directive:ngForm `ngForm`} directive, which behaves identically to\n   * `form` but can be nested. Nested forms can be useful, for example, if the validity of a sub-group\n   * of controls needs to be determined.\n   *\n   * ## CSS classes\n   *  - `ng-valid` is set if the form is valid.\n   *  - `ng-invalid` is set if the form is invalid.\n   *  - `ng-pending` is set if the form is pending.\n   *  - `ng-pristine` is set if the form is pristine.\n   *  - `ng-dirty` is set if the form is dirty.\n   *  - `ng-submitted` is set if the form was submitted.\n   *\n   * Keep in mind that ngAnimate can detect each of these classes when added and removed.\n   *\n   *\n   * ## Submitting a form and preventing the default action\n   *\n   * Since the role of forms in client-side AngularTS applications is different than in classical\n   * roundtrip apps, it is desirable for the browser not to translate the form submission into a full\n   * page reload that sends the data to the server. Instead some javascript logic should be triggered\n   * to handle the form submission in an application-specific way.\n   *\n   * For this reason, AngularTS prevents the default action (form submission to the server) unless the\n   * `<form>` element has an `action` attribute specified.\n   *\n   * You can use one of the following two ways to specify what javascript method should be called when\n   * a form is submitted:\n   *\n   * - {@link ng.directive:ngSubmit ngSubmit} directive on the form element\n   * - {@link ng.directive:ngClick ngClick} directive on the first\n   *  button or input field of type submit (input[type=submit])\n   *\n   * To prevent double execution of the handler, use only one of the {@link ng.directive:ngSubmit ngSubmit}\n   * or {@link ng.directive:ngClick ngClick} directives.\n   * This is because of the following form submission rules in the HTML specification:\n   *\n   * - If a form has only one input field then hitting enter in this field triggers form submit\n   * (`ngSubmit`)\n   * - if a form has 2+ input fields and no buttons or input[type=submit] then hitting enter\n   * doesn't trigger submit\n   * - if a form has one or more input fields and one or more buttons or input[type=submit] then\n   * hitting enter in any of the input fields will trigger the click handler on the *first* button or\n   * input[type=submit] (`ngClick`) *and* a submit handler on the enclosing form (`ngSubmit`)\n   *\n   * Any pending `ngModelOptions` changes will take place immediately when an enclosing form is\n   * submitted. Note that `ngClick` events will occur before the model is updated. Use `ngSubmit`\n   * to have access to the updated model.\n   *\n   * @animations\n   * Animations in ngForm are triggered when any of the associated CSS classes are added and removed.\n   * These classes are: `.ng-pristine`, `.ng-dirty`, `.ng-invalid` and `.ng-valid` as well as any\n   * other validations that are performed within the form. Animations in ngForm are similar to how\n   * they work in ngClass and animations can be hooked into using CSS transitions, keyframes as well\n   * as JS animations.\n   *\n   * @param {string=} isNgForm Name of the form. If specified, the form controller will be published into\n   *                       related scope, under this name.\n   */\n  const formDirectiveFactory = function (isNgForm) {\n    return [\n      \"$parse\",\n      function ($parse) {\n        return {\n          name: \"form\",\n          restrict: isNgForm ? \"EA\" : \"E\",\n          require: [\"form\", \"^^?form\"], // first is the form's own ctrl, second is an optional parent form\n          controller: FormController,\n          compile: function ngFormCompile(formElement, attr) {\n            // Setup initial state of the control\n            formElement.classList.add(PRISTINE_CLASS, VALID_CLASS);\n\n            const nameAttr = attr.name\n              ? \"name\"\n              : isNgForm && attr.ngForm\n                ? \"ngForm\"\n                : false;\n\n            return {\n              pre: function ngFormPreLink(scope, formElement, attr, ctrls) {\n                const controller = ctrls[0];\n\n                // if `action` attr is not present on the form, prevent the default action (submission)\n                if (!(\"action\" in attr)) {\n                  // we can't use jq events because if a form is destroyed during submission the default\n                  // action is not prevented. see #1238\n                  //\n                  // IE 9 is not affected because it doesn't fire a submit event and try to do a full\n                  // page reload if the form was destroyed by submission of the form via a click handler\n                  // on a button in the form. Looks like an IE9 specific bug.\n                  const handleFormSubmission = function (event) {\n                    controller.$commitViewValue();\n                    controller.$setSubmitted();\n                    event.preventDefault();\n                  };\n\n                  formElement.addEventListener(\"submit\", handleFormSubmission);\n\n                  // unregister the preventDefault listener so that we don't not leak memory but in a\n                  // way that will achieve the prevention of the default action.\n                  formElement.addEventListener(\"$destroy\", () => {\n                    setTimeout(\n                      () => {\n                        formElement.removeEventListener(\n                          \"submit\",\n                          handleFormSubmission,\n                        );\n                      },\n                      0,\n                      false,\n                    );\n                  });\n                }\n\n                const parentFormCtrl = ctrls[1] || controller.$$parentForm;\n                parentFormCtrl.$addControl(controller);\n\n                let setter = nameAttr ? getSetter(controller.$name) : () => {};\n\n                if (nameAttr) {\n                  setter(scope, controller);\n                  attr.$observe(nameAttr, (newValue) => {\n                    if (controller.$name === newValue) return;\n                    scope.$target[controller.$name] = undefined;\n                    controller.$$parentForm.$$renameControl(controller, newValue);\n                    if (\n                      scope.$target !== controller.$$parentForm &&\n                      controller.$$parentForm !== nullFormCtrl\n                    ) ; else {\n                      scope.$target[newValue] = controller;\n                    }\n                  });\n                }\n                formElement.addEventListener(\"$destroy\", () => {\n                  controller.$target.$$parentForm.$removeControl(controller);\n                  setter(scope, undefined);\n                  extend(controller, nullFormCtrl); // stop propagating child destruction handlers upwards\n                });\n              },\n            };\n          },\n        };\n        function getSetter(expression) {\n          if (expression === \"\") {\n            // create an assignable expression, so forms with an empty name can be renamed later\n            return $parse('this[\"\"]').assign;\n          }\n          return $parse(expression).assign || (() => {});\n        }\n      },\n    ];\n  };\n\n  const formDirective = formDirectiveFactory();\n  const ngFormDirective = formDirectiveFactory(\"ngForm\");\n\n  const DEFAULT_REGEXP = /(\\s+|^)default(\\s+|$)/;\n\n  /**\n   * @typedef {Object} ModelOptionsConfig\n   * @property {string} [updateOn] - A string specifying which events the input should be bound to. Multiple events can be set using a space-delimited list. The special event 'default' matches the default events belonging to the control.\n   * @property {number|Object.<string, number>} [debounce] - An integer specifying the debounce time in milliseconds. A value of 0 triggers an immediate update. If an object is supplied, custom debounce values can be set for each event.\n   * @property {boolean} [allowInvalid] - Indicates whether the model can be set with values that did not validate correctly. Defaults to false, which sets the model to undefined on validation failure.\n   * @property {boolean} [getterSetter] - Determines whether to treat functions bound to `ngModel` as getters/setters. Defaults to false.\n   * @property {boolean} [updateOnDefault]\n   */\n\n  class NgModelOptionsController {\n    static $nonscope = true;\n    /* @ignore */ static $inject = [\"$attrs\", \"$scope\"];\n\n    /**\n     * @param {import('../../core/compile/attributes.js').Attributes} $attrs\n     * @param {import('../../core/scope/scope.js').Scope} $scope\n     */\n    constructor($attrs, $scope) {\n      this.$$attrs = $attrs;\n      this.$$scope = $scope;\n      /** @type {NgModelOptionsController?} */\n      this.parentCtrl;\n    }\n\n    $onInit() {\n      const parentOptions = this.parentCtrl\n        ? this.parentCtrl.$options\n        : defaultModelOptions;\n      const modelOptionsDefinition = this.$$scope.$eval(\n        this.$$attrs[\"ngModelOptions\"],\n      );\n\n      this.$options = parentOptions.createChild(modelOptionsDefinition);\n    }\n  }\n\n  /**\n   * @description\n   * A container for the options set by the {@link ngModelOptions} directive\n   */\n  class ModelOptions {\n    static $nonscope = true;\n\n    /**\n     * @param {ModelOptionsConfig} options\n     */\n    constructor(options) {\n      /** @type {ModelOptionsConfig} */\n      this.$$options = options;\n    }\n\n    /**\n     * Returns the value of the given option\n     * @param {string} name the name of the option to retrieve\n     * @returns {string|boolean|number|Object.<string, number>} the value of the option   *\n     */\n    getOption(name) {\n      return this.$$options[name];\n    }\n\n    /**\n     * @param {ModelOptionsConfig} options a hash of options for the new child that will override the parent's options\n     * @return {ModelOptions} a new `ModelOptions` object initialized with the given options.\n     */\n    createChild(options) {\n      let inheritAll = false;\n\n      // make a shallow copy\n      options = Object.assign({}, options);\n\n      // Inherit options from the parent if specified by the value `\"$inherit\"`\n      Object.entries(options).forEach(([key, option]) => {\n        if (option === \"$inherit\") {\n          if (key === \"*\") {\n            inheritAll = true;\n          } else {\n            options[key] = this.$$options[key];\n            // `updateOn` is special so we must also inherit the `updateOnDefault` option\n            if (key === \"updateOn\") {\n              options.updateOnDefault = this.$$options.updateOnDefault;\n            }\n          }\n        } else if (key === \"updateOn\") {\n          // If the `updateOn` property contains the `default` event then we have to remove\n          // it from the event list and set the `updateOnDefault` flag.\n          options.updateOnDefault = false;\n          options[key] = trim(\n            /** @type {string} */ (option).replace(DEFAULT_REGEXP, () => {\n              options.updateOnDefault = true;\n              return \" \";\n            }),\n          );\n        }\n      }, this);\n\n      if (inheritAll) {\n        // We have a property of the form: `\"*\": \"$inherit\"`\n        delete options[\"*\"];\n        defaults$1(options, this.$$options);\n      }\n\n      // Finally add in any missing defaults\n      defaults$1(options, defaultModelOptions.$$options);\n\n      return new ModelOptions(options);\n    }\n  }\n\n  const defaultModelOptions = new ModelOptions({\n    updateOn: \"\",\n    updateOnDefault: true,\n    debounce: 0,\n    getterSetter: false,\n    allowInvalid: false,\n  });\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  const ngModelOptionsDirective = function () {\n    return {\n      restrict: \"A\",\n      // ngModelOptions needs to run before ngModel and input directives\n      priority: 10,\n      require: { parentCtrl: \"?^^ngModelOptions\" },\n      bindToController: true,\n      controller: NgModelOptionsController,\n    };\n  };\n\n  // shallow copy over values from `src` that are not already specified on `dst`\n  function defaults$1(dst, src) {\n    Object.keys(src).forEach((key) => {\n      if (!isDefined(dst[key])) {\n        dst[key] = src[key];\n      }\n    });\n  }\n\n  const ngModelMinErr = minErr(\"ngModel\");\n\n  /**\n   * \n   * @property {*} $viewValue The actual value from the control's view.\n   *\n   * @property {*} $modelValue The value in the model that the control is bound to.\n   * @property {Array.<Function>} $parsers Array of functions to execute, as a pipeline, whenever\n   *  the control updates the ngModelController with a new `$viewValue` from the DOM, usually via user input.\n   *\n   * @property {Array.<Function>} $formatters Array of functions to execute, as a pipeline, whenever\n      the bound ngModel expression changes programmatically. The `$formatters` are not called when the\n      value of the control is changed by user interaction.\n   *\n   * @property {Object.<string, (string, string) => boolean>} $validators A collection of validators that are applied whenever the model value changes. \n   * The key value within the object refers to the name of the validator while the function refers to the validation operation. \n   * The validation operation is provided with the model value as an argument and must return a true or false value depending on the response of that validation.\n   *\n   * @property {Object.<string, function(string, string) => Promise>} $asyncValidators A collection of validations that are expected to perform an asynchronous validation (e.g. a HTTP request).\n   *  The validation function that is provided is expected to return a promise when it is run during the model validation process\n   *\n   * @property {Array.<Function>} $viewChangeListeners Array of functions to execute whenever\n   *     a change to {@link ngModel.NgModelController#$viewValue `$viewValue`} has caused a change\n   *     to {@link ngModel.NgModelController#$modelValue `$modelValue`}.\n   *     It is called with no arguments, and its return value is ignored.\n   *     This can be used in place of additional $watches against the model value.\n   *\n   * @property {Object} $error An object hash with all failing validator ids as keys.\n   * @property {Object} $pending An object hash with all pending validator ids as keys.\n   *\n   * @property {boolean} $untouched True if control has not lost focus yet.\n   * @property {boolean} $touched True if control has lost focus.\n   * @property {boolean} $pristine True if user has not interacted with the control yet.\n   * @property {boolean} $dirty True if user has already interacted with the control.\n   * @property {boolean} $valid True if there is no error.\n   * @property {boolean} $invalid True if at least one error on the control.\n   * @property {string} $name The name attribute of the control.\n   */\n\n  class NgModelController {\n    static $nonscope = true;\n    /* @ignore */ static $inject = [\n      \"$scope\",\n      $injectTokens.$exceptionHandler,\n      \"$attrs\",\n      \"$element\",\n      $injectTokens.$parse,\n      $injectTokens.$animate,\n      $injectTokens.$interpolate,\n    ];\n\n    /**\n     * @param {import('../../core/scope/scope.js').Scope} $scope\n     * @param {import('../../services/exception/exception-handler.js').ErrorHandler} $exceptionHandler\n     * @param {import('../../core/compile/attributes.js').Attributes} $attr\n     * @param {Element} $element\n     * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n     * @param {*} $animate\n     * @param {*} $interpolate\n     */\n    constructor(\n      $scope,\n      $exceptionHandler,\n      $attr,\n      $element,\n      $parse,\n      $animate,\n      $interpolate,\n    ) {\n      /** @type {any} The actual value from the control's view  */\n      this.$viewValue = Number.NaN;\n\n      /** @type {any} The value in the model that the control is bound to. */\n      this.$modelValue = Number.NaN;\n      /** @type {any} */\n      this.$$rawModelValue = undefined; // stores the parsed modelValue / model set from scope regardless of validity.\n\n      this.$validators = {};\n      this.$asyncValidators = {};\n      this.$parsers = [];\n      this.$formatters = [];\n      this.$viewChangeListeners = [];\n      this.$untouched = true;\n\n      /** @type {boolean} */\n      this.$touched = false;\n\n      /** @type {boolean} */\n      this.$pristine = true;\n\n      /** @type {boolean} */\n      this.$dirty = false;\n\n      /** @type {boolean} */\n      this.$valid = true;\n\n      /** @type {boolean} */\n      this.$invalid = false;\n\n      this.$error = {}; // keep invalid keys here\n      this.$$success = {}; // keep valid keys here\n      this.$pending = undefined; // keep pending keys here\n      this.$name = $interpolate($attr[\"name\"] || \"\", false)($scope);\n      this.$$parentForm = nullFormCtrl;\n      this.$options = defaultModelOptions;\n      this.$$updateEvents = \"\";\n      // Attach the correct context to the event handler function for updateOn\n      this.$$updateEventHandler = this.$$updateEventHandler.bind(this);\n\n      this.$$parsedNgModel = $parse($attr[\"ngModel\"]);\n      this.$$parsedNgModelAssign = this.$$parsedNgModel.assign;\n\n      /**\n       * @type {import(\"../../core/parse/interface.ts\").CompiledExpression |\n       *        (function(import(\"../../core/scope/scope.js\").Scope): any)}\n       */\n      this.$$ngModelGet = this.$$parsedNgModel;\n      this.$$ngModelSet = this.$$parsedNgModelAssign;\n      this.$$pendingDebounce = null;\n      this.$$parserValid = undefined;\n\n      /** @type {string} */\n      this.$$parserName = \"parse\";\n\n      /** @type {number} */\n      this.$$currentValidationRunId = 0;\n\n      /** @type {import('../../core/scope/scope.js').Scope} */\n      this.$$scope = $scope; // attempt to bind to nearest controller if present\n      this.$$attr = $attr;\n      this.$$element = $element;\n      this.$$animate = $animate;\n      this.$$parse = $parse;\n      this.$$exceptionHandler = $exceptionHandler;\n\n      this.$$hasNativeValidators = false;\n\n      this.$$classCache = {};\n      const isValid = this.$$element.classList.contains(VALID_CLASS);\n      this.$$classCache[VALID_CLASS] = isValid;\n      this.$$classCache[INVALID_CLASS] = !isValid;\n\n      this.$$eventRemovers = new Set();\n\n      setupModelWatcher(this);\n    }\n\n    set(object, property) {\n      object[property] = true;\n    }\n    unset(object, property) {\n      delete object[property];\n    }\n\n    $setValidity(validationErrorKey, state) {\n      let that = this;\n\n      function createAndSet(ctrl, name, value) {\n        if (!ctrl[name]) {\n          ctrl[name] = {};\n        }\n        that.set(ctrl[name], value);\n      }\n\n      function unsetAndCleanup(ctrl, name, value) {\n        if (ctrl[name]) {\n          that.unset(ctrl[name], value);\n        }\n        if (isObjectEmpty(ctrl[name])) {\n          ctrl[name] = undefined;\n        }\n      }\n\n      function cachedToggleClass(ctrl, className, switchValue) {\n        if (switchValue && !ctrl.$$classCache[className]) {\n          if (hasAnimate(ctrl.$$element)) {\n            ctrl.$$animate.addClass(ctrl.$$element, className);\n          } else {\n            ctrl.$$element.classList.add(className);\n          }\n\n          ctrl.$$classCache[className] = true;\n        } else if (!switchValue && ctrl.$$classCache[className]) {\n          if (hasAnimate(ctrl.$$element)) {\n            ctrl.$$animate.removeClass(ctrl.$$element, className);\n          } else {\n            ctrl.$$element.classList.remove(className);\n          }\n          ctrl.$$classCache[className] = false;\n        }\n      }\n\n      function toggleValidationCss(ctrl, validationErrorKey, isValid) {\n        validationErrorKey = validationErrorKey\n          ? `-${snakeCase(validationErrorKey, \"-\")}`\n          : \"\";\n\n        cachedToggleClass(\n          ctrl,\n          VALID_CLASS + validationErrorKey,\n          isValid === true,\n        );\n        cachedToggleClass(\n          ctrl,\n          INVALID_CLASS + validationErrorKey,\n          isValid === false,\n        );\n      }\n\n      if (isUndefined(state)) {\n        createAndSet(this, \"$pending\", validationErrorKey);\n      } else {\n        unsetAndCleanup(this, \"$pending\", validationErrorKey);\n      }\n      if (!isBoolean(state)) {\n        delete this.$error[validationErrorKey];\n        delete this.$$success[validationErrorKey];\n      } else if (state) {\n        delete this.$error[validationErrorKey];\n        this.set(this.$$success, validationErrorKey);\n      } else {\n        this.set(this.$error, validationErrorKey);\n        delete this.$$success[validationErrorKey];\n      }\n      if (this.$pending) {\n        cachedToggleClass(this, PENDING_CLASS, true);\n        this.$valid = this.$invalid = undefined;\n        toggleValidationCss(this, \"\", null);\n      } else {\n        cachedToggleClass(this, PENDING_CLASS, false);\n        this.$valid = isObjectEmpty(this.$error);\n        this.$invalid = !this.$valid;\n        toggleValidationCss(this, \"\", this.$valid);\n      }\n\n      // re-read the state as the set/unset methods could have\n      // combined state in this.$error[validationError] (used for forms),\n      // where setting/unsetting only increments/decrements the value,\n      // and does not replace it.\n      let combinedState;\n      if (this.$pending && this.$pending[validationErrorKey]) {\n        combinedState = undefined;\n      } else if (this.$error[validationErrorKey]) {\n        combinedState = false;\n      } else if (this.$$success[validationErrorKey]) {\n        combinedState = true;\n      } else {\n        combinedState = null;\n      }\n\n      toggleValidationCss(this, validationErrorKey, combinedState);\n      this.$$parentForm.$setValidity(validationErrorKey, combinedState, this);\n    }\n\n    $$initGetterSetters() {\n      if (this.$options.getOption(\"getterSetter\")) {\n        const invokeModelGetter = this.$$parse(`${this.$$attr[\"ngModel\"]}()`);\n        const invokeModelSetter = this.$$parse(`${this.$$attr[\"ngModel\"]}($$$p)`);\n\n        this.$$ngModelGet = ($scope) => {\n          let modelValue = this.$$parsedNgModel($scope);\n          if (isFunction(modelValue)) {\n            modelValue = invokeModelGetter($scope);\n          }\n          return modelValue;\n        };\n        this.$$ngModelSet = ($scope, newValue) => {\n          if (isFunction(this.$$parsedNgModel($scope))) {\n            invokeModelSetter($scope, { $$$p: newValue });\n          } else {\n            this.$$parsedNgModelAssign($scope, newValue);\n          }\n        };\n      } else if (!this.$$parsedNgModel.assign) {\n        throw ngModelMinErr(\n          \"nonassign\",\n          \"Expression '{0}' is non-assignable. Element: {1}\",\n          this.$$attr[\"ngModel\"],\n          startingTag(this.$$element),\n        );\n      }\n    }\n\n    /**\n     * Called when the view needs to be updated. It is expected that the user of the ng-model\n     * directive will implement this method.\n     *\n     * The `$render()` method is invoked in the following situations:\n     *\n     * * `$rollbackViewValue()` is called.  If we are rolling back the view value to the last\n     *   committed value then `$render()` is called to update the input control.\n     * * The value referenced by `ng-model` is changed programmatically and both the `$modelValue` and\n     *   the `$viewValue` are different from last time.\n     *\n     * Since `ng-model` does not do a deep watch, `$render()` is only invoked if the values of\n     * `$modelValue` and `$viewValue` are actually different from their previous values. If `$modelValue`\n     * or `$viewValue` are objects (rather than a string or number) then `$render()` will not be\n     * invoked if you only change a property on the objects.\n     */\n    $render() {}\n\n    /**\n     * This is called when we need to determine if the value of an input is empty.\n     *\n     * For instance, the required directive does this to work out if the input has data or not.\n     *\n     * The default `$isEmpty` function checks whether the value is `undefined`, `''`, `null` or `NaN`.\n     *\n     * You can override this for input directives whose concept of being empty is different from the\n     * default. The `checkboxInputType` directive does this because in its case a value of `false`\n     * implies empty.\n     *\n     * @param {*} value The value of the input to check for emptiness.\n     * @returns {boolean} True if `value` is \"empty\".\n     */\n    $isEmpty(value) {\n      return (\n        isUndefined(value) || value === \"\" || value === null || value !== value\n      );\n    }\n\n    $$updateEmptyClasses(value) {\n      if (this.$isEmpty(value)) {\n        if (hasAnimate(this.$$element)) {\n          this.$$animate.removeClass(this.$$element, NOT_EMPTY_CLASS);\n          this.$$animate.addClass(this.$$element, EMPTY_CLASS);\n        } else {\n          this.$$element.classList.remove(NOT_EMPTY_CLASS);\n          this.$$element.classList.add(EMPTY_CLASS);\n        }\n      } else {\n        if (hasAnimate(this.$$element)) {\n          this.$$animate.removeClass(this.$$element, EMPTY_CLASS);\n          this.$$animate.addClass(this.$$element, NOT_EMPTY_CLASS);\n        } else {\n          this.$$element.classList.remove(EMPTY_CLASS);\n          this.$$element.classList.add(NOT_EMPTY_CLASS);\n        }\n      }\n    }\n\n    /**\n     * Sets the control to its pristine state.\n     *\n     * This method can be called to remove the `ng-dirty` class and set the control to its pristine\n     * state (`ng-pristine` class). A model is considered to be pristine when the control\n     * has not been changed from when first compiled.\n     */\n    $setPristine() {\n      this.$dirty = false;\n      this.$pristine = true;\n      if (!this.$$element) return;\n      if (hasAnimate(this.$$element)) {\n        this.$$animate.removeClass(this.$$element, EMPTY_CLASS);\n        this.$$animate.addClass(this.$$element, PRISTINE_CLASS);\n      } else {\n        this.$$element.classList.remove(EMPTY_CLASS);\n        this.$$element.classList.add(PRISTINE_CLASS);\n      }\n    }\n\n    /**\n     * Sets the control to its dirty state.\n     *\n     * This method can be called to remove the `ng-pristine` class and set the control to its dirty\n     * state (`ng-dirty` class). A model is considered to be dirty when the control has been changed\n     * from when first compiled.\n     */\n    $setDirty() {\n      this.$dirty = true;\n      this.$pristine = false;\n      if (hasAnimate(this.$$element)) {\n        this.$$animate.removeClass(this.$$element, PRISTINE_CLASS);\n        this.$$animate.addClass(this.$$element, DIRTY_CLASS);\n      } else {\n        this.$$element.classList.remove(PRISTINE_CLASS);\n        this.$$element.classList.add(DIRTY_CLASS);\n      }\n      this.$$parentForm.$setDirty();\n    }\n\n    /**\n     * Sets the control to its untouched state.\n     *\n     * This method can be called to remove the `ng-touched` class and set the control to its\n     * untouched state (`ng-untouched` class). Upon compilation, a model is set as untouched\n     * by default, however this function can be used to restore that state if the model has\n     * already been touched by the user.\n     */\n    $setUntouched() {\n      this.$touched = false;\n      this.$untouched = true;\n      if (hasAnimate(this.$$element)) {\n        this.$$animate.setClass(this.$$element, UNTOUCHED_CLASS, TOUCHED_CLASS);\n      } else {\n        this.$$element.classList.remove(TOUCHED_CLASS);\n        this.$$element.classList.add(UNTOUCHED_CLASS);\n      }\n    }\n\n    /**\n     * Sets the control to its touched state.\n     *\n     * This method can be called to remove the `ng-untouched` class and set the control to its\n     * touched state (`ng-touched` class). A model is considered to be touched when the user has\n     * first focused the control element and then shifted focus away from the control (blur event).\n     */\n    $setTouched() {\n      this.$touched = true;\n      this.$untouched = false;\n      if (hasAnimate(this.$$element)) {\n        this.$$animate.setClass(this.$$element, TOUCHED_CLASS, UNTOUCHED_CLASS);\n      } else {\n        this.$$element.classList.remove(UNTOUCHED_CLASS);\n        this.$$element.classList.add(TOUCHED_CLASS);\n      }\n    }\n\n    /**\n     * Cancel an update and reset the input element's value to prevent an update to the `$modelValue`,\n     * which may be caused by a pending debounced event or because the input is waiting for some\n     * future event.\n     *\n     * If you have an input that uses `ng-model-options` to set up debounced updates or updates that\n     * depend on special events such as `blur`, there can be a period when the `$viewValue` is out of\n     * sync with the ngModel's `$modelValue`.\n     *\n     * In this case, you can use `$rollbackViewValue()` to manually cancel the debounced / future update\n     * and reset the input to the last committed view value.\n     *\n     * It is also possible that you run into difficulties if you try to update the ngModel's `$modelValue`\n     * programmatically before these debounced/future events have resolved/occurred, because AngularTS's\n     * dirty checking mechanism is not able to tell whether the model has actually changed or not.\n     *\n     * The `$rollbackViewValue()` method should be called before programmatically changing the model of an\n     * input which may have such events pending. This is important in order to make sure that the\n     * input field will be updated with the new model value and any pending operations are cancelled.\n     *\n     * @example\n     * <example name=\"ng-model-cancel-update\" module=\"cancel-update-example\">\n     *   <file name=\"app.js\">\n     *     angular.module('cancel-update-example', [])\n     *\n     *     .controller('CancelUpdateController', ['$scope', function($scope) {\n     *       $scope.model = {value1: '', value2: ''};\n     *\n     *       $scope.setEmpty = function(e, value, rollback) {\n     *         if (e.keyCode === 27) {\n     *           e.preventDefault();\n     *           if (rollback) {\n     *             $scope.myForm[value].$rollbackViewValue();\n     *           }\n     *           $scope.model[value] = '';\n     *         }\n     *       };\n     *     }]);\n     *   </file>\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"CancelUpdateController\">\n     *       <p>Both of these inputs are only updated if they are blurred. Hitting escape should\n     *       empty them. Follow these steps and observe the difference:</p>\n     *       <ol>\n     *         <li>Type something in the input. You will see that the model is not yet updated</li>\n     *         <li>Press the Escape key.\n     *           <ol>\n     *             <li> In the first example, nothing happens, because the model is already '', and no\n     *             update is detected. If you blur the input, the model will be set to the current view.\n     *             </li>\n     *             <li> In the second example, the pending update is cancelled, and the input is set back\n     *             to the last committed view value (''). Blurring the input does nothing.\n     *             </li>\n     *           </ol>\n     *         </li>\n     *       </ol>\n     *\n     *       <form name=\"myForm\" ng-model-options=\"{ updateOn: 'blur' }\">\n     *         <div>\n     *           <p id=\"inputDescription1\">Without $rollbackViewValue():</p>\n     *           <input name=\"value1\" aria-describedby=\"inputDescription1\" ng-model=\"model.value1\"\n     *                  ng-keydown=\"setEmpty($event, 'value1')\">\n     *           value1: \"{{ model.value1 }}\"\n     *         </div>\n     *\n     *         <div>\n     *           <p id=\"inputDescription2\">With $rollbackViewValue():</p>\n     *           <input name=\"value2\" aria-describedby=\"inputDescription2\" ng-model=\"model.value2\"\n     *                  ng-keydown=\"setEmpty($event, 'value2', true)\">\n     *           value2: \"{{ model.value2 }}\"\n     *         </div>\n     *       </form>\n     *     </div>\n     *   </file>\n         <file name=\"style.css\">\n            div {\n              display: table-cell;\n            }\n            div:nth-child(1) {\n              padding-right: 30px;\n            }\n\n          </file>\n     * </example>\n     */\n    $rollbackViewValue() {\n      clearTimeout(this.$$pendingDebounce);\n      this.$viewValue = this.$$lastCommittedViewValue;\n      this.$render();\n    }\n\n    /**\n     * Runs each of the registered validators (first synchronous validators and then\n     * asynchronous validators).\n     * If the validity changes to invalid, the model will be set to `undefined`,\n     * unless {@link ngModelOptions `ngModelOptions.allowInvalid`} is `true`.\n     * If the validity changes to valid, it will set the model to the last available valid\n     * `$modelValue`, i.e. either the last parsed value or the last value set from the scope.\n     */\n    $validate() {\n      // ignore $validate before model is initialized\n      if (isNumberNaN(this.$modelValue)) {\n        return;\n      }\n\n      const viewValue = this.$$lastCommittedViewValue;\n      // Note: we use the $$rawModelValue as $modelValue might have been\n      // set to undefined during a view -> model update that found validation\n      // errors. We can't parse the view here, since that could change\n      // the model although neither viewValue nor the model on the scope changed\n      const modelValue = this.$$rawModelValue;\n\n      const prevValid = this.$valid;\n      const prevModelValue = this.$modelValue;\n\n      const allowInvalid = this.$options.getOption(\"allowInvalid\");\n\n      const that = this;\n      this.$$runValidators(modelValue, viewValue, (allValid) => {\n        // If there was no change in validity, don't update the model\n        // This prevents changing an invalid modelValue to undefined\n        if (!allowInvalid && prevValid !== allValid) {\n          // Note: Don't check this.$valid here, as we could have\n          // external validators (e.g. calculated on the server),\n          // that just call $setValidity and need the model value\n          // to calculate their validity.\n          that.$modelValue = allValid ? modelValue : undefined;\n\n          if (that.$modelValue !== prevModelValue) {\n            that.$$writeModelToScope();\n          }\n        }\n      });\n    }\n\n    $$runValidators(modelValue, viewValue, doneCallback) {\n      this.$$currentValidationRunId++;\n      const localValidationRunId = this.$$currentValidationRunId;\n      const that = this;\n\n      // check parser error\n      if (!processParseErrors()) {\n        validationDone(false);\n        return;\n      }\n      if (!processSyncValidators()) {\n        validationDone(false);\n        return;\n      }\n      processAsyncValidators();\n\n      function processParseErrors() {\n        const errorKey = that.$$parserName;\n\n        if (isUndefined(that.$$parserValid)) {\n          setValidity(errorKey, null);\n        } else {\n          if (!that.$$parserValid) {\n            Object.keys(that.$validators).forEach((name) => {\n              setValidity(name, null);\n            });\n            Object.keys(that.$asyncValidators).forEach((name) => {\n              setValidity(name, null);\n            });\n          }\n\n          // Set the parse error last, to prevent unsetting it, should a $validators key == parserName\n          setValidity(errorKey, that.$$parserValid);\n          return that.$$parserValid;\n        }\n        return true;\n      }\n\n      function processSyncValidators() {\n        let syncValidatorsValid = true;\n        Object.entries(that.$validators).forEach(([name, validator]) => {\n          const result = Boolean(validator(modelValue, viewValue));\n          syncValidatorsValid = syncValidatorsValid && result;\n          setValidity(name, result);\n        });\n        if (!syncValidatorsValid) {\n          Object.keys(that.$asyncValidators).forEach((name) => {\n            setValidity(name, null);\n          });\n          return false;\n        }\n        return true;\n      }\n\n      function processAsyncValidators() {\n        const validatorPromises = [];\n        let allValid = true;\n        Object.entries(that.$asyncValidators).forEach(([name, validator]) => {\n          const promise = validator(modelValue, viewValue);\n          if (!isPromiseLike(promise)) {\n            throw ngModelMinErr(\n              \"nopromise\",\n              \"Expected asynchronous validator to return a promise but got '{0}' instead.\",\n              promise,\n            );\n          }\n          setValidity(name, undefined);\n          validatorPromises.push(\n            promise.then(\n              () => {\n                setValidity(name, true);\n              },\n              () => {\n                allValid = false;\n                setValidity(name, false);\n              },\n            ),\n          );\n        });\n        if (!validatorPromises.length) {\n          validationDone(true);\n        } else {\n          Promise.all(validatorPromises).then(\n            () => {\n              validationDone(allValid);\n            },\n            () => {},\n          );\n        }\n      }\n\n      function setValidity(name, isValid) {\n        if (localValidationRunId === that.$$currentValidationRunId) {\n          that.$setValidity(name, isValid);\n        }\n      }\n\n      function validationDone(allValid) {\n        if (localValidationRunId === that.$$currentValidationRunId) {\n          doneCallback(allValid);\n        }\n      }\n    }\n\n    /**\n     * Commit a pending update to the `$modelValue`.\n     *\n     * Updates may be pending by a debounced event or because the input is waiting for a some future\n     * event defined in `ng-model-options`. this method is rarely needed as `NgModelController`\n     * usually handles calling this in response to input events.\n     */\n    $commitViewValue() {\n      clearTimeout(this.$$pendingDebounce);\n\n      // If the view value has not changed then we should just exit, except in the case where there is\n      // a native validator on the element. In this case the validation state may have changed even though\n      // the viewValue has stayed empty.\n      if (\n        this.$$lastCommittedViewValue === this.$viewValue &&\n        (this.$viewValue !== \"\" || !this.$$hasNativeValidators)\n      ) {\n        return;\n      }\n\n      if (\n        this.$$lastCommittedViewValue === undefined &&\n        Number.isNaN(this.$viewValue)\n      ) {\n        return;\n      }\n\n      this.$$updateEmptyClasses(this.$viewValue);\n      this.$$lastCommittedViewValue = this.$viewValue;\n\n      // change to dirty\n      if (this.$pristine) {\n        this.$setDirty();\n      }\n      this.$$parseAndValidate();\n    }\n\n    $$parseAndValidate() {\n      let modelValue = this.$$lastCommittedViewValue;\n      const that = this;\n\n      this.$$parserValid = isUndefined(modelValue) ? undefined : true;\n\n      // Reset any previous parse error\n      this.$setValidity(this.$$parserName, null);\n      this.$$parserName = \"parse\";\n\n      if (this.$$parserValid) {\n        for (let i = 0; i < this.$parsers.length; i++) {\n          modelValue = this.$parsers[i](modelValue);\n          if (isUndefined(modelValue)) {\n            this.$$parserValid = false;\n            break;\n          }\n        }\n      }\n      if (isNumberNaN(this.$modelValue)) {\n        // this.$modelValue has not been touched yet...\n        // @ts-ignore\n        this.$modelValue = this.$$ngModelGet(this.$$scope);\n      }\n      const prevModelValue = this.$modelValue;\n      const allowInvalid = this.$options.getOption(\"allowInvalid\");\n      this.$$rawModelValue = modelValue;\n\n      if (allowInvalid) {\n        this.$modelValue = modelValue;\n        writeToModelIfNeeded();\n      }\n\n      // Pass the $$lastCommittedViewValue here, because the cached viewValue might be out of date.\n      // This can happen if e.g. $setViewValue is called from inside a parser\n      this.$$runValidators(\n        modelValue,\n        this.$$lastCommittedViewValue,\n        (allValid) => {\n          if (!allowInvalid) {\n            // Note: Don't check this.$valid here, as we could have\n            // external validators (e.g. calculated on the server),\n            // that just call $setValidity and need the model value\n            // to calculate their validity.\n            // if (that.$modelValue ?? that.$modelValue[isProxySymbol]) {\n            //   delete that.$modelValue;\n            // }\n            that.$modelValue = allValid ? modelValue : undefined;\n            writeToModelIfNeeded();\n          }\n        },\n      );\n\n      function writeToModelIfNeeded() {\n        // intentional loose equality\n        if (that.$modelValue != prevModelValue) {\n          that.$$writeModelToScope();\n        }\n      }\n    }\n\n    $$writeModelToScope() {\n      this.$$ngModelSet(this.$$scope, this.$modelValue);\n      Object.values(this.$viewChangeListeners).forEach((listener) => {\n        try {\n          listener();\n        } catch (e) {\n          this.$$exceptionHandler(e);\n        }\n      }, this);\n    }\n\n    /**\n     * Update the view value.\n     *\n     * This method should be called when a control wants to change the view value; typically,\n     * this is done from within a DOM event handler. For example, the {@link ng.directive:input input}\n     * directive calls it when the value of the input changes and {@link ng.directive:select select}\n     * calls it when an option is selected.\n     *\n     * When `$setViewValue` is called, the new `value` will be staged for committing through the `$parsers`\n     * and `$validators` pipelines. If there are no special {@link ngModelOptions} specified then the staged\n     * value is sent directly for processing through the `$parsers` pipeline. After this, the `$validators` and\n     * `$asyncValidators` are called and the value is applied to `$modelValue`.\n     * Finally, the value is set to the **expression** specified in the `ng-model` attribute and\n     * all the registered change listeners, in the `$viewChangeListeners` list are called.\n     *\n     * In case the {@link ng.directive:ngModelOptions ngModelOptions} directive is used with `updateOn`\n     * and the `default` trigger is not listed, all those actions will remain pending until one of the\n     * `updateOn` events is triggered on the DOM element.\n     * All these actions will be debounced if the {@link ng.directive:ngModelOptions ngModelOptions}\n     * directive is used with a custom debounce for this particular event.\n     * Note that a `$digest` is only triggered once the `updateOn` events are fired, or if `debounce`\n     * is specified, once the timer runs out.\n     *\n     * When used with standard inputs, the view value will always be a string (which is in some cases\n     * parsed into another type, such as a `Date` object for `input[date]`.)\n     * However, custom controls might also pass objects to this method. In this case, we should make\n     * a copy of the object before passing it to `$setViewValue`. This is because `ngModel` does not\n     * perform a deep watch of objects, it only looks for a change of identity. If you only change\n     * the property of the object then ngModel will not realize that the object has changed and\n     * will not invoke the `$parsers` and `$validators` pipelines. For this reason, you should\n     * not change properties of the copy once it has been passed to `$setViewValue`.\n     * Otherwise you may cause the model value on the scope to change incorrectly.\n     *\n     * <div class=\"alert alert-info\">\n     * In any case, the value passed to the method should always reflect the current value\n     * of the control. For example, if you are calling `$setViewValue` for an input element,\n     * you should pass the input DOM value. Otherwise, the control and the scope model become\n     * out of sync. It's also important to note that `$setViewValue` does not call `$render` or change\n     * the control's DOM value in any way. If we want to change the control's DOM value\n     * programmatically, we should update the `ngModel` scope expression. Its new value will be\n     * picked up by the model controller, which will run it through the `$formatters`, `$render` it\n     * to update the DOM, and finally call `$validate` on it.\n     * </div>\n     *\n     * @param {*} value value from the view.\n     * @param {string} [trigger] Event that triggered the update.\n     */\n    $setViewValue(value, trigger) {\n      this.$viewValue = value;\n      if (this.$options?.getOption(\"updateOnDefault\")) {\n        this.$$debounceViewValueCommit(trigger);\n      }\n    }\n\n    $$debounceViewValueCommit(trigger) {\n      let debounceDelay = this.$options.getOption(\"debounce\");\n\n      if (isNumber(debounceDelay[trigger])) {\n        debounceDelay = debounceDelay[trigger];\n      } else if (\n        isNumber(debounceDelay[\"default\"]) &&\n        /** @type {string} */ (this.$options.getOption(\"updateOn\")).indexOf(\n          trigger,\n        ) === -1\n      ) {\n        debounceDelay = debounceDelay[\"default\"];\n      } else if (isNumber(debounceDelay[\"*\"])) {\n        debounceDelay = debounceDelay[\"*\"];\n      }\n\n      clearTimeout(this.$$pendingDebounce);\n      const that = this;\n      if (/** @type {number} */ (debounceDelay) > 0) {\n        // this fails if debounceDelay is an object\n        this.$$pendingDebounce = setTimeout(() => {\n          that.$commitViewValue();\n        }, /** @type {number} */ (debounceDelay));\n      } else {\n        this.$commitViewValue();\n      }\n    }\n\n    /**\n     *\n     * Override the current model options settings programmatically.\n     *\n     * The previous `ModelOptions` value will not be modified. Instead, a\n     * new `ModelOptions` object will inherit from the previous one overriding\n     * or inheriting settings that are defined in the given parameter.\n     *\n     * See {@link ngModelOptions} for information about what options can be specified\n     * and how model option inheritance works.\n     *\n     * <div class=\"alert alert-warning\">\n     * **Note:** this function only affects the options set on the `ngModelController`,\n     * and not the options on the {@link ngModelOptions} directive from which they might have been\n     * obtained initially.\n     * </div>\n     *\n     * <div class=\"alert alert-danger\">\n     * **Note:** it is not possible to override the `getterSetter` option.\n     * </div>\n     *\n     * @param {Object} options a hash of settings to override the previous options\n     *\n     */\n    $overrideModelOptions(options) {\n      this.$$removeAllEventListeners();\n      this.$options = this.$options.createChild(options);\n      this.$$updateEvents = this.$options.$$options.updateOn;\n      this.$$setUpdateOnEvents();\n    }\n\n    /**\n     * Runs the model -> view pipeline on the current\n     * {@link ngModel.NgModelController#$modelValue $modelValue}.\n     *\n     * The following actions are performed by this method:\n     *\n     * - the `$modelValue` is run through the {@link ngModel.NgModelController#$formatters $formatters}\n     * and the result is set to the {@link ngModel.NgModelController#$viewValue $viewValue}\n     * - the `ng-empty` or `ng-not-empty` class is set on the element\n     * - if the `$viewValue` has changed:\n     *   - {@link ngModel.NgModelController#$render $render} is called on the control\n     *   - the {@link ngModel.NgModelController#$validators $validators} are run and\n     *   the validation status is set.\n     *\n     * This method is called by ngModel internally when the bound scope value changes.\n     * Application developers usually do not have to call this function themselves.\n     *\n     * This function can be used when the `$viewValue` or the rendered DOM value are not correctly\n     * formatted and the `$modelValue` must be run through the `$formatters` again.\n     *\n     * @example\n     * Consider a text input with an autocomplete list (for fruit), where the items are\n     * objects with a name and an id.\n     * A user enters `ap` and then selects `Apricot` from the list.\n     * Based on this, the autocomplete widget will call `$setViewValue({name: 'Apricot', id: 443})`,\n     * but the rendered value will still be `ap`.\n     * The widget can then call `ctrl.$processModelValue()` to run the model -> view\n     * pipeline again, which formats the object to the string `Apricot`,\n     * then updates the `$viewValue`, and finally renders it in the DOM.\n     *\n     * <example module=\"inputExample\" name=\"ng-model-process\">\n       <file name=\"index.html\">\n        <div ng-controller=\"inputController\" style=\"display: flex;\">\n          <div style=\"margin-right: 30px;\">\n            Search Fruit:\n            <basic-autocomplete items=\"items\" on-select=\"selectedFruit = item\"></basic-autocomplete>\n          </div>\n          <div>\n            Model:<br>\n            <pre>{{selectedFruit | json}}</pre>\n          </div>\n        </div>\n       </file>\n       <file name=\"app.js\">\n        angular.module('inputExample', [])\n          .controller('inputController', function($scope) {\n            $scope.items = [\n              {name: 'Apricot', id: 443},\n              {name: 'Clementine', id: 972},\n              {name: 'Durian', id: 169},\n              {name: 'Jackfruit', id: 982},\n              {name: 'Strawberry', id: 863}\n            ];\n          })\n          .component('basicAutocomplete', {\n            bindings: {\n              items: '<',\n              onSelect: '&'\n            },\n            templateUrl: 'autocomplete.html',\n            controller: function($element, $scope) {\n              let that = this;\n              let ngModel;\n\n              that.$postLink = function() {\n                ngModel = $element.querySelectorAll('input').controller('ngModel');\n\n                ngModel.$formatters.push(function(value) {\n                  return (value && value.name) || value;\n                });\n\n                ngModel.$parsers.push(function(value) {\n                  let match = value;\n                  for (let i = 0; i < that.items.length; i++) {\n                    if (that.items[i].name === value) {\n                      match = that.items[i];\n                      break;\n                    }\n                  }\n\n                  return match;\n                });\n              };\n\n              that.selectItem = function(item) {\n                ngModel.$setViewValue(item);\n                ngModel.$processModelValue();\n                that.onSelect({item: item});\n              };\n            }\n          });\n       </file>\n       <file name=\"autocomplete.html\">\n         <div>\n           <input type=\"search\" ng-model=\"$ctrl.searchTerm\" />\n           <ul>\n             <li ng-repeat=\"item in $ctrl.items | filter:$ctrl.searchTerm\">\n               <button ng-click=\"$ctrl.selectItem(item)\">{{ item.name }}</button>\n             </li>\n           </ul>\n         </div>\n       </file>\n     * </example>\n     *\n     */\n    $processModelValue() {\n      const viewValue = this.$$format();\n\n      if (this.$viewValue !== viewValue) {\n        this.$$updateEmptyClasses(viewValue);\n        this.$viewValue = this.$$lastCommittedViewValue = viewValue;\n        this.$render();\n        // It is possible that model and view value have been updated during render\n        this.$$runValidators(this.$modelValue, this.$viewValue, () => {});\n      }\n    }\n\n    /**\n     * This method is called internally to run the $formatters on the $modelValue\n     */\n    $$format() {\n      const formatters = this.$formatters;\n      let idx = formatters.length;\n\n      let viewValue = this.$modelValue;\n      while (idx--) {\n        viewValue = formatters[idx](viewValue);\n      }\n\n      return viewValue;\n    }\n\n    /**\n     * This method is called internally when the bound scope value changes.\n     */\n    $$setModelValue(modelValue) {\n      this.$modelValue = this.$$rawModelValue = modelValue;\n      this.$$parserValid = undefined;\n      this.$processModelValue();\n    }\n\n    $$removeAllEventListeners() {\n      this.$$eventRemovers.forEach((removeCallback) => removeCallback());\n      this.$$eventRemovers.clear();\n    }\n\n    $$setUpdateOnEvents() {\n      if (this.$$updateEvents) {\n        this.$$updateEvents.split(\" \").forEach((ev) => {\n          this.$$element.addEventListener(ev, this.$$updateEventHandler);\n          this.$$eventRemovers.add(() =>\n            this.$$element.removeEventListener(ev, this.$$updateEventHandler),\n          );\n        });\n      }\n\n      this.$$updateEvents = /** @type {string} */ (\n        this.$options.getOption(\"updateOn\")\n      );\n      if (this.$$updateEvents) {\n        this.$$updateEvents.split(\" \").forEach((ev) => {\n          this.$$element.addEventListener(ev, this.$$updateEventHandler);\n          this.$$eventRemovers.add(() =>\n            this.$$element.removeEventListener(ev, this.$$updateEventHandler),\n          );\n        });\n      }\n    }\n\n    $$updateEventHandler(ev) {\n      this.$$debounceViewValueCommit(ev && ev.type);\n    }\n  }\n\n  function setupModelWatcher(ctrl) {\n    // model -> value\n    // Note: we cannot use a normal scope.$watch as we want to detect the following:\n    // 1. scope value is 'a'\n    // 2. user enters 'b'\n    // 3. ng-change kicks in and reverts scope value to 'a'\n    //    -> scope value did not change since the last digest as\n    //       ng-change executes in apply phase\n    // 4. view should be changed back to 'a'\n    ctrl.$$scope.$watch(\"value\", () => {\n      const modelValue = ctrl.$$ngModelGet(ctrl.$$scope);\n\n      // if scope model value and ngModel value are out of sync\n      // This cannot be moved to the action function, because it would not catch the\n      // case where the model is changed in the ngChange function or the model setter\n      if (\n        modelValue !== ctrl.$modelValue &&\n        // checks for NaN is needed to allow setting the model to NaN when there's an asyncValidator\n\n        (ctrl.$modelValue === ctrl.$modelValue || modelValue === modelValue)\n      ) {\n        ctrl.$$setModelValue(modelValue);\n      }\n    });\n  }\n\n  function ngModelDirective() {\n    return {\n      restrict: \"A\",\n      require: [\"ngModel\", \"^?form\", \"^?ngModelOptions\"],\n      controller: NgModelController,\n      // Prelink needs to run before any input directive\n      // so that we can set the NgModelOptions in NgModelController\n      // before anyone else uses it.\n      priority: 1,\n      compile:\n        /** @param {Element} element  */\n        (element) => {\n          // Setup initial state of the control\n          element.classList.add(PRISTINE_CLASS, UNTOUCHED_CLASS, VALID_CLASS);\n          return {\n            pre: (scope, _element, attr, ctrls) => {\n              const modelCtrl = ctrls[0];\n              const formCtrl = ctrls[1] || modelCtrl.$$parentForm;\n              const optionsCtrl = ctrls[2];\n\n              if (optionsCtrl) {\n                modelCtrl.$options = optionsCtrl.$options;\n              }\n              modelCtrl.$$initGetterSetters();\n\n              // notify others, especially parent forms\n              formCtrl.$addControl(modelCtrl);\n\n              attr.$observe(\"name\", (newValue) => {\n                if (modelCtrl.$name !== newValue) {\n                  modelCtrl.$$parentForm.$$renameControl(modelCtrl, newValue);\n                }\n              });\n              let deregisterWatch = scope.$watch(attr[\"ngModel\"], (val) => {\n                modelCtrl.$$setModelValue(isProxy(val) ? val.$target : val);\n              });\n\n              scope.$on(\"$destroy\", () => {\n                modelCtrl.$$parentForm.$removeControl(modelCtrl);\n                deregisterWatch();\n              });\n            },\n            post: (scope, element, _attr, ctrls) => {\n              const modelCtrl = ctrls[0];\n              modelCtrl.$$setUpdateOnEvents();\n\n              function setTouched() {\n                modelCtrl.$setTouched();\n              }\n\n              element.addEventListener(\"blur\", () => {\n                if (modelCtrl.$touched) return;\n                setTouched();\n              });\n\n              modelCtrl.$viewChangeListeners.push(() =>\n                scope.$eval(element.dataset[\"change\"]),\n              );\n            },\n          };\n        },\n    };\n  }\n\n  // Regex code was initially obtained from SO prior to modification: https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime#answer-3143231\n  const ISO_DATE_REGEXP =\n    /^\\d{4,}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+(?:[+-][0-2]\\d:[0-5]\\d|Z)$/;\n  // See valid URLs in RFC3987 (http://tools.ietf.org/html/rfc3987)\n  // Note: We are being more lenient, because browsers are too.\n  //   1. Scheme\n  //   2. Slashes\n  //   3. Username\n  //   4. Password\n  //   5. Hostname\n  //   6. Port\n  //   7. Path\n  //   8. Query\n  //   9. Fragment\n  //                 1111111111111111 222   333333    44444        55555555555555555555555     666     77777777     8888888     999\n  const URL_REGEXP =\n    /^[a-z][a-z\\d.+-]*:\\/*(?:[^:@]+(?::[^@]+)?@)?(?:[^\\s:/?#]+|\\[[a-f\\d:]+])(?::\\d+)?(?:\\/[^?#]*)?(?:\\?[^#]*)?(?:#.*)?$/i;\n\n  const EMAIL_REGEXP =\n    /^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/;\n  const NUMBER_REGEXP = /^\\s*([-+])?(\\d+|(\\d*(\\.\\d*)))([eE][+-]?\\d+)?\\s*$/;\n  const DATE_REGEXP = /^(\\d{4,})-(\\d{2})-(\\d{2})$/;\n  const DATETIMELOCAL_REGEXP =\n    /^(\\d{4,})-(\\d\\d)-(\\d\\d)T(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\n  const WEEK_REGEXP = /^(\\d{4,})-W(\\d\\d)$/;\n  const MONTH_REGEXP = /^(\\d{4,})-(\\d\\d)$/;\n  const TIME_REGEXP = /^(\\d\\d):(\\d\\d)(?::(\\d\\d)(\\.\\d{1,3})?)?$/;\n  // The name of a form control's ValidityState property.\n  // This is used so that it's possible for internal tests to create mock ValidityStates.\n  const VALIDITY_STATE_PROPERTY = \"validity\";\n\n  const PARTIAL_VALIDATION_EVENTS = \"keydown wheel mousedown\";\n  /**\n   * @type {Map<string, boolean>}\n   */\n  const PARTIAL_VALIDATION_TYPES = new Map();\n  \"date,datetime-local,month,time,week\".split(\",\").forEach((type) => {\n    PARTIAL_VALIDATION_TYPES.set(type, true);\n  });\n\n  const inputType = {\n    text: textInputType,\n    date: createDateInputType(\n      \"date\",\n      DATE_REGEXP,\n      createDateParser(DATE_REGEXP, [\"yyyy\", \"MM\", \"dd\"]),\n    ),\n    \"datetime-local\": createDateInputType(\n      \"datetimelocal\",\n      DATETIMELOCAL_REGEXP,\n      createDateParser(DATETIMELOCAL_REGEXP, [\n        \"yyyy\",\n        \"MM\",\n        \"dd\",\n        \"HH\",\n        \"mm\",\n        \"ss\",\n        \"sss\",\n      ]),\n    ),\n    time: createDateInputType(\n      \"time\",\n      TIME_REGEXP,\n      createDateParser(TIME_REGEXP, [\"HH\", \"mm\", \"ss\", \"sss\"]),\n    ),\n    week: createDateInputType(\"week\", WEEK_REGEXP, weekParser),\n    month: createDateInputType(\n      \"month\",\n      MONTH_REGEXP,\n      createDateParser(MONTH_REGEXP, [\"yyyy\", \"MM\"]),\n    ),\n    number: numberInputType,\n    url: urlInputType,\n    email: emailInputType,\n    radio: radioInputType,\n    range: rangeInputType,\n    checkbox: checkboxInputType,\n    hidden: () => {},\n    button: () => {},\n    submit: () => {},\n    reset: () => {},\n    file: () => {},\n  };\n\n  function stringBasedInputType(ctrl) {\n    ctrl.$formatters.push((value) =>\n      ctrl.$isEmpty(value) ? value : value.toString(),\n    );\n  }\n\n  function textInputType(scope, element, attr, ctrl) {\n    baseInputType(scope, element, attr, ctrl);\n    stringBasedInputType(ctrl);\n  }\n\n  function baseInputType(scope, element, attr, ctrl) {\n    const type = element.type.toLowerCase();\n    let composing = false;\n    // In composition mode, users are still inputting intermediate text buffer,\n    // hold the listener until composition is done.\n    // More about composition events: https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent\n    element.addEventListener(\"compositionstart\", () => {\n      composing = true;\n    });\n\n    element.addEventListener(\"compositionend\", () => {\n      composing = false;\n      listener();\n    });\n\n    let timeout;\n\n    let listener = function (ev) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      if (composing) return;\n      let value = element.value;\n      const event = ev && ev.type;\n\n      // By default we will trim the value\n      // If the attribute ng-trim exists we will avoid trimming\n      // If input type is 'password', the value is never trimmed\n      if (type !== \"password\" && (!attr.ngTrim || attr.ngTrim !== \"false\")) {\n        value = trim(value);\n      }\n\n      // If a control is suffering from bad input (due to native validators), browsers discard its\n      // value, so it may be necessary to revalidate (by calling $setViewValue again) even if the\n      // control's value is the same empty value twice in a row.\n      if (\n        ctrl.$viewValue !== value ||\n        (value === \"\" && ctrl.$$hasNativeValidators)\n      ) {\n        ctrl.$target.$setViewValue(value, event);\n      }\n    };\n\n    [\"input\", \"change\", \"paste\", \"drop\", \"cut\"].forEach((event) => {\n      element.addEventListener(event, listener);\n    });\n\n    // Some native input types (date-family) have the ability to change validity without\n    // firing any input/change events.\n    // For these event types, when native validators are present and the browser supports the type,\n    // check for validity changes on various DOM events.\n    if (\n      PARTIAL_VALIDATION_TYPES[type] &&\n      ctrl.$$hasNativeValidators &&\n      type === attr.type\n    ) {\n      element.addEventListener(PARTIAL_VALIDATION_EVENTS, function (ev) {\n        if (!timeout) {\n          const validity = this[VALIDITY_STATE_PROPERTY];\n          const origBadInput = validity.badInput;\n          const origTypeMismatch = validity.typeMismatch;\n          timeout = setTimeout(() => {\n            timeout = null;\n            if (\n              validity.badInput !== origBadInput ||\n              validity.typeMismatch !== origTypeMismatch\n            ) {\n              listener(ev);\n            }\n          });\n        }\n      });\n    }\n\n    ctrl.$render = function () {\n      // Workaround for Firefox validation #12102.\n      const value = ctrl.$isEmpty(ctrl.$viewValue) ? \"\" : ctrl.$viewValue;\n      if (element.value !== value) {\n        element.value = value;\n      }\n    };\n  }\n\n  function weekParser(isoWeek, existingDate) {\n    if (isDate(isoWeek)) {\n      return isoWeek;\n    }\n\n    function getFirstThursdayOfYear(year) {\n      // 0 = index of January\n      const dayOfWeekOnFirst = new Date(year, 0, 1).getDay();\n      // 4 = index of Thursday (+1 to account for 1st = 5)\n      // 11 = index of *next* Thursday (+1 account for 1st = 12)\n      return new Date(\n        year,\n        0,\n        (dayOfWeekOnFirst <= 4 ? 5 : 12) - dayOfWeekOnFirst,\n      );\n    }\n\n    if (isString(isoWeek)) {\n      WEEK_REGEXP.lastIndex = 0;\n      const parts = WEEK_REGEXP.exec(isoWeek);\n      if (parts) {\n        const year = +parts[1];\n        const week = +parts[2];\n        let hours = 0;\n        let minutes = 0;\n        let seconds = 0;\n        let milliseconds = 0;\n        const firstThurs = getFirstThursdayOfYear(year);\n        const addDays = (week - 1) * 7;\n\n        if (existingDate) {\n          hours = existingDate.getHours();\n          minutes = existingDate.getMinutes();\n          seconds = existingDate.getSeconds();\n          milliseconds = existingDate.getMilliseconds();\n        }\n\n        return new Date(\n          year,\n          0,\n          firstThurs.getDate() + addDays,\n          hours,\n          minutes,\n          seconds,\n          milliseconds,\n        );\n      }\n    }\n\n    return NaN;\n  }\n\n  function createDateParser(regexp, mapping) {\n    return function (iso, previousDate) {\n      let parts;\n      let map;\n\n      if (isDate(iso)) {\n        return iso;\n      }\n\n      if (isString(iso)) {\n        // When a date is JSON'ified to wraps itself inside of an extra\n        // set of double quotes. This makes the date parsing code unable\n        // to match the date string and parse it as a date.\n        if (iso.charAt(0) === '\"' && iso.charAt(iso.length - 1) === '\"') {\n          iso = iso.substring(1, iso.length - 1);\n        }\n        if (ISO_DATE_REGEXP.test(iso)) {\n          return new Date(iso);\n        }\n        regexp.lastIndex = 0;\n        parts = regexp.exec(iso);\n\n        if (parts) {\n          parts.shift();\n          if (previousDate) {\n            map = {\n              yyyy: previousDate.getFullYear(),\n              MM: previousDate.getMonth() + 1,\n              dd: previousDate.getDate(),\n              HH: previousDate.getHours(),\n              mm: previousDate.getMinutes(),\n              ss: previousDate.getSeconds(),\n              sss: previousDate.getMilliseconds() / 1000,\n            };\n          } else {\n            map = { yyyy: 1970, MM: 1, dd: 1, HH: 0, mm: 0, ss: 0, sss: 0 };\n          }\n\n          Object.entries(parts).forEach(([index, part]) => {\n            if (index < mapping.length) {\n              map[mapping[index]] = +part;\n            }\n          });\n\n          const date = new Date(\n            map.yyyy,\n            map.MM - 1,\n            map.dd,\n            map.HH,\n            map.mm,\n            map.ss || 0,\n            map.sss * 1000 || 0,\n          );\n          if (map.yyyy < 100) {\n            // In the constructor, 2-digit years map to 1900-1999.\n            // Use `setFullYear()` to set the correct year.\n            date.setFullYear(map.yyyy);\n          }\n\n          return date;\n        }\n      }\n\n      return NaN;\n    };\n  }\n\n  const MONTH_INPUT_FORMAT = /\\b\\d{4}-(0[1-9]|1[0-2])\\b/;\n\n  function createDateInputType(type, regexp, parseDate) {\n    return function dynamicDateInputType(\n      scope,\n      element,\n      attr,\n      ctrl,\n      $filter,\n      $parse,\n    ) {\n      badInputChecker(scope, element, attr, ctrl, type);\n      baseInputType(scope, element, attr, ctrl);\n      let previousDate;\n\n      ctrl.$parsers.push((value) => {\n        if (ctrl.$isEmpty(value)) return null;\n\n        if (regexp.test(value)) {\n          // Do not convert for native HTML\n          if ([\"month\", \"week\", \"datetimelocal\", \"time\", \"date\"].includes(type)) {\n            return value;\n          }\n\n          // Note: We cannot read ctrl.$modelValue, as there might be a different\n          // parser/formatter in the processing chain so that the model\n          // contains some different data format!\n          return parseDateAndConvertTimeZoneToLocal(value, previousDate);\n        }\n        ctrl.$$parserName = type;\n        return undefined;\n      });\n\n      ctrl.$formatters.push(function (value) {\n        if (value && !isString(value)) {\n          throw ngModelMinErr(\"datefmt\", \"Expected `{0}` to be a String\", value);\n        }\n\n        if (type === \"month\") {\n          if (value == null) {\n            return \"\";\n          }\n          if (!MONTH_INPUT_FORMAT.test(value)) {\n            throw ngModelMinErr(\n              \"datefmt\",\n              \"Expected month `{0}` to be a 'YYYY-DD'\",\n              value,\n            );\n          }\n        }\n\n        if (type === \"week\") {\n          if (value == null) {\n            return \"\";\n          }\n          if (!WEEK_REGEXP.test(value)) {\n            throw ngModelMinErr(\n              \"datefmt\",\n              \"Expected week `{0}` to be a 'yyyy-Www'\",\n              value,\n            );\n          }\n        }\n\n        if (type === \"datetimelocal\") {\n          if (value == null) {\n            return \"\";\n          }\n          if (!DATETIMELOCAL_REGEXP.test(value)) {\n            throw ngModelMinErr(\n              \"datefmt\",\n              \"Expected week `{0}` to be a in date time format. See: https://developer.mozilla.org/en-US/docs/Web/HTML/Date_and_time_formats#local_date_and_time_strings\",\n              value,\n            );\n          }\n        }\n\n        return value;\n\n        // if (isValidDate(value)) {\n        //   previousDate = value;\n        //   const timezone = ctrl.$options.getOption(\"timezone\");\n\n        //   if (timezone) {\n        //     previousTimezone = timezone;\n        //     previousDate = convertTimezoneToLocal(previousDate, timezone, true);\n        //   }\n\n        //   return value;\n        // }\n        // previousDate = null;\n        // previousTimezone = null;\n        // return \"\";\n      });\n\n      if (isDefined(attr.min) || attr.ngMin) {\n        let minVal = attr.min || $parse(attr.ngMin)(scope);\n        let parsedMinVal = parseObservedDateValue(\n          isProxy(minVal) ? minVal.$target : minVal,\n        );\n\n        ctrl.$validators.min = function (value) {\n          if (type === \"month\") {\n            return (\n              isUndefined(parsedMinVal) ||\n              parseDate(value) >= parseDate(parsedMinVal)\n            );\n          }\n\n          return (\n            !isValidDate(value) ||\n            isUndefined(parsedMinVal) ||\n            parseDate(value) >= parsedMinVal\n          );\n        };\n        attr.$observe(\"min\", (val) => {\n          if (val !== minVal) {\n            parsedMinVal = parseObservedDateValue(val);\n            minVal = val;\n            ctrl.$validate();\n          }\n        });\n      }\n\n      if (isDefined(attr.max) || attr.ngMax) {\n        let maxVal = attr.max || $parse(attr.ngMax)(scope);\n        let parsedMaxVal = parseObservedDateValue(\n          isProxy(maxVal) ? maxVal.$target : maxVal,\n        );\n\n        ctrl.$validators.max = function (value) {\n          if (type === \"month\") {\n            return (\n              isUndefined(parsedMaxVal) ||\n              parseDate(value) <= parseDate(parsedMaxVal)\n            );\n          }\n          return (\n            !isValidDate(value) ||\n            isUndefined(parsedMaxVal) ||\n            parseDate(value) <= parsedMaxVal\n          );\n        };\n        attr.$observe(\"max\", (val) => {\n          if (val !== maxVal) {\n            parsedMaxVal = parseObservedDateValue(val);\n            maxVal = val;\n            ctrl.$validate();\n          }\n        });\n      }\n\n      function isValidDate(value) {\n        // Invalid Date: getTime() returns NaN\n        return value && !(value.getTime && value.getTime() !== value.getTime());\n      }\n\n      function parseObservedDateValue(val) {\n        return isDefined(val) && !isDate(val)\n          ? parseDateAndConvertTimeZoneToLocal(val) || undefined\n          : val;\n      }\n\n      function parseDateAndConvertTimeZoneToLocal(value, previousDate) {\n        const timezone = ctrl.$options.getOption(\"timezone\");\n\n        let parsedDate = parseDate(value, previousDate);\n\n        if (!Number.isNaN(parsedDate) && timezone) {\n          parsedDate = convertTimezoneToLocal(parsedDate, timezone);\n        }\n        return parsedDate;\n      }\n    };\n  }\n\n  function badInputChecker(scope, element, attr, ctrl, parserName) {\n    const nativeValidation = (ctrl.$$hasNativeValidators = isObject(\n      element.validity,\n    ));\n\n    if (nativeValidation) {\n      ctrl.$parsers.push((value) => {\n        const validity = element[VALIDITY_STATE_PROPERTY] || {};\n        if (validity.badInput || validity.typeMismatch) {\n          ctrl.$$parserName = parserName;\n          return undefined;\n        }\n\n        return value;\n      });\n    }\n  }\n\n  function numberFormatterParser(ctrl) {\n    ctrl.$parsers.push((value) => {\n      if (ctrl.$isEmpty(value)) return null;\n      if (NUMBER_REGEXP.test(value)) return parseFloat(value);\n\n      ctrl.$$parserName = \"number\";\n      return undefined;\n    });\n\n    ctrl.$formatters.push((value) => {\n      if (!ctrl.$isEmpty(value)) {\n        if (!isNumber(value)) {\n          throw ngModelMinErr(\"numfmt\", \"Expected `{0}` to be a number\", value);\n        }\n        value = value.toString();\n      }\n      return value;\n    });\n  }\n\n  function parseNumberAttrVal(val) {\n    if (isDefined(val) && !isNumber(val)) {\n      val = parseFloat(val);\n    }\n    return !isNumberNaN(val) ? val : undefined;\n  }\n\n  function isNumberInteger(num) {\n    // See http://stackoverflow.com/questions/14636536/how-to-check-if-a-variable-is-an-integer-in-javascript#14794066\n    // (minus the assumption that `num` is a number)\n\n    return (num | 0) === num;\n  }\n\n  function countDecimals(num) {\n    const numString = num.toString();\n    const decimalSymbolIndex = numString.indexOf(\".\");\n\n    if (decimalSymbolIndex === -1) {\n      if (num > -1 && num < 1) {\n        // It may be in the exponential notation format (`1e-X`)\n        const match = /e-(\\d+)$/.exec(numString);\n\n        if (match) {\n          return Number(match[1]);\n        }\n      }\n\n      return 0;\n    }\n\n    return numString.length - decimalSymbolIndex - 1;\n  }\n\n  function isValidForStep(viewValue, stepBase, step) {\n    // At this point `stepBase` and `step` are expected to be non-NaN values\n    // and `viewValue` is expected to be a valid stringified number.\n    let value = Number(viewValue);\n\n    const isNonIntegerValue = !isNumberInteger(value);\n    const isNonIntegerStepBase = !isNumberInteger(stepBase);\n    const isNonIntegerStep = !isNumberInteger(step);\n\n    // Due to limitations in Floating Point Arithmetic (e.g. `0.3 - 0.2 !== 0.1` or\n    // `0.5 % 0.1 !== 0`), we need to convert all numbers to integers.\n    if (isNonIntegerValue || isNonIntegerStepBase || isNonIntegerStep) {\n      const valueDecimals = isNonIntegerValue ? countDecimals(value) : 0;\n      const stepBaseDecimals = isNonIntegerStepBase ? countDecimals(stepBase) : 0;\n      const stepDecimals = isNonIntegerStep ? countDecimals(step) : 0;\n\n      const decimalCount = Math.max(\n        valueDecimals,\n        stepBaseDecimals,\n        stepDecimals,\n      );\n      const multiplier = 10 ** decimalCount;\n\n      value *= multiplier;\n      stepBase *= multiplier;\n      step *= multiplier;\n\n      if (isNonIntegerValue) value = Math.round(value);\n      if (isNonIntegerStepBase) stepBase = Math.round(stepBase);\n      if (isNonIntegerStep) step = Math.round(step);\n    }\n\n    return (value - stepBase) % step === 0;\n  }\n\n  function numberInputType(scope, element, attr, ctrl, $filter, $parse) {\n    badInputChecker(scope, element, attr, ctrl, \"number\");\n    numberFormatterParser(ctrl);\n    baseInputType(scope, element, attr, ctrl);\n\n    let parsedMinVal;\n\n    if (isDefined(attr.min) || attr.ngMin) {\n      let minVal = attr.min || $parse(attr.ngMin)(scope);\n      parsedMinVal = parseNumberAttrVal(minVal);\n\n      ctrl.$validators.min = function (modelValue, viewValue) {\n        return (\n          ctrl.$isEmpty(viewValue) ||\n          isUndefined(parsedMinVal) ||\n          viewValue >= parsedMinVal\n        );\n      };\n\n      attr.$observe(\"min\", (val) => {\n        if (val !== minVal) {\n          parsedMinVal = parseNumberAttrVal(val);\n          minVal = val;\n          // TODO(matsko): implement validateLater to reduce number of validations\n          ctrl.$validate();\n        }\n      });\n    }\n\n    if (isDefined(attr.max) || attr.ngMax) {\n      let maxVal = attr.max || $parse(attr.ngMax)(scope);\n      let parsedMaxVal = parseNumberAttrVal(maxVal);\n\n      ctrl.$validators.max = function (modelValue, viewValue) {\n        return (\n          ctrl.$isEmpty(viewValue) ||\n          isUndefined(parsedMaxVal) ||\n          viewValue <= parsedMaxVal\n        );\n      };\n\n      attr.$observe(\"max\", (val) => {\n        if (val !== maxVal) {\n          parsedMaxVal = parseNumberAttrVal(val);\n          maxVal = val;\n          // TODO(matsko): implement validateLater to reduce number of validations\n          ctrl.$validate();\n        }\n      });\n    }\n\n    if (isDefined(attr.step) || attr.ngStep) {\n      let stepVal = attr.step || $parse(attr.ngStep)(scope);\n      let parsedStepVal = parseNumberAttrVal(stepVal);\n\n      ctrl.$validators.step = function (modelValue, viewValue) {\n        return (\n          ctrl.$isEmpty(viewValue) ||\n          isUndefined(parsedStepVal) ||\n          isValidForStep(viewValue, parsedMinVal || 0, parsedStepVal)\n        );\n      };\n\n      attr.$observe(\"step\", (val) => {\n        // TODO(matsko): implement validateLater to reduce number of validations\n        if (val !== stepVal) {\n          parsedStepVal = parseNumberAttrVal(val);\n          stepVal = val;\n          ctrl.$validate();\n        }\n      });\n    }\n  }\n\n  function rangeInputType(scope, element, attr, ctrl) {\n    badInputChecker(scope, element, attr, ctrl, \"range\");\n    numberFormatterParser(ctrl);\n    baseInputType(scope, element, attr, ctrl);\n\n    const supportsRange = ctrl.$$hasNativeValidators && element.type === \"range\";\n    let minVal = supportsRange ? 0 : undefined;\n    let maxVal = supportsRange ? 100 : undefined;\n    let stepVal = supportsRange ? 1 : undefined;\n    const { validity } = element;\n    const hasMinAttr = isDefined(attr.min);\n    const hasMaxAttr = isDefined(attr.max);\n    const hasStepAttr = isDefined(attr.step);\n\n    const originalRender = ctrl.$render;\n\n    ctrl.$render =\n      supportsRange &&\n      isDefined(validity.rangeUnderflow) &&\n      isDefined(validity.rangeOverflow)\n        ? // Browsers that implement range will set these values automatically, but reading the adjusted values after\n          // $render would cause the min / max validators to be applied with the wrong value\n          function rangeRender() {\n            originalRender();\n            ctrl.$setViewValue(element.value);\n          }\n        : originalRender;\n\n    if (hasMinAttr) {\n      minVal = parseNumberAttrVal(attr.min);\n\n      ctrl.$validators.min = supportsRange\n        ? // Since all browsers set the input to a valid value, we don't need to check validity\n          function noopMinValidator() {\n            return true;\n          }\n        : // non-support browsers validate the min val\n          function minValidator(modelValue, viewValue) {\n            return (\n              ctrl.$isEmpty(viewValue) ||\n              isUndefined(minVal) ||\n              viewValue >= minVal\n            );\n          };\n\n      setInitialValueAndObserver(\"min\", minChange);\n    }\n\n    if (hasMaxAttr) {\n      maxVal = parseNumberAttrVal(attr.max);\n\n      ctrl.$validators.max = supportsRange\n        ? // Since all browsers set the input to a valid value, we don't need to check validity\n          function noopMaxValidator() {\n            return true;\n          }\n        : // non-support browsers validate the max val\n          function maxValidator(modelValue, viewValue) {\n            return (\n              ctrl.$isEmpty(viewValue) ||\n              isUndefined(maxVal) ||\n              viewValue <= maxVal\n            );\n          };\n\n      setInitialValueAndObserver(\"max\", maxChange);\n    }\n\n    if (hasStepAttr) {\n      stepVal = parseNumberAttrVal(attr.step);\n\n      ctrl.$validators.step = supportsRange\n        ? function nativeStepValidator() {\n            // Currently, only FF implements the spec on step change correctly (i.e. adjusting the\n            // input element value to a valid value). It's possible that other browsers set the stepMismatch\n            // validity error instead, so we can at least report an error in that case.\n            return !validity.stepMismatch;\n          }\n        : // ngStep doesn't set the setp attr, so the browser doesn't adjust the input value as setting step would\n          function stepValidator(modelValue, viewValue) {\n            return (\n              ctrl.$isEmpty(viewValue) ||\n              isUndefined(stepVal) ||\n              isValidForStep(viewValue, minVal || 0, stepVal)\n            );\n          };\n\n      setInitialValueAndObserver(\"step\", stepChange);\n    }\n\n    function setInitialValueAndObserver(htmlAttrName, changeFn) {\n      // interpolated attributes set the attribute value only after a digest, but we need the\n      // attribute value when the input is first rendered, so that the browser can adjust the\n      // input value based on the min/max value\n      element.setAttribute(htmlAttrName, attr[htmlAttrName]);\n      let oldVal = attr[htmlAttrName];\n      attr.$observe(htmlAttrName, (val) => {\n        if (val !== oldVal) {\n          oldVal = val;\n          changeFn(val);\n        }\n      });\n    }\n\n    function minChange(val) {\n      minVal = parseNumberAttrVal(val);\n      // ignore changes before model is initialized\n      if (isNumberNaN(ctrl.$modelValue)) {\n        return;\n      }\n\n      if (supportsRange) {\n        let elVal = element.value;\n        // IE11 doesn't set the el val correctly if the minVal is greater than the element value\n        if (minVal > elVal) {\n          elVal = minVal;\n          element.value = elVal;\n        }\n        ctrl.$setViewValue(elVal);\n      } else {\n        // TODO(matsko): implement validateLater to reduce number of validations\n        ctrl.$validate();\n      }\n    }\n\n    function maxChange(val) {\n      maxVal = parseNumberAttrVal(val);\n      // ignore changes before model is initialized\n      if (isNumberNaN(ctrl.$modelValue)) {\n        return;\n      }\n\n      if (supportsRange) {\n        let elVal = element.value;\n        // IE11 doesn't set the el val correctly if the maxVal is less than the element value\n        if (maxVal < elVal) {\n          element.value = maxVal;\n          // IE11 and Chrome don't set the value to the minVal when max < min\n          elVal = maxVal < minVal ? minVal : maxVal;\n        }\n        ctrl.$setViewValue(elVal);\n      } else {\n        // TODO(matsko): implement validateLater to reduce number of validations\n        ctrl.$validate();\n      }\n    }\n\n    function stepChange(val) {\n      stepVal = parseNumberAttrVal(val);\n      // ignore changes before model is initialized\n      if (isNumberNaN(ctrl.$modelValue)) {\n        return;\n      }\n\n      // Some browsers don't adjust the input value correctly, but set the stepMismatch error\n      if (!supportsRange) {\n        // TODO(matsko): implement validateLater to reduce number of validations\n        ctrl.$validate();\n      } else if (ctrl.$viewValue !== element.value) {\n        ctrl.$setViewValue(element.value);\n      }\n    }\n  }\n\n  function urlInputType(scope, element, attr, ctrl) {\n    // Note: no badInputChecker here by purpose as `url` is only a validation\n    // in browsers, i.e. we can always read out input.value even if it is not valid!\n    baseInputType(scope, element, attr, ctrl);\n    stringBasedInputType(ctrl);\n\n    ctrl.$validators.url = function (modelValue, viewValue) {\n      const value = modelValue || viewValue;\n      return ctrl.$isEmpty(value) || URL_REGEXP.test(value);\n    };\n  }\n\n  function emailInputType(scope, element, attr, ctrl) {\n    // Note: no badInputChecker here by purpose as `url` is only a validation\n    // in browsers, i.e. we can always read out input.value even if it is not valid!\n    baseInputType(scope, element, attr, ctrl);\n    stringBasedInputType(ctrl);\n\n    ctrl.$validators.email = function (modelValue, viewValue) {\n      const value = modelValue || viewValue;\n      return ctrl.$isEmpty(value) || EMAIL_REGEXP.test(value);\n    };\n  }\n\n  function radioInputType(scope, element, attr, ctrl) {\n    const doTrim = !attr.ngTrim || trim(attr.ngTrim) !== \"false\";\n    // make the name unique, if not defined\n    if (isUndefined(attr.name)) {\n      element.setAttribute(\"name\", nextUid());\n    }\n\n    const listener = function (ev) {\n      let value;\n      if (element.checked) {\n        value = attr.value;\n        if (doTrim) {\n          value = trim(value);\n        }\n        ctrl.$setViewValue(value, ev && ev.type);\n      }\n    };\n\n    element.addEventListener(\"change\", listener);\n    // NgModelController call\n    ctrl.$render = function () {\n      let { value } = attr;\n      if (doTrim) {\n        value = trim(value);\n      }\n      const deproxy = isProxy(ctrl.$viewValue)\n        ? ctrl.$viewValue.$target\n        : ctrl.$viewValue;\n      // the proxy may reach down two levels\n      element.checked =\n        (isProxy(value) ? value.$target : value) ===\n        (isProxy(deproxy) ? deproxy.$target : deproxy);\n    };\n\n    attr.$observe(\"value\", ctrl.$render);\n  }\n\n  function parseConstantExpr($parse, context, name, expression, fallback) {\n    let parseFn;\n    if (isDefined(expression)) {\n      parseFn = $parse(expression);\n      if (!parseFn.constant) {\n        throw ngModelMinErr(\n          \"constexpr\",\n          \"Expected constant expression for `{0}`, but saw \" + \"`{1}`.\",\n          name,\n          expression,\n        );\n      }\n      return parseFn(context);\n    }\n    return fallback;\n  }\n\n  function checkboxInputType(scope, element, attr, ctrl, $filter, $parse) {\n    const trueValue = parseConstantExpr(\n      $parse,\n      scope,\n      \"ngTrueValue\",\n      attr.ngTrueValue,\n      true,\n    );\n    const falseValue = parseConstantExpr(\n      $parse,\n      scope,\n      \"ngFalseValue\",\n      attr.ngFalseValue,\n      false,\n    );\n\n    const listener = function (ev) {\n      ctrl.$setViewValue(element.checked, ev && ev.type);\n    };\n\n    element.addEventListener(\"change\", listener);\n\n    ctrl.$render = function () {\n      element.checked = ctrl.$viewValue;\n    };\n\n    // Override the standard `$isEmpty` because the $viewValue of an empty checkbox is always set to `false`\n    // This is because of the parser below, which compares the `$modelValue` with `trueValue` to convert\n    // it to a boolean.\n    ctrl.$isEmpty = function (value) {\n      return value === false;\n    };\n\n    ctrl.$formatters.push((value) => equals$1(value, trueValue));\n\n    ctrl.$parsers.push((value) => (value ? trueValue : falseValue));\n  }\n\n  inputDirective.$inject = [\"$filter\", \"$parse\"];\n\n  /**\n   * @param {*} $filter\n   * @param {*} $parse\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function inputDirective($filter, $parse) {\n    return {\n      restrict: \"E\",\n      require: [\"?ngModel\"],\n      link: {\n        pre(scope, element, attr, ctrls) {\n          if (ctrls[0]) {\n            (inputType[lowercase(attr[\"type\"])] || inputType.text)(\n              scope,\n              element,\n              attr,\n              ctrls[0],\n              $filter,\n              $parse,\n            );\n          }\n        },\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function hiddenInputBrowserCacheDirective() {\n    const valueProperty = {\n      configurable: true,\n      enumerable: false,\n      get() {\n        return this.getAttribute(\"value\") || \"\";\n      },\n      set(val) {\n        this.setAttribute(\"value\", val);\n      },\n    };\n\n    return {\n      restrict: \"E\",\n      priority: 200,\n      compile(_, attr) {\n        if (lowercase(attr[\"type\"]) !== \"hidden\") {\n          return;\n        }\n\n        return {\n          pre(scope, element) {\n            const node = element;\n\n            // Support: Edge\n            // Moving the DOM around prevents autofillling\n            if (node.parentNode) {\n              node.parentNode.insertBefore(node, node.nextSibling);\n            }\n\n            // Support: FF, IE\n            // Avoiding direct assignment to .value prevents autofillling\n            if (Object.defineProperty) {\n              Object.defineProperty(node, \"value\", valueProperty);\n            }\n          },\n        };\n      },\n    };\n  }\n\n  const CONSTANT_VALUE_REGEXP = /^(true|false|\\d+)$/;\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngValueDirective() {\n    /**\n     *  inputs use the value attribute as their default value if the value property is not set.\n     *  Once the value property has been set (by adding input), it will not react to changes to\n     *  the value attribute anymore. Setting both attribute and property fixes this behavior, and\n     *  makes it possible to use ngValue as a sort of one-way bind.\n     */\n    function updateElementValue(element, attr, value) {\n      // TODO REMOVE IS SUPPORT\n      // Support: IE9 only\n      // In IE9 values are converted to string (e.g. `input.value = null` results in `input.value === 'null'`).\n      element[\"value\"] = isDefined(value)\n        ? isProxy(value)\n          ? value.$target\n          : value\n        : null;\n      attr.$set(\"value\", value);\n    }\n\n    return {\n      restrict: \"A\",\n      priority: 100,\n      compile(tpl, tplAttr) {\n        if (CONSTANT_VALUE_REGEXP.test(tplAttr[\"ngValue\"])) {\n          return function ngValueConstantLink(scope, elm, attr) {\n            const value = scope.$eval(attr[\"ngValue\"]);\n            updateElementValue(elm, attr, value);\n          };\n        }\n        return function ngValueLink(scope, elm, attr) {\n          scope.$watch(attr[\"ngValue\"], (value) => {\n            updateElementValue(elm, attr, value);\n          });\n        };\n      },\n    };\n  }\n\n  scriptDirective.$inject = [\"$templateCache\"];\n\n  /**\n   * @param {import('../../services/template-cache/interface.ts').TemplateCache} $templateCache\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function scriptDirective($templateCache) {\n    return {\n      restrict: \"E\",\n      terminal: true,\n      compile(element, attr) {\n        if (attr[\"type\"] === \"text/ng-template\") {\n          $templateCache.set(attr[\"id\"], element.innerText);\n        }\n      },\n    };\n  }\n\n  /**\n   * The controller for the {@link ng.select select} directive.\n   * The controller exposes a few utility methods that can be used to augment\n   * the behavior of a regular or an {@link ng.ngOptions ngOptions} select element.\n   */\n  class SelectController {\n    static $nonscope = [\n      \"ngModelCtrl\",\n      \"selectValueMap\",\n      \"emptyOption\",\n      \"optionsMap\",\n      \"$scope\",\n      \"$element\",\n    ];\n\n    /**\n     * @type {Array<string>}\n     */\n    /* @ignore */ static $inject = [\"$element\", \"$scope\"];\n\n    /**\n     * @param {HTMLSelectElement} $element\n     * @param {import('../../core/scope/scope.js').Scope} $scope\n     */\n    constructor($element, $scope) {\n      /** @type {HTMLSelectElement} */\n      this.$element = $element;\n\n      /** @type {import('../../core/scope/scope.js').Scope} */\n      this.$scope = $scope;\n\n      /** @type {Object<string, any>} */\n      this.selectValueMap = {};\n\n      /** @type {any} */\n      this.ngModelCtrl = {};\n\n      /** @type {boolean} */\n      this.multiple = false;\n\n      /** @type {HTMLOptionElement} */\n      this.unknownOption = document.createElement(\"option\");\n\n      /** @type {boolean} */\n      this.hasEmptyOption = false;\n\n      /** @type {HTMLOptionElement|undefined} */\n      this.emptyOption = undefined;\n\n      /** @type {Map<any, number>} */\n      this.optionsMap = new Map();\n\n      /** @type {boolean} */\n      this.renderScheduled = false;\n\n      /** @type {boolean} */\n      this.updateScheduled = false;\n\n      $scope.$on(\"$destroy\", () => {\n        // disable unknown option so that we don't do work when the whole select is being destroyed\n        this.renderUnknownOption = () => {};\n      });\n    }\n\n    /**\n     * Render the unknown option when the viewValue doesn't match any options.\n     * @param {*} val\n     */\n    renderUnknownOption(val) {\n      const unknownVal = this.generateUnknownOptionValue(val);\n      this.unknownOption.value = unknownVal;\n      this.$element.prepend(this.unknownOption);\n      this.unknownOption.selected = true;\n      this.unknownOption.setAttribute(\"selected\", \"selected\");\n      this.$element.value = unknownVal;\n    }\n\n    /**\n     * Update the unknown option if it's already rendered.\n     * @param {*} val\n     */\n    updateUnknownOption(val) {\n      const unknownVal = this.generateUnknownOptionValue(val);\n      this.unknownOption.value = unknownVal;\n      this.unknownOption.selected = true;\n      this.unknownOption.setAttribute(\"selected\", \"selected\");\n      this.$element.value = unknownVal;\n    }\n\n    /**\n     * Generate a special value used for unknown options.\n     * @param {*} val\n     * @returns {string}\n     */\n    generateUnknownOptionValue(val) {\n      if (isUndefined(val)) {\n        return `? undefined:undefined ?`;\n      }\n      return `? ${hashKey(val)} ?`;\n    }\n\n    /**\n     * Remove the unknown option from the select element if it exists.\n     */\n    removeUnknownOption() {\n      if (this.unknownOption.parentElement) this.unknownOption.remove();\n    }\n\n    /**\n     * Select the empty option (value=\"\") if it exists.\n     */\n    selectEmptyOption() {\n      if (this.emptyOption) {\n        this.$element.value = \"\";\n        this.emptyOption.selected = true;\n        this.emptyOption.setAttribute(\"selected\", \"selected\");\n      }\n    }\n\n    /**\n     * Unselect the empty option if present.\n     */\n    unselectEmptyOption() {\n      if (this.hasEmptyOption) {\n        this.emptyOption.selected = false;\n      }\n    }\n\n    /**\n     * Read the current value from the select element.\n     * @returns {*|null}\n     */\n    readValue() {\n      const val = this.$element.value;\n      const realVal = val in this.selectValueMap ? this.selectValueMap[val] : val;\n      return this.hasOption(realVal) ? realVal : null;\n    }\n\n    /**\n     * Write a value to the select control.\n     * @param {*} value\n     */\n    writeValue(value) {\n      const currentlySelectedOption =\n        this.$element.options[this.$element.selectedIndex];\n      if (currentlySelectedOption) currentlySelectedOption.selected = false;\n\n      if (this.hasOption(value)) {\n        this.removeUnknownOption();\n\n        const hashedVal = hashKey(value);\n        this.$element.value =\n          hashedVal in this.selectValueMap ? hashedVal : value;\n        const selectedOption = this.$element.options[this.$element.selectedIndex];\n        if (!selectedOption) {\n          this.selectUnknownOrEmptyOption(value);\n        } else {\n          selectedOption.selected = true;\n        }\n      } else {\n        this.selectUnknownOrEmptyOption(value);\n      }\n    }\n\n    /**\n     * Register a new option with the controller.\n     * @param {*} value\n     * @param {HTMLOptionElement} element\n     */\n    addOption(value, element) {\n      if (element.nodeType === Node.COMMENT_NODE) return;\n\n      assertNotHasOwnProperty(value, '\"option value\"');\n      if (value === \"\") {\n        this.hasEmptyOption = true;\n        this.emptyOption = element;\n      }\n      const count = this.optionsMap.get(value) || 0;\n      this.optionsMap.set(value, count + 1);\n      this.scheduleRender();\n    }\n\n    /**\n     * Remove an option from the controller.\n     * @param {*} value\n     */\n    removeOption(value) {\n      const count = this.optionsMap.get(value);\n      if (count) {\n        if (count === 1) {\n          this.optionsMap.delete(value);\n          if (value === \"\") {\n            this.hasEmptyOption = false;\n            this.emptyOption = undefined;\n          }\n        } else {\n          this.optionsMap.set(value, count - 1);\n        }\n      }\n    }\n\n    /**\n     * Check if an option exists for the given value.\n     * @param {*} value\n     * @returns {boolean}\n     */\n    hasOption(value) {\n      return !!this.optionsMap.get(value);\n    }\n\n    /**\n     * @returns {boolean} Whether the select element currently has an empty option.\n     */\n    $hasEmptyOption() {\n      return this.hasEmptyOption;\n    }\n\n    /**\n     * @returns {boolean} Whether the unknown option is currently selected.\n     */\n    $isUnknownOptionSelected() {\n      return this.$element.options[0] === this.unknownOption;\n    }\n\n    /**\n     * @returns {boolean} Whether the empty option is selected.\n     */\n    $isEmptyOptionSelected() {\n      return (\n        this.hasEmptyOption &&\n        this.$element.options[this.$element.selectedIndex] === this.emptyOption\n      );\n    }\n\n    /**\n     * Select unknown or empty option depending on the value.\n     * @param {*} value\n     */\n    selectUnknownOrEmptyOption(value) {\n      if (value == null && this.emptyOption) {\n        this.removeUnknownOption();\n        this.selectEmptyOption();\n      } else if (this.unknownOption.parentElement) {\n        this.updateUnknownOption(value);\n      } else {\n        this.renderUnknownOption(value);\n      }\n    }\n\n    /**\n     * Schedule a render at the end of the digest cycle.\n     */\n    scheduleRender() {\n      if (this.renderScheduled) return;\n      this.renderScheduled = true;\n      this.$scope.$postUpdate(() => {\n        this.renderScheduled = false;\n        this.ngModelCtrl.$render();\n      });\n    }\n\n    /**\n     * Schedule a view value update at the end of the digest cycle.\n     * @param {boolean} [renderAfter=false]\n     */\n    scheduleViewValueUpdate(renderAfter = false) {\n      if (this.updateScheduled) return;\n\n      this.updateScheduled = true;\n\n      this.$scope.$postUpdate(() => {\n        if (this.$scope.$$destroyed) return;\n\n        this.updateScheduled = false;\n        this.ngModelCtrl.$setViewValue(this.readValue());\n        if (renderAfter) this.ngModelCtrl.$render();\n      });\n    }\n\n    /**\n     * Register an option with interpolation or dynamic value/text.\n     * @param {any} optionScope\n     * @param {HTMLOptionElement} optionElement\n     * @param {any} optionAttrs\n     * @param {Function} [interpolateValueFn]\n     * @param {Function} [interpolateTextFn]\n     */\n    registerOption(\n      optionScope,\n      optionElement,\n      optionAttrs,\n      interpolateValueFn,\n      interpolateTextFn,\n    ) {\n      let oldVal;\n      let hashedVal;\n      if (optionAttrs.$attr.ngValue) {\n        optionAttrs.$observe(\"value\", (newVal) => {\n          let removal;\n          const previouslySelected = optionElement.selected;\n\n          if (isDefined(hashedVal)) {\n            this.removeOption(oldVal);\n            delete this.selectValueMap[hashedVal];\n            removal = true;\n          }\n\n          hashedVal = hashKey(newVal);\n          oldVal = newVal;\n          this.selectValueMap[hashedVal] = newVal;\n          this.addOption(newVal, optionElement);\n          optionElement.setAttribute(\"value\", hashedVal);\n\n          if (removal && previouslySelected) {\n            this.scheduleViewValueUpdate();\n          }\n        });\n      } else if (interpolateValueFn) {\n        optionAttrs.$observe(\"value\", (newVal) => {\n          this.readValue();\n          let removal;\n          const previouslySelected = optionElement.selected;\n\n          if (isDefined(oldVal)) {\n            this.removeOption(oldVal);\n            removal = true;\n          }\n          oldVal = newVal;\n          this.addOption(newVal, optionElement);\n\n          if (removal && previouslySelected) {\n            this.scheduleViewValueUpdate();\n          }\n        });\n      } else if (interpolateTextFn) {\n        optionScope.value = interpolateTextFn(optionScope);\n        if (!optionAttrs[\"value\"]) {\n          optionAttrs.$set(\"value\", optionScope.value);\n          this.addOption(optionScope.value, optionElement);\n        }\n\n        let oldVal;\n        optionScope.$watch(\"value\", () => {\n          let newVal = interpolateTextFn(optionScope);\n          if (!optionAttrs[\"value\"]) {\n            optionAttrs.$set(\"value\", newVal);\n          }\n          const previouslySelected = optionElement.selected;\n          if (oldVal !== newVal) {\n            this.removeOption(oldVal);\n            oldVal = newVal;\n          }\n          this.addOption(newVal, optionElement);\n\n          if (oldVal && previouslySelected) {\n            this.scheduleViewValueUpdate();\n          }\n        });\n      } else {\n        this.addOption(optionAttrs.value, optionElement);\n      }\n\n      optionAttrs.$observe(\"disabled\", (newVal) => {\n        if (newVal === \"true\" || (newVal && optionElement.selected)) {\n          if (this.multiple) {\n            this.scheduleViewValueUpdate(true);\n          } else {\n            this.ngModelCtrl.$setViewValue(null);\n            this.ngModelCtrl.$render();\n          }\n        }\n      });\n\n      optionElement.addEventListener(\"$destroy\", () => {\n        const currentValue = this.readValue();\n        const removeValue = optionAttrs.value;\n\n        this.removeOption(removeValue);\n        this.scheduleRender();\n\n        if (\n          (this.multiple &&\n            currentValue &&\n            currentValue.indexOf(removeValue) !== -1) ||\n          currentValue === removeValue\n        ) {\n          this.scheduleViewValueUpdate(true);\n        }\n      });\n    }\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function selectDirective() {\n    return {\n      restrict: \"E\",\n      require: [\"select\", \"?ngModel\"],\n      controller: SelectController,\n      priority: 1,\n      link: {\n        pre: selectPreLink,\n        post: selectPostLink,\n      },\n    };\n\n    function selectPreLink(_scope, element, attr, ctrls) {\n      /** @type {SelectController} */\n      const selectCtrl = ctrls[0];\n      /** @type {import(\"../model/model.js\").NgModelController} */\n      const ngModelCtrl = ctrls[1];\n\n      // if ngModel is not defined, we don't need to do anything but set the registerOption\n      // function to noop, so options don't get added internally\n      if (!ngModelCtrl) {\n        selectCtrl.registerOption = () => {};\n        return;\n      }\n      selectCtrl[\"ngModelCtrl\"] = ngModelCtrl;\n\n      // When the selected item(s) changes we delegate getting the value of the select control\n      // to the `readValue` method, which can be changed if the select can have multiple\n      // selected values or if the options are being generated by `ngOptions`\n      element.addEventListener(\"change\", () => {\n        selectCtrl.removeUnknownOption();\n        const viewValue = selectCtrl.readValue();\n        ngModelCtrl.$setViewValue(viewValue);\n      });\n\n      // If the select allows multiple values then we need to modify how we read and write\n      // values from and to the control; also what it means for the value to be empty and\n      // we have to add an extra watch since ngModel doesn't work well with arrays - it\n      // doesn't trigger rendering if only an item in the array changes.\n      if (attr.multiple) {\n        selectCtrl.multiple = true;\n\n        // Read value now needs to check each option to see if it is selected\n        selectCtrl.readValue = function () {\n          const array = [];\n          /**\n           * @type {HTMLCollection}\n           */\n          const options = element.getElementsByTagName(\"option\");\n          Array.from(options).forEach(\n            /**\n             * @param {HTMLOptionElement} option\n             */\n            (option) => {\n              if (option.selected && !option.disabled) {\n                const val = option.value;\n                array.push(\n                  val in selectCtrl.selectValueMap\n                    ? selectCtrl.selectValueMap[val]\n                    : val,\n                );\n              }\n            },\n          );\n          return array;\n        };\n\n        // Write value now needs to set the selected property of each matching option\n        selectCtrl.writeValue = function (value) {\n          /**\n           * @type {HTMLCollection}\n           */\n          const options = element.getElementsByTagName(\"option\");\n          Array.from(options).forEach(\n            /**\n             * @param {HTMLOptionElement} option\n             */\n            (option) => {\n              const shouldBeSelected =\n                !!value &&\n                (includes(value, option.value) ||\n                  includes(value, selectCtrl.selectValueMap[option.value]));\n              const currentlySelected = option.selected;\n\n              // Support: IE 9-11 only, Edge 12-15+\n              // In IE and Edge adding options to the selection via shift+click/UP/DOWN\n              // will de-select already selected options if \"selected\" on those options was set\n              // more than once (i.e. when the options were already selected)\n              // So we only modify the selected property if necessary.\n              // Note: this behavior cannot be replicated via unit tests because it only shows in the\n              // actual user interface.\n              if (shouldBeSelected !== currentlySelected) {\n                option.selected = shouldBeSelected;\n              }\n            },\n          );\n        };\n\n        // we have to do it on each watch since ngModel watches reference, but\n        // we need to work of an array, so we need to see if anything was inserted/removed\n        let lastView;\n        let lastViewRef = NaN;\n        if (\n          lastViewRef === ngModelCtrl.$viewValue &&\n          !equals$1(lastView, ngModelCtrl.$viewValue)\n        ) {\n          lastView = shallowCopy(ngModelCtrl.$viewValue);\n          ngModelCtrl.$render();\n        }\n        lastViewRef = ngModelCtrl.$viewValue;\n\n        // If we are a multiple select then value is now a collection\n        // so the meaning of $isEmpty changes\n        ngModelCtrl.$isEmpty = function (value) {\n          return !value || value.length === 0;\n        };\n      }\n    }\n\n    function selectPostLink(_scope, _element, _attrs, ctrls) {\n      // if ngModel is not defined, we don't need to do anything\n      const ngModelCtrl = ctrls[1];\n      if (!ngModelCtrl) return;\n\n      const selectCtrl = ctrls[0];\n\n      // We delegate rendering to the `writeValue` method, which can be changed\n      // if the select can have multiple selected values or if the options are being\n      // generated by `ngOptions`.\n      // This must be done in the postLink fn to prevent $render to be called before\n      // all nodes have been linked correctly.\n      ngModelCtrl.$render = function () {\n        selectCtrl.writeValue(ngModelCtrl.$viewValue);\n      };\n    }\n  }\n\n  // The option directive is purely designed to communicate the existence (or lack of)\n  // of dynamically created (and destroyed) option elements to their containing select\n  // directive via its controller.\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  optionDirective.$inject = [\"$interpolate\"];\n  function optionDirective($interpolate) {\n    return {\n      restrict: \"E\",\n      priority: 100,\n      compile(element, attr) {\n        let interpolateValueFn;\n        let interpolateTextFn;\n\n        if (isDefined(attr.ngValue)) ; else if (isDefined(attr.value)) {\n          // If the value attribute is defined, check if it contains an interpolation\n          interpolateValueFn = $interpolate(attr.value, true);\n        } else {\n          // If the value attribute is not defined then we fall back to the\n          // text content of the option element, which may be interpolated\n          interpolateTextFn = $interpolate(element.textContent, true);\n          if (!interpolateTextFn) {\n            attr.$set(\"value\", element.textContent);\n          }\n        }\n\n        return function (scope, element, attr) {\n          // This is an optimization over using ^^ since we don't want to have to search\n          // all the way to the root of the DOM for every single option element\n          const selectCtrlName = \"$selectController\";\n          const parent = element.parentElement;\n          const selectCtrl =\n            getCacheData(parent, selectCtrlName) ||\n            getCacheData(parent.parentElement, selectCtrlName); // in case we are in optgroup\n\n          if (selectCtrl) {\n            selectCtrl.registerOption(\n              scope,\n              element,\n              attr,\n              interpolateValueFn,\n              interpolateTextFn,\n            );\n          }\n        };\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngBindDirective() {\n    return {\n      /**\n       * @param {import('../../core/scope/scope.js').Scope} scope\n       * @param {Element} element\n       * @param {import('../../core/compile/attributes.js').Attributes} attr\n       */\n      link(scope, element, attr) {\n        scope.$watch(\n          attr[\"ngBind\"],\n          (value) => {\n            element.textContent = stringify$1(\n              isProxy(value) ? value.$target : value,\n            );\n          },\n          isDefined(attr[\"lazy\"]),\n        );\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngBindTemplateDirective() {\n    return {\n      /**\n       * @param {import('../../core/scope/scope.js').Scope} _scope\n       * @param {Element} element\n       * @param {import('../../core/compile/attributes.js').Attributes} attr\n       */\n      link(_scope, element, attr) {\n        attr.$observe(\"ngBindTemplate\", (value) => {\n          element.textContent = isUndefined(value) ? \"\" : value;\n        });\n      },\n    };\n  }\n\n  ngBindHtmlDirective.$inject = [$injectTokens.$parse];\n  /**\n   * @param {import('../../core/parse/interface.ts').ParseService} $parse\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngBindHtmlDirective($parse) {\n    return {\n      restrict: \"A\",\n      compile(_tElement, tAttrs) {\n        $parse(tAttrs[\"ngBindHtml\"]); // checks for interpolation errors\n        return (\n          /**\n           * @param {import('../../core/scope/scope.js').Scope} scope\n           * @param {Element} element\n           */\n          (scope, element) => {\n            scope.$watch(tAttrs[\"ngBindHtml\"], (val) => {\n              if (isUndefined(val) || isNull(val)) {\n                val = \"\";\n              }\n              element.innerHTML = val;\n            });\n          }\n        );\n      },\n    };\n  }\n\n  /**\n   * @param {string} name\n   * @param {boolean|number} selector\n   * @returns {() => import(\"../../interface.ts\").Directive}\n   */\n  function classDirective(name, selector) {\n    name = `ngClass${name}`;\n\n    return function () {\n      return {\n        /**\n         * @param {import(\"../../core/scope/scope.js\").Scope} scope\n         * @param {Element} element\n         * @param {import(\"../../core/compile/attributes\").Attributes} attr\n         */\n        link(scope, element, attr) {\n          let classCounts = getCacheData(element, \"$classCounts\");\n          let oldModulo = true;\n          /** @type {string|undefined} */\n          let oldClassString;\n\n          if (!classCounts) {\n            // Use Object.create(null) to prevent class assumptions involving property\n            // names in Object.prototype\n            classCounts = Object.create(null);\n            setCacheData(element, \"$classCounts\", classCounts);\n          }\n\n          if (name !== \"ngClass\") {\n            scope.$watch(\"$index\", () => {\n              ngClassIndexWatchAction(scope[\"$index\"] & 1);\n            });\n          }\n          scope.$watch(attr[name], (val) => {\n            ngClassWatchAction(toClassString(val));\n          });\n\n          /**\n           * @param {string} classString\n           */\n          function addClasses(classString) {\n            classString = digestClassCounts(split(classString), 1);\n            if (hasAnimate(element)) {\n              attr.$addClass(classString);\n            } else {\n              scope.$postUpdate(() => {\n                if (classString !== \"\") {\n                  element.classList.add(...classString.trim().split(\" \"));\n                }\n              });\n            }\n          }\n\n          /**\n           * @param {string} classString\n           */\n          function removeClasses(classString) {\n            classString = digestClassCounts(split(classString), -1);\n            if (hasAnimate(element)) {\n              attr.$removeClass(classString);\n            } else {\n              scope.$postUpdate(() => {\n                if (classString !== \"\") {\n                  element.classList.remove(...classString.trim().split(\" \"));\n                }\n              });\n            }\n          }\n\n          /**\n           * @param {string} oldClassString\n           * @param {string} newClassString\n           */\n          function updateClasses(oldClassString, newClassString) {\n            const oldClassArray = split(oldClassString);\n            const newClassArray = split(newClassString);\n\n            const toRemoveArray = arrayDifference(oldClassArray, newClassArray);\n            const toAddArray = arrayDifference(newClassArray, oldClassArray);\n\n            const toRemoveString = digestClassCounts(toRemoveArray, -1);\n            const toAddString = digestClassCounts(toAddArray, 1);\n            if (hasAnimate(element)) {\n              attr.$addClass(toAddString);\n              attr.$removeClass(toRemoveString);\n            } else {\n              if (toAddString !== \"\") {\n                element.classList.add(...toAddString.trim().split(\" \"));\n              }\n              if (toRemoveString !== \"\") {\n                element.classList.remove(...toRemoveString.trim().split(\" \"));\n              }\n            }\n          }\n\n          function digestClassCounts(classArray, count) {\n            const classesToUpdate = [];\n            if (classArray) {\n              classArray.forEach((className) => {\n                if (count > 0 || classCounts[className]) {\n                  classCounts[className] = (classCounts[className] || 0) + count;\n                  if (classCounts[className] === +(count > 0)) {\n                    classesToUpdate.push(className);\n                  }\n                }\n              });\n            }\n            return classesToUpdate.join(\" \");\n          }\n\n          function ngClassIndexWatchAction(newModulo) {\n            // This watch-action should run before the `ngClassWatchAction()`, thus it\n            // adds/removes `oldClassString`. If the `ngClass` expression has changed as well, the\n            // `ngClassWatchAction()` will update the classes.\n            if (newModulo === selector) {\n              addClasses(oldClassString);\n            } else {\n              removeClasses(oldClassString);\n            }\n\n            oldModulo = newModulo;\n          }\n\n          /**\n           * @param {string} newClassString\n           */\n          function ngClassWatchAction(newClassString) {\n            if (oldModulo === selector) {\n              updateClasses(oldClassString, newClassString);\n            }\n\n            oldClassString = newClassString;\n          }\n        },\n      };\n    };\n  }\n\n  // Helpers\n  function arrayDifference(tokens1, tokens2) {\n    if (!tokens1 || !tokens1.length) return [];\n    if (!tokens2 || !tokens2.length) return tokens1;\n\n    const values = [];\n\n    outer: for (let i = 0; i < tokens1.length; i++) {\n      const token = tokens1[i];\n      for (let j = 0; j < tokens2.length; j++) {\n        if (token === tokens2[j]) continue outer;\n      }\n      values.push(token);\n    }\n\n    return values;\n  }\n\n  function split(classString) {\n    return classString && classString.split(\" \");\n  }\n\n  function toClassString(classValue) {\n    if (!classValue) return classValue;\n\n    let classString = classValue;\n\n    if (Array.isArray(classValue)) {\n      classString = classValue.map(toClassString).join(\" \");\n    } else if (isObject(classValue)) {\n      classString = Object.keys(classValue)\n        .filter((key) => classValue[key])\n        .join(\" \");\n    } else if (!isString(classValue)) {\n      classString = `${classValue}`;\n    }\n\n    return classString;\n  }\n\n  const ngClassDirective = classDirective(\"\", true);\n  const ngClassOddDirective = classDirective(\"Odd\", 0);\n  const ngClassEvenDirective = classDirective(\"Even\", 1);\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngCloakDirective() {\n    return {\n      compile(element, attr) {\n        attr.$set(\"ngCloak\", undefined);\n        element.classList.remove(\"ng-cloak\");\n      },\n    };\n  }\n\n  /**\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngControllerDirective() {\n    return {\n      restrict: \"A\",\n      scope: true,\n      controller: \"@\",\n      priority: 500,\n    };\n  }\n\n  const NG_HIDE_CLASS = \"ng-hide\";\n  const NG_HIDE_IN_PROGRESS_CLASS = \"ng-hide-animate\";\n\n  ngShowDirective.$inject = [\"$animate\"];\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngShowDirective($animate) {\n    return {\n      restrict: \"A\",\n      /**\n       * @param scope\n       * @param {Element} element\n       * @param $attr\n       */\n      link(scope, element, $attr) {\n        scope.$watch($attr[\"ngShow\"], (value) => {\n          // we're adding a temporary, animation-specific class for ng-hide since this way\n          // we can control when the element is actually displayed on screen without having\n          // to have a global/greedy CSS selector that breaks when other animations are run.\n          // Read: https://github.com/angular/angular.js/issues/9103#issuecomment-58335845\n          if (hasAnimate(element)) {\n            $animate[value ? \"removeClass\" : \"addClass\"](element, NG_HIDE_CLASS, {\n              tempClasses: NG_HIDE_IN_PROGRESS_CLASS,\n            });\n          } else {\n            if (value) {\n              element.classList.remove(NG_HIDE_CLASS);\n            } else {\n              element.classList.add(NG_HIDE_CLASS);\n            }\n          }\n        });\n      },\n    };\n  }\n\n  ngHideDirective.$inject = [\"$animate\"];\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngHideDirective($animate) {\n    return {\n      restrict: \"A\",\n      link(scope, element, attr) {\n        scope.$watch(attr[\"ngHide\"], (value) => {\n          // The comment inside of the ngShowDirective explains why we add and\n          // remove a temporary class for the show/hide animation\n          if (hasAnimate(element)) {\n            $animate[value ? \"addClass\" : \"removeClass\"](element, NG_HIDE_CLASS, {\n              tempClasses: NG_HIDE_IN_PROGRESS_CLASS,\n            });\n          } else {\n            if (value) {\n              element.classList.add(NG_HIDE_CLASS);\n            } else {\n              element.classList.remove(NG_HIDE_CLASS);\n            }\n          }\n        });\n      },\n    };\n  }\n\n  ngIfDirective.$inject = [\"$animate\"];\n  /**\n   * @param {*}  $animate\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngIfDirective($animate) {\n    return {\n      transclude: \"element\",\n      priority: 600,\n      terminal: true,\n      restrict: \"A\",\n      /**\n       *\n       * @param {import(\"../../core/scope/scope.js\").Scope} $scope\n       * @param {Element} $element\n       * @param {import(\"../../core/compile/attributes.js\").Attributes} $attr\n       * @param {Object} _ctrl\n       * @param {*} $transclude\n       */\n      link($scope, $element, $attr, _ctrl, $transclude) {\n        /** @type {Element} */\n        let block;\n\n        /** @type {import('../../core/scope/scope.js').Scope} */\n        let childScope;\n\n        let previousElements;\n\n        $scope.$watch($attr[\"ngIf\"], (value) => {\n          if (value) {\n            if (!childScope) {\n              $transclude((clone, newScope) => {\n                childScope = newScope;\n                // Note: We only need the first/last node of the cloned nodes.\n                // However, we need to keep the reference to the dom wrapper as it might be changed later\n                // by a directive with templateUrl when its template arrives.\n                block = clone;\n                if (hasAnimate(clone)) {\n                  $animate.enter(clone, $element.parentElement, $element);\n                } else {\n                  $element.after(clone);\n                }\n              });\n            }\n          } else {\n            if (previousElements) {\n              removeElement(previousElements);\n              previousElements = null;\n            }\n            if (childScope) {\n              childScope.$destroy();\n              childScope = null;\n            }\n            if (block) {\n              previousElements = block;\n              if (hasAnimate(previousElements)) {\n                $animate.leave(previousElements).done((response) => {\n                  if (response !== false) previousElements = null;\n                });\n              } else {\n                $element.nextElementSibling.remove();\n              }\n              block = null;\n            }\n          }\n        });\n      },\n    };\n  }\n\n  ngIncludeDirective.$inject = [\n    $injectTokens.$templateRequest,\n    $injectTokens.$anchorScroll,\n    $injectTokens.$animate,\n    $injectTokens.$exceptionHandler,\n  ];\n\n  /**\n   *\n   * @param {*} $templateRequest\n   * @param {import(\"../../services/anchor-scroll.js\").AnchorScrollFunction} $anchorScroll\n   * @param {*} $animate\n   * @param {import('../../services/exception/interface.ts').Interface} $exceptionHandler\n   * @returns {import('../../interface.js').Directive}\n   */\n  function ngIncludeDirective(\n    $templateRequest,\n    $anchorScroll,\n    $animate,\n    $exceptionHandler,\n  ) {\n    return {\n      priority: 400,\n      terminal: true,\n      transclude: \"element\",\n      controller: () => {},\n      compile(_element, attr) {\n        const srcExp = attr[\"ngInclude\"] || attr[\"src\"];\n        const onloadExp = attr[\"onload\"] || \"\";\n        const autoScrollExp = attr[\"autoscroll\"];\n\n        return (scope, $element, _$attr, ctrl, $transclude) => {\n          function maybeScroll() {\n            if (\n              isDefined(autoScrollExp) &&\n              (!autoScrollExp || scope.$eval(autoScrollExp))\n            ) {\n              $anchorScroll();\n            }\n          }\n\n          let changeCounter = 0;\n          let currentScope;\n          let previousElement;\n          let currentElement;\n          const cleanupLastIncludeContent = () => {\n            if (previousElement) {\n              previousElement.remove();\n              previousElement = null;\n            }\n            if (currentScope) {\n              currentScope.$destroy();\n              currentScope = null;\n            }\n            if (currentElement) {\n              if (hasAnimate(currentElement)) {\n                $animate.leave(currentElement).done((response) => {\n                  if (response !== false) previousElement = null;\n                });\n              } else {\n                currentElement.remove();\n              }\n\n              previousElement = currentElement;\n              currentElement = null;\n            }\n          };\n\n          scope.$watch(srcExp, async (src) => {\n            const afterAnimation = function (response) {\n              response !== false && maybeScroll();\n            };\n\n            const thisChangeId = ++changeCounter;\n            if (src) {\n              // set the 2nd param to true to ignore the template request error so that the inner\n              // contents and scope can be cleaned up.\n              await $templateRequest(src, true).then(\n                (response) => {\n                  if (scope.$$destroyed) return;\n                  if (thisChangeId !== changeCounter) return;\n                  const newScope = scope.$new();\n                  ctrl[\"template\"] = response;\n\n                  // Note: This will also link all children of ng-include that were contained in the original\n                  // html. If that content contains controllers, ... they could pollute/change the scope.\n                  // However, using ng-include on an element with additional content does not make sense...\n                  // Note: We can't remove them in the cloneAttchFn of $transclude as that\n                  // function is called before linking the content, which would apply child\n                  // directives to non existing elements.\n                  const clone = $transclude(newScope, (clone) => {\n                    cleanupLastIncludeContent();\n                    if (hasAnimate(clone)) {\n                      $animate.enter(clone, null, $element).done(afterAnimation);\n                    } else {\n                      $element.after(clone);\n                      maybeScroll();\n                    }\n                  });\n\n                  currentScope = newScope;\n                  currentElement = clone;\n                  currentScope.$emit(\"$includeContentLoaded\", src);\n                  scope.$eval(onloadExp);\n                },\n                (err) => {\n                  if (scope.$$destroyed) return;\n\n                  if (thisChangeId === changeCounter) {\n                    cleanupLastIncludeContent();\n                    scope.$emit(\"$includeContentError\", src);\n                  }\n                  $exceptionHandler(new Error(err));\n                },\n              );\n              scope.$emit(\"$includeContentRequested\", src);\n            } else {\n              cleanupLastIncludeContent();\n              ctrl[\"template\"] = null;\n            }\n          });\n        };\n      },\n    };\n  }\n\n  // This directive is called during the $transclude call of the first `ngInclude` directive.\n  // It will replace and compile the content of the element with the loaded template.\n  // We need this directive so that the element content is already filled when\n  // the link function of another directive on the same element as ngInclude\n  // is called.\n  ngIncludeFillContentDirective.$inject = [$injectTokens.$compile];\n\n  /**\n   * @param {import(\"../../core/compile/compile.js\").CompileFn} $compile\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngIncludeFillContentDirective($compile) {\n    return {\n      priority: -400,\n      require: \"ngInclude\",\n      link(scope, $element, _$attr, ctrl) {\n        $element.innerHTML = ctrl[\"template\"];\n        $compile($element.childNodes)(scope);\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngInitDirective() {\n    return {\n      priority: 450,\n      compile() {\n        return {\n          pre(scope, element, attrs) {\n            const controller = getController(element);\n            if (controller) {\n              controller.$eval(attrs[\"ngInit\"]);\n            } else {\n              scope.$eval(attrs[\"ngInit\"]);\n            }\n          },\n        };\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngNonBindableDirective() {\n    return {\n      terminal: true,\n      priority: 1000,\n    };\n  }\n\n  /**\n   * The `ngRef` attribute tells AngularTS to assign the controller of a component (or a directive)\n   * to the given property in the current scope.\n   *\n   * If the element with `ngRef` is destroyed `null` is assigned to the property.\n   *\n   * Note that if you want to assign from a child into the parent scope, you must initialize the\n   * target property on the parent scope, otherwise `ngRef` will assign on the child scope.\n   * This commonly happens when assigning elements or components wrapped in {@link ngIf} or\n   * {@link ngRepeat}. See the second example below.\n   *\n   *\n   * @element ANY\n   * @param {string} ngRef property name - A valid AngularTS expression identifier to which the\n   *                       controller or dom-wrapped DOM element will be bound.\n   * @param {string=} ngRefRead read value - The name of a directive (or component) on this element,\n   *                            or the special string `$element`. If a name is provided, `ngRef` will\n   *                            assign the matching controller. If `$element` is provided, the element\n   *                            itself is assigned (even if a controller is available).\n   */\n\n  const ngRefMinErr = minErr(\"ngRef\");\n  ngRefDirective.$inject = [\"$parse\"];\n  function ngRefDirective($parse) {\n    return {\n      priority: -1, // Needed for compatibility with element transclusion on the same element\n      restrict: \"A\",\n      compile(tElement, tAttrs) {\n        // Get the expected controller name, converts <data-some-thing> into \"someThing\"\n        const controllerName = directiveNormalize(getNodeName(tElement));\n\n        // Get the expression for value binding\n        const getter = $parse(tAttrs.ngRef);\n        const setter =\n          getter.assign ||\n          function () {\n            throw ngRefMinErr(\n              \"nonassign\",\n              'Expression in ngRef=\"{0}\" is non-assignable!',\n              tAttrs.ngRef,\n            );\n          };\n\n        return (scope, element, attrs) => {\n          let refValue;\n\n          if (hasOwn(attrs, \"ngRefRead\")) {\n            if (attrs.ngRefRead === \"$element\") {\n              refValue = element;\n            } else {\n              refValue = getCacheData(element, `$${attrs.ngRefRead}Controller`);\n\n              if (!refValue) {\n                throw ngRefMinErr(\n                  \"noctrl\",\n                  'The controller for ngRefRead=\"{0}\" could not be found on ngRef=\"{1}\"',\n                  attrs.ngRefRead,\n                  tAttrs.ngRef,\n                );\n              }\n            }\n          } else {\n            refValue = getCacheData(element, `$${controllerName}Controller`);\n          }\n\n          refValue = refValue || element;\n\n          setter(scope, refValue);\n\n          // when the element is removed, remove it (nullify it)\n          element.addEventListener(\"$destroy\", () => {\n            // only remove it if value has not changed,\n            // because animations (and other procedures) may duplicate elements\n            if (getter(scope) === refValue) {\n              setter(scope, null);\n            }\n          });\n        };\n      },\n    };\n  }\n\n  const NG_REMOVED = \"$$NG_REMOVED\";\n  const ngRepeatMinErr = minErr(\"ngRepeat\");\n\n  /**\n   * Regular expression to match either:\n   * 1. A single variable name (optionally preceded by whitespace), e.g. \"foo\", \"   $bar\"\n   * 2. A pair of variable names inside parentheses separated by a comma (with optional whitespace), e.g. \"(x, y)\", \"($foo, _bar123)\"\n   *\n   * Capturing groups:\n   * - Group 1: The single variable name (if present)\n   * - Group 2: The first variable in the tuple (if present)\n   * - Group 3: The second variable in the tuple (if present)\n   *\n   * Examples:\n   *  - Matches: \"foo\", \"   $var\", \"(x, y)\", \"($a, $b)\"\n   *  - Does NOT match: \"x,y\", \"(x)\", \"(x y)\", \"\"\n   *\n   * @constant {RegExp}\n   */\n  const VAR_OR_TUPLE_REGEX =\n    /^(?:(\\s*[$\\w]+)|\\(\\s*([$\\w]+)\\s*,\\s*([$\\w]+)\\s*\\))$/;\n\n  ngRepeatDirective.$inject = [$injectTokens.$animate];\n\n  /**\n   * TODO // Add type for animate service\n   * @param {*}  $animate\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngRepeatDirective($animate) {\n    function updateScope(\n      scope,\n      index,\n      valueIdentifier,\n      value,\n      keyIdentifier,\n      key,\n      arrayLength,\n    ) {\n      // TODO(perf): generate setters to shave off ~40ms or 1-1.5%\n      if (scope[valueIdentifier] !== value) {\n        scope[valueIdentifier] = value;\n      }\n\n      if (keyIdentifier) scope[keyIdentifier] = key;\n      if (value) {\n        scope.$target.$$hashKey = value.$$hashKey;\n      }\n      scope.$index = index;\n      scope.$first = index === 0;\n      scope.$last = index === arrayLength - 1;\n      scope.$middle = !(scope.$first || scope.$last);\n      scope.$odd = !(scope.$even = (index & 1) === 0);\n    }\n\n    function getBlockStart(block) {\n      return block.clone;\n    }\n\n    function getBlockEnd(block) {\n      return block.clone;\n    }\n\n    function trackByIdArrayFn(_$scope, _key, value) {\n      return hashKey(value);\n    }\n\n    function trackByIdObjFn(_$scope, key) {\n      return key;\n    }\n\n    return {\n      restrict: \"A\",\n      transclude: \"element\",\n      priority: 1000,\n      terminal: true,\n      compile: (_$element, $attr) => {\n        const expression = $attr[\"ngRepeat\"];\n        const hasAnimate = !!$attr[\"animate\"];\n\n        let match = expression.match(\n          /^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/,\n        );\n\n        if (!match) {\n          throw ngRepeatMinErr(\n            \"iexp\",\n            \"Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.\",\n            expression,\n          );\n        }\n\n        const lhs = match[1];\n        const rhs = match[2];\n        const aliasAs = match[3];\n\n        match = lhs.match(VAR_OR_TUPLE_REGEX);\n\n        if (!match) {\n          throw ngRepeatMinErr(\n            \"iidexp\",\n            \"'_item_' in '_item_ in _collection_' should be an identifier or '(_key_, _value_)' expression, but got '{0}'.\",\n            lhs,\n          );\n        }\n        const valueIdentifier = match[3] || match[1];\n        const keyIdentifier = match[2];\n\n        if (\n          aliasAs &&\n          (!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(aliasAs) ||\n            /^(null|undefined|this|\\$index|\\$first|\\$middle|\\$last|\\$even|\\$odd|\\$parent|\\$root|\\$id)$/.test(\n              aliasAs,\n            ))\n        ) {\n          throw ngRepeatMinErr(\n            \"badident\",\n            \"alias '{0}' is invalid --- must be a valid JS identifier which is not a reserved name.\",\n            aliasAs,\n          );\n        }\n\n        const swap = callBackOnce(() => {\n          if (isDefined($attr[\"lazy\"]) && isDefined($attr[\"swap\"])) {\n            document\n              .querySelectorAll($attr[\"swap\"])\n              .forEach((x) => removeElement(x));\n          }\n        });\n\n        return function ngRepeatLink($scope, $element, $attr, ctrl, $transclude) {\n          // Store a list of elements from previous run. This is a hash where key is the item from the\n          // iterator, and the value is objects with following properties.\n          //   - scope: bound scope\n          //   - clone: previous element.\n          //   - index: position\n          //\n          // We are using no-proto object so that we don't need to guard against inherited props via\n          // hasOwnProperty.\n          let lastBlockMap = Object.create(null);\n          // watch props\n          $scope.$watch(\n            rhs,\n            (collection) => {\n              swap();\n              let index,\n                length,\n                previousNode = $element, // node that cloned nodes should be inserted after\n                // initialized to the comment node anchor\n                nextNode;\n              const // Same as lastBlockMap but it has the current state. It will become the\n                // lastBlockMap on the next iteration.\n                nextBlockMap = Object.create(null);\n              let collectionLength,\n                key,\n                value, // key/value of iteration\n                trackById,\n                trackByIdFn,\n                collectionKeys,\n                block, // last object information {scope, element, id}\n                nextBlockOrder,\n                elementsToRemove;\n\n              if (aliasAs) {\n                $scope[aliasAs] = collection;\n              }\n\n              if (isArrayLike(collection)) {\n                collectionKeys = collection;\n                trackByIdFn = trackByIdArrayFn;\n              } else {\n                trackByIdFn = trackByIdObjFn;\n                // if object, extract keys, in enumeration order, unsorted\n                collectionKeys = [];\n                for (const itemKey in collection) {\n                  if (hasOwn(collection, itemKey) && itemKey.charAt(0) !== \"$\") {\n                    collectionKeys.push(itemKey);\n                  }\n                }\n              }\n\n              collectionLength = collectionKeys.length;\n              nextBlockOrder = new Array(collectionLength);\n\n              // locate existing items\n              for (index = 0; index < collectionLength; index++) {\n                key =\n                  collection === collectionKeys ? index : collectionKeys[index];\n                value = collection[key];\n                trackById = trackByIdFn($scope, key, value);\n                if (lastBlockMap[trackById]) {\n                  // found previously seen block\n                  block = lastBlockMap[trackById];\n                  delete lastBlockMap[trackById];\n                  nextBlockMap[trackById] = block;\n                  nextBlockOrder[index] = block;\n                } else if (nextBlockMap[trackById]) {\n                  // if collision detected. restore lastBlockMap and throw an error\n                  Object.values(nextBlockOrder).forEach((block) => {\n                    if (block && block.scope) lastBlockMap[block.id] = block;\n                  });\n                  throw ngRepeatMinErr(\n                    \"dupes\",\n                    \"Duplicates keys in a repeater are not allowed. Repeater: {0}, Duplicate key: {1} for value: {2}\",\n                    expression,\n                    trackById,\n                    value,\n                  );\n                } else {\n                  // new never before seen block\n                  nextBlockOrder[index] = {\n                    id: trackById,\n                    scope: undefined,\n                    clone: undefined,\n                  };\n                  nextBlockMap[trackById] = true;\n                }\n              }\n\n              // remove leftover items\n              for (let blockKey in lastBlockMap) {\n                block = lastBlockMap[blockKey];\n                elementsToRemove = block.clone;\n                if (hasAnimate) {\n                  $animate.leave(elementsToRemove);\n                } else {\n                  elementsToRemove.remove();\n                }\n                if (elementsToRemove.parentNode) {\n                  // if the element was not removed yet because of pending animation, mark it as deleted\n                  // so that we can ignore it later\n                  for (\n                    index = 0, length = elementsToRemove.length;\n                    index < length;\n                    index++\n                  ) {\n                    elementsToRemove[index][NG_REMOVED] = true;\n                  }\n                }\n                block.scope.$destroy();\n              }\n\n              for (index = 0; index < collectionLength; index++) {\n                key =\n                  collection === collectionKeys ? index : collectionKeys[index];\n                value = collection[key];\n                block = nextBlockOrder[index];\n\n                if (block.scope) {\n                  // if we have already seen this object, then we need to reuse the\n                  // associated scope/element\n\n                  nextNode = previousNode;\n\n                  // skip nodes that are already pending removal via leave animation\n                  do {\n                    nextNode = nextNode.nextSibling;\n                  } while (nextNode && nextNode[NG_REMOVED]);\n\n                  if (getBlockStart(block) !== nextNode) {\n                    // existing item which got moved\n                    $animate.move(getBlockNodes(block.clone), null, previousNode);\n                  }\n                  previousNode = getBlockEnd(block);\n                  updateScope(\n                    block.scope,\n                    index,\n                    valueIdentifier,\n                    value,\n                    keyIdentifier,\n                    key,\n                    collectionLength,\n                  );\n                } else {\n                  // new item which we don't know about\n                  $transclude(\n                    /**\n                     * Clone attach function\n                     * @param {Array<NodeList>} clone\n                     * @param {import(\"../../core/scope/scope.js\").Scope} scope\n                     */\n\n                    (clone, scope) => {\n                      block.scope = scope;\n                      const endNode = clone;\n                      if (hasAnimate) {\n                        $animate.enter(clone, null, previousNode);\n                      } else {\n                        // @ts-ignore\n                        previousNode.after(clone);\n                      }\n\n                      // @ts-ignore\n                      previousNode = endNode;\n                      // Note: We only need the first/last node of the cloned nodes.\n                      // However, we need to keep the reference to the dom wrapper as it might be changed later\n                      // by a directive with templateUrl when its template arrives.\n                      block.clone = clone;\n                      nextBlockMap[block.id] = block;\n                      updateScope(\n                        block.scope,\n                        index,\n                        valueIdentifier,\n                        value,\n                        keyIdentifier,\n                        key,\n                        collectionLength,\n                      );\n                    },\n                  );\n                }\n              }\n              lastBlockMap = nextBlockMap;\n            },\n            isDefined($attr[\"lazy\"]),\n          );\n        };\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngStyleDirective() {\n    return {\n      restrict: \"A\",\n      link(scope, element, attr) {\n        let oldStyles;\n        scope.$watch(attr[\"ngStyle\"], (newStyles) => {\n          if (oldStyles) {\n            const oldKeys = Object.keys(oldStyles);\n            for (let i = 0, length = oldKeys.length; i < length; i++) {\n              element.style.removeProperty(oldKeys[i]);\n            }\n          }\n          if (newStyles) {\n            oldStyles = { ...newStyles.$target };\n            const newEntries = Object.entries(newStyles);\n            for (let i = 0, length = newEntries.length; i < length; i++) {\n              const [key, value] = newEntries[i];\n              element.style.setProperty(key, value);\n            }\n          }\n        });\n      },\n    };\n  }\n\n  ngSwitchDirective.$inject = [\"$animate\"];\n\n  /**\n   * @param {*} $animate\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngSwitchDirective($animate) {\n    return {\n      require: \"ngSwitch\",\n\n      // asks for $scope to fool the BC controller module\n      controller: [\n        \"$scope\",\n        class {\n          constructor() {\n            this.cases = {};\n          }\n        },\n      ],\n      link(scope, _element, attr, ngSwitchController) {\n        const watchExpr = attr[\"ngSwitch\"] || attr[\"on\"];\n        let selectedTranscludes = [];\n        const selectedElements = [];\n        const previousLeaveAnimations = [];\n        const selectedScopes = [];\n\n        const spliceFactory = function (array, index) {\n          return function (response) {\n            if (response !== false) array.splice(index, 1);\n          };\n        };\n\n        scope.$watch(watchExpr, (value) => {\n          let i;\n          let ii;\n\n          // Start with the last, in case the array is modified during the loop\n          while (previousLeaveAnimations.length) {\n            $animate.cancel(previousLeaveAnimations.pop());\n          }\n\n          for (i = 0, ii = selectedScopes.length; i < ii; ++i) {\n            const selected = getBlockNodes(selectedElements[i].clone);\n            selectedScopes[i].$destroy();\n\n            if (hasAnimate(selected)) {\n              const runner = (previousLeaveAnimations[i] =\n                $animate.leave(selected));\n              runner.done(spliceFactory(previousLeaveAnimations, i));\n            } else {\n              selected.remove();\n            }\n          }\n\n          selectedElements.length = 0;\n          selectedScopes.length = 0;\n\n          if (\n            (selectedTranscludes =\n              ngSwitchController[\"cases\"][`!${value}`] ||\n              ngSwitchController[\"cases\"][\"?\"])\n          ) {\n            Object.values(selectedTranscludes).forEach((selectedTransclude) => {\n              selectedTransclude.transclude((caseElement, selectedScope) => {\n                selectedScopes.push(selectedScope);\n                const anchor = selectedTransclude.element;\n                // TODO removing this breaks repeater test\n                const block = {\n                  clone: caseElement,\n                  comment: document.createComment(\"\"),\n                };\n                selectedElements.push(block);\n                if (hasAnimate(caseElement)) {\n                  $animate.enter(caseElement, anchor.parentElement, anchor);\n                } else {\n                  domInsert(caseElement, anchor.parentElement, anchor);\n                }\n              });\n            });\n          }\n        });\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngSwitchWhenDirective() {\n    return {\n      transclude: \"element\",\n      terminal: true,\n      priority: 1200,\n\n      require: \"^ngSwitch\",\n      link(scope, element, attrs, ctrl, $transclude) {\n        const cases = attrs[\"ngSwitchWhen\"]\n          .split(attrs[\"ngSwitchWhenSeparator\"])\n          .sort()\n          .filter(\n            // Filter duplicate cases\n            (element, index, array) => array[index - 1] !== element,\n          );\n\n        cases.forEach((whenCase) => {\n          ctrl[\"cases\"][`!${whenCase}`] = ctrl[\"cases\"][`!${whenCase}`] || [];\n          ctrl[\"cases\"][`!${whenCase}`].push({\n            transclude: $transclude,\n            element,\n          });\n        });\n      },\n    };\n  }\n\n  /**\n   * @returns {import('../../interface.ts').Directive}\n   */\n  function ngSwitchDefaultDirective() {\n    return {\n      transclude: \"element\",\n      terminal: true,\n      priority: 1200,\n      require: \"^ngSwitch\",\n      link(_scope, element, _attr, ctrl, $transclude) {\n        ctrl[\"cases\"][\"?\"] = ctrl[\"cases\"][\"?\"] || [];\n        ctrl[\"cases\"][\"?\"].push({ transclude: $transclude, element });\n      },\n    };\n  }\n\n  const ngOptionsMinErr = minErr(\"ngOptions\");\n\n  /** @type {HTMLOptionElement} */\n  const optionTemplate = document.createElement(\"option\");\n\n  /** @type {HTMLOptGroupElement} */\n  const optGroupTemplate = document.createElement(\"optgroup\");\n\n  const NG_OPTIONS_REGEXP =\n    /^\\s*([\\s\\S]+?)(?:\\s+as\\s+([\\s\\S]+?))?(?:\\s+group\\s+by\\s+([\\s\\S]+?))?(?:\\s+disable\\s+when\\s+([\\s\\S]+?))?\\s+for\\s+(?:([$\\w][$\\w]*)|(?:\\(\\s*([$\\w][$\\w]*)\\s*,\\s*([$\\w][$\\w]*)\\s*\\)))\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?$/;\n\n  // 1: value expression (valueFn)\n  // 2: label expression (displayFn)\n  // 3: group by expression (groupByFn)\n  // 4: disable when expression (disableWhenFn)\n  // 5: array item variable name\n  // 6: object item key variable name\n  // 7: object item value variable name\n  // 8: collection expression\n  // 9: track by expression\n\n  ngOptionsDirective.$inject = [\"$compile\", \"$parse\"];\n  /**\n   *\n   * @param {import(\"../../core/compile/compile.js\").CompileFn} $compile\n   * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngOptionsDirective($compile, $parse) {\n    /**\n     * @param {import('../../interface.ts').Expression} optionsExp\n     * @param {HTMLSelectElement} selectElement\n     * @param {import('../../core/scope/scope.js').Scope} scope\n     * @returns\n     */\n    function parseOptionsExpression(optionsExp, selectElement, scope) {\n      const match = optionsExp.match(NG_OPTIONS_REGEXP);\n      if (!match) {\n        throw ngOptionsMinErr(\n          \"iexp\",\n          \"Expected expression in form of \" +\n            \"'_select_ (as _label_)? for (_key_,)?_value_ in _collection_'\" +\n            \" but got '{0}'. Element: {1}\",\n          optionsExp,\n          startingTag(selectElement),\n        );\n      }\n      // Extract the parts from the ngOptions expression\n\n      // The variable name for the value of the item in the collection\n      const valueName = match[5] || match[7];\n      // The variable name for the key of the item in the collection\n      const keyName = match[6];\n\n      // An expression that generates the viewValue for an option if there is a label expression\n      const selectAs = / as /.test(match[0]) && match[1];\n      // An expression that is used to track the id of each object in the options collection\n      const trackBy = match[9];\n      // An expression that generates the viewValue for an option if there is no label expression\n      const valueFn = $parse(match[2] ? match[1] : valueName);\n      const selectAsFn = selectAs && $parse(selectAs);\n      const viewValueFn = selectAsFn || valueFn;\n      const trackByFn = trackBy && $parse(trackBy);\n\n      // Get the value by which we are going to track the option\n      // if we have a trackFn then use that (passing scope and locals)\n      // otherwise just hash the given viewValue\n      const getTrackByValueFn = trackBy\n        ? function (value, locals) {\n            return trackByFn(scope, locals);\n          }\n        : function getHashOfValue(value) {\n            return hashKey(value);\n          };\n      const getTrackByValue = function (value, key) {\n        return getTrackByValueFn(value, getLocals(value, key));\n      };\n\n      const displayFn = $parse(match[2] || match[1]);\n      const groupByFn = $parse(match[3] || \"\");\n      const disableWhenFn = $parse(match[4] || \"\");\n      const valuesFn = $parse(match[8]);\n\n      const locals = {};\n      let getLocals = keyName\n        ? function (value, key) {\n            locals[keyName] = key;\n            locals[valueName] = value;\n            return locals;\n          }\n        : function (value) {\n            locals[valueName] = value;\n            return locals;\n          };\n\n      class Option {\n        constructor(selectValue, viewValue, label, group, disabled) {\n          this.selectValue = selectValue;\n          this.viewValue = viewValue;\n          this.label = label;\n          this.group = group;\n          this.disabled = disabled;\n        }\n      }\n\n      function getOptionValuesKeys(optionValues) {\n        let optionValuesKeys;\n\n        if (!keyName && isArrayLike(optionValues)) {\n          optionValuesKeys = optionValues;\n        } else {\n          // if object, extract keys, in enumeration order, unsorted\n          optionValuesKeys = [];\n          for (const itemKey in optionValues) {\n            if (hasOwn(optionValues, itemKey) && itemKey.charAt(0) !== \"$\") {\n              optionValuesKeys.push(itemKey);\n            }\n          }\n        }\n        return optionValuesKeys;\n      }\n\n      return {\n        trackBy,\n        getTrackByValue,\n        getWatchables: $parse(valuesFn, (optionValues) => {\n          // Create a collection of things that we would like to watch (watchedArray)\n          // so that they can all be watched using a single $watchCollection\n          // that only runs the handler once if anything changes\n          const watchedArray = [];\n          optionValues = optionValues || [];\n\n          const optionValuesKeys = getOptionValuesKeys(optionValues);\n          const optionValuesLength = optionValuesKeys.length;\n          for (let index = 0; index < optionValuesLength; index++) {\n            const key =\n              optionValues === optionValuesKeys ? index : optionValuesKeys[index];\n            const value = optionValues[key];\n\n            const locals = getLocals(value, key);\n            const selectValue = getTrackByValueFn(value, locals);\n            watchedArray.push(selectValue);\n\n            // Only need to watch the displayFn if there is a specific label expression\n            if (match[2] || match[1]) {\n              const label = displayFn(scope, locals);\n              watchedArray.push(label);\n            }\n\n            // Only need to watch the disableWhenFn if there is a specific disable expression\n            if (match[4]) {\n              const disableWhen = disableWhenFn(scope, locals);\n              watchedArray.push(disableWhen);\n            }\n          }\n          return watchedArray;\n        }),\n\n        getOptions() {\n          /** @type {Option[]} */\n          const optionItems = [];\n          /** @type {Object.<string, Option>} */\n          const selectValueMap = {};\n\n          // The option values were already computed in the `getWatchables` fn,\n          // which must have been called to trigger `getOptions`\n          const optionValues = valuesFn(scope) || [];\n          const optionValuesKeys = getOptionValuesKeys(optionValues);\n          const optionValuesLength = optionValuesKeys.length;\n\n          for (let index = 0; index < optionValuesLength; index++) {\n            const key =\n              optionValues === optionValuesKeys ? index : optionValuesKeys[index];\n            const value = optionValues[key];\n            const locals = getLocals(value, key);\n            const viewValue = viewValueFn(scope, locals);\n            const selectValue = getTrackByValueFn(viewValue, locals);\n            const label = displayFn(scope, locals);\n            const group = groupByFn(scope, locals);\n            const disabled = disableWhenFn(scope, locals);\n            const optionItem = new Option(\n              selectValue,\n              viewValue,\n              label,\n              group,\n              disabled,\n            );\n\n            optionItems.push(optionItem);\n            selectValueMap[selectValue] = optionItem;\n          }\n\n          return {\n            items: optionItems,\n            selectValueMap,\n            getOptionFromViewValue(value) {\n              return selectValueMap[getTrackByValue(value)];\n            },\n            getViewValueFromOption(option) {\n              // If the viewValue could be an object that may be mutated by the application,\n              // we need to make a copy and not return the reference to the value on the option.\n              return trackBy\n                ? structuredClone(option.viewValue)\n                : option.viewValue;\n            },\n          };\n        },\n      };\n    }\n\n    /**\n     *\n     * @param {import(\"../../core/scope/scope.js\").Scope} scope\n     * @param {HTMLSelectElement} selectElement\n     * @param {import(\"../../core/compile/attributes.js\").Attributes} attr\n     * @param {*} ctrls\n     */\n    function ngOptionsPostLink(scope, selectElement, attr, ctrls) {\n      const selectCtrl = ctrls[0];\n      const ngModelCtrl = ctrls[1];\n      const multiple = attr[\"multiple\"];\n\n      // The emptyOption allows the application developer to provide their own custom \"empty\"\n      // option when the viewValue does not match any of the option values.\n      for (\n        let i = 0, children = selectElement.childNodes, ii = children.length;\n        i < ii;\n        i++\n      ) {\n        if (/** @type {HTMLOptionElement} */ (children[i]).value === \"\") {\n          selectCtrl.hasEmptyOption = true;\n          selectCtrl.emptyOption = children[i];\n          break;\n        }\n      }\n\n      // The empty option will be compiled and rendered before we first generate the options\n      emptyElement(selectElement);\n\n      const providedEmptyOption = !!selectCtrl.emptyOption;\n\n      const unknownOption = optionTemplate.cloneNode(false);\n      // TODO double check\n      unknownOption.nodeValue = \"?\";\n\n      let options;\n      const ngOptions = parseOptionsExpression(\n        attr[\"ngOptions\"],\n        selectElement,\n        scope,\n      );\n      // This stores the newly created options before they are appended to the select.\n      // Since the contents are removed from the fragment when it is appended,\n      // we only need to create it once.\n      const listFragment = document.createDocumentFragment();\n\n      // Overwrite the implementation. ngOptions doesn't use hashes\n      selectCtrl.generateUnknownOptionValue = () => \"?\";\n\n      // Update the controller methods for multiple selectable options\n      if (!multiple) {\n        selectCtrl.writeValue = function writeNgOptionsValue(value) {\n          // The options might not be defined yet when ngModel tries to render\n          if (!options) return;\n\n          const selectedOption =\n            selectElement.options[selectElement.selectedIndex];\n          const option = options.getOptionFromViewValue(value);\n\n          // Make sure to remove the selected attribute from the previously selected option\n          // Otherwise, screen readers might get confused\n          if (selectedOption) selectedOption.removeAttribute(\"selected\");\n\n          if (option) {\n            // Don't update the option when it is already selected.\n            // For example, the browser will select the first option by default. In that case,\n            // most properties are set automatically - except the `selected` attribute, which we\n            // set always\n\n            if (selectElement.value !== option.selectValue) {\n              selectCtrl.removeUnknownOption();\n\n              selectElement.value = option.selectValue;\n              option.element.selected = true;\n            }\n\n            option.element.setAttribute(\"selected\", \"selected\");\n          } else {\n            selectCtrl.selectUnknownOrEmptyOption(value);\n          }\n        };\n\n        selectCtrl.readValue = function readNgOptionsValue() {\n          const selectedOption = options.selectValueMap[selectElement.value];\n\n          if (selectedOption && !selectedOption.disabled) {\n            selectCtrl.unselectEmptyOption();\n            selectCtrl.removeUnknownOption();\n            return options.getViewValueFromOption(selectedOption);\n          }\n          return null;\n        };\n\n        // If we are using `track by` then we must watch the tracked value on the model\n        // since ngModel only watches for object identity change\n        // FIXME: When a user selects an option, this watch will fire needlessly\n        if (ngOptions.trackBy) {\n          scope.$watch(ngOptions.getTrackByValue(ngModelCtrl.$viewValue), () => {\n            ngModelCtrl.$render();\n          });\n        }\n      } else {\n        selectCtrl.writeValue = function writeNgOptionsMultiple(values) {\n          // The options might not be defined yet when ngModel tries to render\n          if (!options) return;\n\n          // Only set `<option>.selected` if necessary, in order to prevent some browsers from\n          // scrolling to `<option>` elements that are outside the `<select>` element's viewport.\n          const selectedOptions =\n            (values && values.map(getAndUpdateSelectedOption)) || [];\n\n          options.items.forEach((option) => {\n            if (option.element.selected && !includes(selectedOptions, option)) {\n              option.element.selected = false;\n            }\n          });\n        };\n\n        selectCtrl.readValue = function readNgOptionsMultiple() {\n          const selectedValues = selectElement.value || [];\n          const selections = [];\n          // @ts-ignore\n          selectedValues.forEach((value) => {\n            const option = options.selectValueMap[value];\n            if (option && !option.disabled)\n              selections.push(options.getViewValueFromOption(option));\n          });\n\n          return selections;\n        };\n\n        // If we are using `track by` then we must watch these tracked values on the model\n        // since ngModel only watches for object identity change\n        // if (ngOptions.trackBy) {\n        //   scope.$watchCollection(\n        //     () => {\n        //       if (Array.isArray(ngModelCtrl.$viewValue)) {\n        //         return ngModelCtrl.$viewValue.map((value) =>\n        //           ngOptions.getTrackByValue(value),\n        //         );\n        //       }\n        //     },\n        //     () => {\n        //       ngModelCtrl.$render();\n        //     },\n        //   );\n        // }\n      }\n\n      if (providedEmptyOption) {\n        // compile the element since there might be bindings in it\n        const linkFn = $compile(selectCtrl.emptyOption);\n        assertArg$1(linkFn, \"LinkFn required\");\n        selectElement.prepend(selectCtrl.emptyOption);\n        linkFn(scope);\n\n        if (selectCtrl.emptyOption.nodeType === Node.COMMENT_NODE) {\n          // This means the empty option has currently no actual DOM node, probably because\n          // it has been modified by a transclusion directive.\n          selectCtrl.hasEmptyOption = false;\n\n          // Redefine the registerOption function, which will catch\n          // options that are added by ngIf etc. (rendering of the node is async because of\n          // lazy transclusion)\n          selectCtrl.registerOption = function (optionScope, optionEl) {\n            if (optionEl.value === \"\") {\n              selectCtrl.hasEmptyOption = true;\n              selectCtrl.emptyOption = optionEl;\n              // This ensures the new empty option is selected if previously no option was selected\n              ngModelCtrl.$render();\n\n              optionEl.addEventListener(\"$destroy\", () => {\n                const needsRerender = selectCtrl.$isEmptyOptionSelected();\n\n                selectCtrl.hasEmptyOption = false;\n                selectCtrl.emptyOption = undefined;\n\n                if (needsRerender) ngModelCtrl.$render();\n              });\n            }\n          };\n        }\n      }\n\n      // We will re-render the option elements if the option values or labels change\n\n      // let watchables = ngOptions.getWatchables();\n      // watchables.forEach((i) => {\n      //   scope.$watch(i, updateOptions);\n      // });\n      scope.$watch(\n        ngOptions.getWatchables.decoratedNode.body[0].expression.name,\n        updateOptions,\n      );\n\n      // ------------------------------------------------------------------ //\n\n      function addOptionElement(option, parent) {\n        /**\n         * @type {HTMLOptionElement}\n         */\n        const optionElement = /** @type {HTMLOptionElement} */ (\n          optionTemplate.cloneNode(false)\n        );\n        parent.appendChild(optionElement);\n        updateOptionElement(option, optionElement);\n      }\n\n      function getAndUpdateSelectedOption(viewValue) {\n        const option = options.getOptionFromViewValue(viewValue);\n        const element = option && option.element;\n\n        if (element && !element.selected) element.selected = true;\n\n        return option;\n      }\n\n      function updateOptionElement(option, element) {\n        option.element = element;\n        element.disabled = option.disabled;\n        // Support: IE 11 only, Edge 12-13 only\n        // NOTE: The label must be set before the value, otherwise IE 11 & Edge create unresponsive\n        // selects in certain circumstances when multiple selects are next to each other and display\n        // the option list in listbox style, i.e. the select is [multiple], or specifies a [size].\n        // See https://github.com/angular/angular.js/issues/11314 for more info.\n        // This is unfortunately untestable with unit / e2e tests\n        if (option.label !== element.label) {\n          element.label = option.label;\n          element.textContent = option.label;\n        }\n        element.value = option.selectValue;\n      }\n\n      function updateOptions() {\n        const previousValue = options && selectCtrl.readValue();\n\n        // We must remove all current options, but cannot simply set innerHTML = null\n        // since the providedEmptyOption might have an ngIf on it that inserts comments which we\n        // must preserve.\n        // Instead, iterate over the current option elements and remove them or their optgroup\n        // parents\n        if (options) {\n          for (let i = options.items.length - 1; i >= 0; i--) {\n            const option = options.items[i];\n            if (isDefined(option.group)) {\n              removeElement(option.element.parentNode);\n            } else {\n              removeElement(option.element);\n            }\n          }\n        }\n\n        options = ngOptions.getOptions();\n\n        const groupElementMap = {};\n\n        options.items.forEach((option) => {\n          let groupElement;\n\n          if (isDefined(option.group)) {\n            // This option is to live in a group\n            // See if we have already created this group\n            groupElement = groupElementMap[option.group];\n\n            if (!groupElement) {\n              groupElement = optGroupTemplate.cloneNode(false);\n              listFragment.appendChild(groupElement);\n\n              // Update the label on the group element\n              // \"null\" is special cased because of Safari\n              /** @type {HTMLOptGroupElement} */\n              (groupElement).label =\n                option.group === null ? \"null\" : option.group;\n\n              // Store it for use later\n              groupElementMap[option.group] = groupElement;\n            }\n\n            addOptionElement(option, groupElement);\n          } else {\n            // This option is not in a group\n            addOptionElement(option, listFragment);\n          }\n        });\n\n        selectElement.appendChild(listFragment);\n\n        ngModelCtrl.$render();\n\n        // Check to see if the value has changed due to the update to the options\n        if (!ngModelCtrl.$isEmpty(previousValue)) {\n          const nextValue = selectCtrl.readValue();\n          const isNotPrimitive = ngOptions.trackBy || multiple;\n          if (\n            isNotPrimitive\n              ? !equals$1(previousValue, nextValue)\n              : previousValue !== nextValue\n          ) {\n            ngModelCtrl.$setViewValue(nextValue);\n            ngModelCtrl.$render();\n          }\n        }\n      }\n    }\n\n    return {\n      restrict: \"A\",\n      terminal: true,\n      require: [\"select\", \"ngModel\"],\n      link: {\n        pre: function ngOptionsPreLink(scope, selectElement, attr, ctrls) {\n          // Deactivate the SelectController.register method to prevent\n          // option directives from accidentally registering themselves\n          // (and unwanted $destroy handlers etc.)\n          ctrls[0].registerOption = () => {};\n        },\n        post: ngOptionsPostLink,\n      },\n    };\n  }\n\n  /**\n   * Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion.\n   *\n   * You can specify that you want to insert a named transclusion slot, instead of the default slot, by providing the slot name\n   * as the value of the `ng-transclude` or `ng-transclude-slot` attribute.\n   *\n   * If the transcluded content is not empty (i.e. contains one or more DOM nodes, including whitespace text nodes), any existing\n   * content of this element will be removed before the transcluded content is inserted.\n   * If the transcluded content is empty (or only whitespace), the existing content is left intact. This lets you provide fallback\n   * content in the case that no transcluded content is provided.\n   *\n   * @element ANY\n   *\n   * @param {string} ngTransclude|ngTranscludeSlot the name of the slot to insert at this point. If this is not provided, is empty\n   *                                               or its value is the same as the name of the attribute then the default slot is used.\n   */\n  const ngTranscludeMinErr = minErr(\"ngTransclude\");\n\n  ngTranscludeDirective.$inject = [\"$compile\"];\n  /**\n   * @param {import(\"../../core/compile/compile.js\").CompileFn} $compile\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngTranscludeDirective($compile) {\n    return {\n      compile: function ngTranscludeCompile(tElement) {\n        // Remove and cache any original content to act as a fallback\n        const fallbackLinkFn = $compile(tElement.childNodes);\n        emptyElement(tElement);\n\n        /**\n         *\n         * @param {import(\"../../core/scope/scope.js\").Scope} $scope\n         * @param {Element} $element\n         * @param {import(\"../../core/compile/attributes.js\").Attributes} $attrs\n         * @param {*} _controller\n         * @param {*} $transclude\n         */\n        function ngTranscludePostLink(\n          $scope,\n          $element,\n          $attrs,\n          _controller,\n          $transclude,\n        ) {\n          if (!$transclude) {\n            throw ngTranscludeMinErr(\n              \"orphan\",\n              \"Illegal use of ngTransclude directive in the template! \" +\n                \"No parent directive that requires a transclusion found. \" +\n                \"Element: {0}\",\n              startingTag($element),\n            );\n          }\n\n          // If the attribute is of the form: `ng-transclude=\"ng-transclude\"` then treat it like the default\n          if ($attrs[\"ngTransclude\"] === $attrs.$attr.ngTransclude) {\n            $attrs[\"ngTransclude\"] = \"\";\n          }\n          const slotName = $attrs[\"ngTransclude\"] || $attrs[\"ngTranscludeSlot\"];\n\n          // If the slot is required and no transclusion content is provided then this call will throw an error\n          $transclude(ngTranscludeCloneAttachFn, null, slotName);\n\n          // If the slot is optional and no transclusion content is provided then use the fallback content\n          if (slotName && !$transclude.isSlotFilled(slotName)) {\n            useFallbackContent();\n          }\n\n          /**\n           * @param {NodeList | Node} clone\n           * @param {import(\"../../core/scope/scope.js\").Scope} transcludedScope\n           */\n          function ngTranscludeCloneAttachFn(clone, transcludedScope) {\n            if (notWhitespace(clone)) {\n              if (clone instanceof NodeList) {\n                Array.from(clone).forEach((el) => {\n                  $element.append(el);\n                });\n              } else {\n                $element.append(/** @type {Node} */ (clone));\n              }\n            } else {\n              useFallbackContent();\n              // There is nothing linked against the transcluded scope since no content was available,\n              // so it should be safe to clean up the generated scope.\n              transcludedScope.$destroy();\n            }\n          }\n\n          function useFallbackContent() {\n            // Since this is the fallback content rather than the transcluded content,\n            // we link against the scope of this directive rather than the transcluded scope\n            fallbackLinkFn(\n              $scope,\n\n              (clone) => {\n                // @ts-ignore\n                $element.append(clone);\n              },\n            );\n          }\n\n          function notWhitespace(node) {\n            if (node instanceof Array) {\n              return false;\n            } else if (\n              node.nodeType !== Node.TEXT_NODE ||\n              node.nodeValue.trim()\n            ) {\n              return true;\n            }\n          }\n        }\n\n        return ngTranscludePostLink;\n      },\n    };\n  }\n\n  const REGEX_STRING_REGEXP = /^\\/(.+)\\/([a-z]*)$/;\n\n  /**\n   * @type {Record<string, import(\"../../interface.js\").DirectiveFactory>}\n   */\n  const ngAttributeAliasDirectives = {};\n\n  // boolean attrs are evaluated\n  BOOLEAN_ATTR.forEach((i) => {\n    // binding to multiple is not supported\n    if (i === \"multiple\") return;\n\n    function defaultLinkFn(scope, _element, attr) {\n      scope.$watch(attr[normalized], (value) => {\n        attr.$set(i, !!value);\n      });\n    }\n\n    let normalized = directiveNormalize(`ng-${i}`);\n    let linkFn = defaultLinkFn;\n\n    if (i === \"checked\") {\n      linkFn = function (scope, element, attr) {\n        // ensuring ngChecked doesn't interfere with ngModel when both are set on the same input\n        if (attr.ngModel !== attr[normalized]) {\n          defaultLinkFn(scope, element, attr);\n        }\n      };\n    }\n\n    ngAttributeAliasDirectives[normalized] = function () {\n      return {\n        restrict: \"A\",\n        priority: 100,\n        link: linkFn,\n      };\n    };\n  });\n\n  // aliased input attrs are evaluated\n  Object.entries(ALIASED_ATTR).forEach(([ngAttr]) => {\n    ngAttributeAliasDirectives[ngAttr] = function () {\n      return {\n        priority: 100,\n        link(scope, element, attr) {\n          // special case ngPattern when a literal regular expression value\n          // is used as the expression (this way we don't have to watch anything).\n          if (ngAttr === \"ngPattern\" && attr[\"ngPattern\"].charAt(0) === \"/\") {\n            const match = attr[\"ngPattern\"].match(REGEX_STRING_REGEXP);\n            if (match) {\n              attr.$set(\"ngPattern\", new RegExp(match[1], match[2]).toString());\n              return;\n            }\n          }\n\n          scope.$watch(attr[ngAttr], (value) => {\n            attr.$set(ngAttr, value);\n          });\n        },\n      };\n    };\n  });\n\n  // ng-src, ng-srcset, ng-href are interpolated\n  [\"src\", \"srcset\", \"href\"].forEach((attrName) => {\n    const normalized = directiveNormalize(`ng-${attrName}`);\n    ngAttributeAliasDirectives[normalized] = [\n      $injectTokens.$sce,\n      function ($sce) {\n        return {\n          priority: 99, // it needs to run after the attributes are interpolated\n          link(_scope, element, attr) {\n            let name = attrName;\n\n            if (\n              attrName === \"href\" &&\n              toString.call(element[\"href\"]) === \"[object SVGAnimatedString]\"\n            ) {\n              name = \"xlinkHref\";\n              attr.$attr[name] = \"href\";\n            }\n\n            // We need to sanitize the url at least once, in case it is a constant\n            // non-interpolated attribute.\n            attr.$set(normalized, $sce.getTrustedMediaUrl(attr[normalized]));\n\n            attr.$observe(normalized, (value) => {\n              if (!value) {\n                if (attrName === \"href\") {\n                  attr.$set(name, null);\n                }\n                return;\n              }\n\n              attr.$set(name, value);\n            });\n          },\n        };\n      },\n    ];\n  });\n\n  /**\n   *\n   * @param {string} ngRequired AngularTS expression. If it evaluates to `true`, it sets the\n   *                                `required` attribute to the element and adds the `required`\n   *                                {@link ngModel.NgModelController#$validators `validator`}.\n   *\n   *\n   * ngRequired adds the required {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n   * It is most often used for {@link input `input`} and {@link select `select`} controls, but can also be\n   * applied to custom controls.\n   *\n   * The directive sets the `required` attribute on the element if the AngularTS expression inside\n   * `ngRequired` evaluates to true. A special directive for setting `required` is necessary because we\n   * cannot use interpolation inside `required`. See the {@link guide/interpolation interpolation guide}\n   * for more info.\n   *\n   * The validator will set the `required` error key to true if the `required` attribute is set and\n   * calling {@link ngModel.NgModelController#$isEmpty `NgModelController.$isEmpty`} with the\n   * {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`} returns `true`. For example, the\n   * `$isEmpty()` implementation for `input[text]` checks the length of the `$viewValue`. When developing\n   * custom controls, `$isEmpty()` can be overwritten to account for a $viewValue that is not string-based.\n   *\n   */\n  const requiredDirective = [\n    $injectTokens.$parse,\n    /**\n     * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n     * @returns {import(\"../../interface.ts\").Directive}\n     */\n    ($parse) => ({\n      restrict: \"A\",\n      require: \"?ngModel\",\n      link:\n        /**\n         * @param {import(\"../../core/scope/scope.js\").Scope} scope\n         * @param {Element} _elm\n         * @param {import(\"../../core/compile/attributes.js\").Attributes} attr\n         * @param {import(\"../../interface.ts\").NgModelController} ctrl\n         * @returns\n         */\n        (scope, _elm, attr, ctrl) => {\n          if (!ctrl) return;\n          // For boolean attributes like required, presence means true\n          let value =\n            hasOwn(attr, \"required\") || $parse(attr[\"ngRequired\"])(scope);\n\n          if (!attr[\"ngRequired\"]) {\n            // force truthy in case we are on non input element\n            // (input elements do this automatically for boolean attributes like required)\n            attr[\"required\"] = true;\n          }\n\n          ctrl[\"$validators\"].required = (_modelValue, viewValue) => {\n            return !value || !ctrl.$isEmpty(viewValue);\n          };\n\n          attr.$observe(\"required\", (newVal) => {\n            if (value !== newVal) {\n              value = newVal;\n              ctrl.$validate();\n            }\n          });\n        },\n    }),\n  ];\n\n  /**\n   * @param {String|RegExp} ngPattern AngularTS expression that must evaluate to a `RegExp` or a `String`\n   *                                      parsable into a `RegExp`, or a `RegExp` literal. See above for\n   *                                      more details.\n   *\n   * @description\n   *\n   * ngPattern adds the pattern {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n   * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n   *\n   * The validator sets the `pattern` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n   * does not match a RegExp which is obtained from the `ngPattern` attribute value:\n   * - the value is an AngularTS expression:\n   *   - If the expression evaluates to a RegExp object, then this is used directly.\n   *   - If the expression evaluates to a string, then it will be converted to a RegExp after wrapping it\n   *     in `^` and `$` characters. For instance, `\"abc\"` will be converted to `new RegExp('^abc$')`.\n   * - If the value is a RegExp literal, e.g. `ngPattern=\"/^\\d+$/\"`, it is used directly.\n   *\n   * <div class=\"alert alert-info\">\n   * **Note:** Avoid using the `g` flag on the RegExp, as it will cause each successive search to\n   * start at the index of the last search's match, thus not taking the whole input value into\n   * account.\n   * </div>\n   *\n   * <div class=\"alert alert-info\">\n   * **Note:** This directive is also added when the plain `pattern` attribute is used, with two\n   * differences:\n   * <ol>\n   *   <li>\n   *     `ngPattern` does not set the `pattern` attribute and therefore HTML5 constraint validation is\n   *     not available.\n   *   </li>\n   *   <li>\n   *     The `ngPattern` attribute must be an expression, while the `pattern` value must be\n   *     interpolated.\n   *   </li>\n   * </ol>\n   * </div>\n   */\n  const patternDirective = [\n    $injectTokens.$parse,\n    /**\n     * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n     * @returns {import(\"../../interface.ts\").Directive}\n     */\n    ($parse) => ({\n      restrict: \"A\",\n      require: \"?ngModel\",\n      compile: (_Elm, tAttr) => {\n        let patternExp;\n        let parseFn;\n\n        if (tAttr[\"ngPattern\"]) {\n          patternExp = tAttr[\"ngPattern\"];\n\n          // ngPattern might be a scope expression, or an inlined regex, which is not parsable.\n          // We get value of the attribute here, so we can compare the old and the new value\n          // in the observer to avoid unnecessary validations\n          if (\n            tAttr[\"ngPattern\"].charAt(0) === \"/\" &&\n            REGEX_STRING_REGEXP.test(tAttr[\"ngPattern\"])\n          ) {\n            parseFn = function () {\n              return tAttr[\"ngPattern\"];\n            };\n          } else {\n            parseFn = $parse(tAttr[\"ngPattern\"]);\n          }\n        }\n\n        return function (scope, elm, attr, ctrl) {\n          if (!ctrl) return;\n          let attrVal = attr[\"pattern\"];\n\n          if (attr[\"ngPattern\"]) {\n            attrVal = parseFn(scope);\n          } else {\n            patternExp = attr[\"pattern\"];\n          }\n\n          let regexp = parsePatternAttr(attrVal, patternExp, elm);\n          attr.$observe(\"pattern\", (newVal) => {\n            const oldRegexp = regexp;\n\n            regexp = parsePatternAttr(newVal, patternExp, elm);\n\n            if (\n              (oldRegexp && oldRegexp.toString()) !==\n              (regexp && regexp.toString())\n            ) {\n              ctrl[\"$validate\"]();\n            }\n          });\n\n          ctrl[\"$validators\"][\"pattern\"] = (_modelValue, viewValue) => {\n            // HTML5 pattern constraint validates the input value, so we validate the viewValue\n            return (\n              // @ts-ignore\n              ctrl.$isEmpty(viewValue) ||\n              isUndefined(regexp) ||\n              regexp.test(viewValue)\n            );\n          };\n        };\n      },\n    }),\n  ];\n\n  /**\n   * @param {string} ngMaxlength AngularTS expression that must evaluate to a `Number` or `String`\n   *                                 parsable into a `Number`. Used as value for the `maxlength`\n   *                                 {@link ngModel.NgModelController#$validators validator}.\n   *\n   * @description\n   *\n   * ngMaxlength adds the maxlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n   * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n   *\n   * The validator sets the `maxlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n   * is longer than the integer obtained by evaluating the AngularTS expression given in the\n   * `ngMaxlength` attribute value.\n   *\n   * <div class=\"alert alert-info\">\n   * **Note:** This directive is also added when the plain `maxlength` attribute is used, with two\n   * differences:\n   * <ol>\n   *   <li>\n   *     `ngMaxlength` does not set the `maxlength` attribute and therefore HTML5 constraint\n   *     validation is not available.\n   *   </li>\n   *   <li>\n   *     The `ngMaxlength` attribute must be an expression, while the `maxlength` value must be\n   *     interpolated.\n   *   </li>\n   * </ol>\n   * </div>\n   *\n   */\n  const maxlengthDirective = [\n    $injectTokens.$parse,\n    /**\n     * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n     * @returns {import(\"../../interface.ts\").Directive}\n     */\n    ($parse) => ({\n      restrict: \"A\",\n      require: \"?ngModel\",\n      link:\n        /**\n         * @param {import(\"../../core/scope/scope.js\").Scope} scope\n         * @param {*} _elm\n         * @param {import(\"../../core/compile/attributes.js\").Attributes} attr\n         * @param {import(\"../../interface.ts\").NgModelController} ctrl\n         * @returns\n         */\n        (scope, _elm, attr, ctrl) => {\n          if (!ctrl) return;\n\n          let maxlength = attr[\"maxlength\"] || $parse(attr[\"ngMaxlength\"])(scope);\n          let maxlengthParsed = parseLength(maxlength);\n\n          attr.$observe(\"maxlength\", (value) => {\n            if (maxlength !== value) {\n              maxlengthParsed = parseLength(value);\n              maxlength = value;\n              ctrl.$validate();\n            }\n          });\n          ctrl[\"$validators\"].maxlength = function (_modelValue, viewValue) {\n            return (\n              maxlengthParsed < 0 ||\n              ctrl.$isEmpty(viewValue) ||\n              viewValue.length <= maxlengthParsed\n            );\n          };\n        },\n    }),\n  ];\n\n  /**\n   *\n   * @param {string} ngMinlength AngularTS expression that must evaluate to a `Number` or `String`\n   *                                 parsable into a `Number`. Used as value for the `minlength`\n   *                                 {@link ngModel.NgModelController#$validators validator}.\n   *\n   * @description\n   *\n   * ngMinlength adds the minlength {@link ngModel.NgModelController#$validators `validator`} to {@link ngModel `ngModel`}.\n   * It is most often used for text-based {@link input `input`} controls, but can also be applied to custom text-based controls.\n   *\n   * The validator sets the `minlength` error key if the {@link ngModel.NgModelController#$viewValue `ngModel.$viewValue`}\n   * is shorter than the integer obtained by evaluating the AngularTS expression given in the\n   * `ngMinlength` attribute value.\n   *\n   * <div class=\"alert alert-info\">\n   * **Note:** This directive is also added when the plain `minlength` attribute is used, with two\n   * differences:\n   * <ol>\n   *   <li>\n   *     `ngMinlength` does not set the `minlength` attribute and therefore HTML5 constraint\n   *     validation is not available.\n   *   </li>\n   *   <li>\n   *     The `ngMinlength` value must be an expression, while the `minlength` value must be\n   *     interpolated.\n   *   </li>\n   * </ol>\n   * </div>\n   *\n   */\n  const minlengthDirective = [\n    $injectTokens.$parse,\n    ($parse) => ({\n      restrict: \"A\",\n      require: \"?ngModel\",\n      link(scope, elm, attr, ctrl) {\n        if (!ctrl) return;\n\n        let minlength = attr.minlength || $parse(attr.ngMinlength)(scope);\n        let minlengthParsed = parseLength(minlength) || -1;\n\n        attr.$observe(\"minlength\", (value) => {\n          if (minlength !== value) {\n            minlengthParsed = parseLength(value) || -1;\n            minlength = value;\n            ctrl.$validate();\n          }\n        });\n        ctrl.$validators.minlength = function (modelValue, viewValue) {\n          return ctrl.$isEmpty(viewValue) || viewValue.length >= minlengthParsed;\n        };\n      },\n    }),\n  ];\n\n  function parsePatternAttr(regex, patternExp, elm) {\n    if (!regex) return undefined;\n\n    if (isProxy(regex)) {\n      regex = regex.$target;\n    }\n\n    if (isString(regex)) {\n      const match = regex.match(/^\\/(.*)\\/([gimsuy]*)$/);\n      if (match) {\n        regex = new RegExp(match[1], match[2]);\n      } else {\n        regex = new RegExp(`^${regex}$`);\n      }\n    }\n\n    if (!regex.test) {\n      throw minErr(\"ngPattern\")(\n        \"noregexp\",\n        \"Expected {0} to be a RegExp but was {1}. Element: {2}\",\n        patternExp,\n        regex,\n        startingTag(elm),\n      );\n    }\n\n    return regex;\n  }\n\n  function parseLength(val) {\n    const intVal = parseInt(val, 10);\n    return isNumberNaN(intVal) ? -1 : intVal;\n  }\n\n  /**\n   * @typedef {Object} AnchorScrollObject\n   * @property {number|function|Element} yOffset\n   */\n\n  /**\n   * @typedef {(string) => void} AnchorScrollFunction\n   */\n\n  /**\n   * @typedef {AnchorScrollFunction | AnchorScrollObject} AnchorScrollService\n   */\n\n  class AnchorScrollProvider {\n    constructor() {\n      this.autoScrollingEnabled = true;\n    }\n\n    $get = [\n      $injectTokens.$location,\n      $injectTokens.$rootScope,\n      /**\n       *\n       * @param {import('../services/location/location.js').Location} $location\n       * @param {import('../core/scope/scope.js').Scope} $rootScope\n       * @returns\n       */\n      function ($location, $rootScope) {\n        // Helper function to get first anchor from a NodeList\n        // (using `Array#some()` instead of `angular#forEach()` since it's more performant\n        //  and working in all supported browsers.)\n        function getFirstAnchor(list) {\n          let result = null;\n          Array.prototype.some.call(list, (element) => {\n            if (getNodeName(element) === \"a\") {\n              result = element;\n              return true;\n            }\n          });\n          return result;\n        }\n\n        function getYOffset() {\n          // Figure out a better way to configure this other than bolting on a property onto a function\n          let offset = /** @type {AnchorScrollObject} */ (scroll).yOffset;\n\n          if (isFunction(offset)) {\n            offset = /** @type {Function} */ (offset)();\n          } else if (isElement(offset)) {\n            const elem = offset[0];\n            const style = window.getComputedStyle(elem);\n            if (style.position !== \"fixed\") {\n              offset = 0;\n            } else {\n              offset = elem.getBoundingClientRect().bottom;\n            }\n          } else if (!isNumber(offset)) {\n            offset = 0;\n          }\n\n          return offset;\n        }\n\n        function scrollTo(elem) {\n          if (elem) {\n            elem.scrollIntoView();\n\n            const offset = getYOffset();\n\n            if (offset) {\n              // `offset` is the number of pixels we should scroll UP in order to align `elem` properly.\n              // This is true ONLY if the call to `elem.scrollIntoView()` initially aligns `elem` at the\n              // top of the viewport.\n              //\n              // IF the number of pixels from the top of `elem` to the end of the page's content is less\n              // than the height of the viewport, then `elem.scrollIntoView()` will align the `elem` some\n              // way down the page.\n              //\n              // This is often the case for elements near the bottom of the page.\n              //\n              // In such cases we do not need to scroll the whole `offset` up, just the difference between\n              // the top of the element and the offset, which is enough to align the top of `elem` at the\n              // desired position.\n              const elemTop = elem.getBoundingClientRect().top;\n              window.scrollBy(0, elemTop - /** @type {number} */ (offset));\n            }\n          } else {\n            window.scrollTo(0, 0);\n          }\n        }\n\n        /** @type {AnchorScrollService} */\n        const scroll = function (hash) {\n          // Allow numeric hashes\n          hash = isString(hash)\n            ? hash\n            : isNumber(hash)\n              ? hash.toString()\n              : $location.getHash();\n          let elm;\n\n          // empty hash, scroll to the top of the page\n          if (!hash) {\n            scrollTo(null);\n          }\n          // element with given id\n          else if ((elm = document.getElementById(hash))) scrollTo(elm);\n          // first anchor with given name :-D\n          else if ((elm = getFirstAnchor(document.getElementsByName(hash))))\n            scrollTo(elm);\n          // no element and hash === 'top', scroll to the top of the page\n          else if (hash === \"top\") scrollTo(null);\n        };\n\n        // does not scroll when user clicks on anchor link that is currently on\n        // (no url change, no $location.getHash() change), browser native does scroll\n        if (this.autoScrollingEnabled) {\n          $rootScope[\"$location\"] = $location;\n          $rootScope.$watch(\"$location.$$hash\", (newVal, oldVal) => {\n            // skip the initial scroll if $location.hash is empty\n            if (newVal === oldVal && newVal === \"\") return;\n\n            const action = () => Promise.resolve().then(scroll);\n            if (document.readyState === \"complete\") {\n              // Force the action to be run async for consistent behavior\n              // from the action's point of view\n              // i.e. it will definitely not be in a $apply\n              window.setTimeout(() => action());\n            } else {\n              window.addEventListener(\"load\", () => action());\n            }\n          });\n        }\n\n        return scroll;\n      },\n    ];\n  }\n\n  /**\n   * @readonly\n   * @enum {number}\n   */\n  const ASTType = {\n    Program: 1,\n    ExpressionStatement: 2,\n    AssignmentExpression: 3,\n    ConditionalExpression: 4,\n    LogicalExpression: 5,\n    BinaryExpression: 6,\n    UnaryExpression: 7,\n    CallExpression: 8,\n    MemberExpression: 9,\n    Identifier: 10,\n    Literal: 11,\n    ArrayExpression: 12,\n    Property: 13,\n    ObjectExpression: 14,\n    ThisExpression: 15,\n    LocalsExpression: 16,\n    NGValueParameter: 17,\n  };\n\n  const ADD_CLASS_SUFFIX = \"-add\";\n  const REMOVE_CLASS_SUFFIX = \"-remove\";\n  const EVENT_CLASS_PREFIX = \"ng-\";\n  const ACTIVE_CLASS_SUFFIX = \"-active\";\n  const PREPARE_CLASS_SUFFIX = \"-prepare\";\n\n  const NG_ANIMATE_CLASSNAME = \"ng-animate\";\n  const NG_ANIMATE_CHILDREN_DATA = \"$$ngAnimateChildren\";\n  let TRANSITION_PROP;\n  let TRANSITIONEND_EVENT;\n  let ANIMATION_PROP;\n  let ANIMATIONEND_EVENT;\n\n  // If unprefixed events are not supported but webkit-prefixed are, use the latter.\n  // Otherwise, just use W3C names, browsers not supporting them at all will just ignore them.\n  // Note: Chrome implements `window.onwebkitanimationend` and doesn't implement `window.onanimationend`\n  // but at the same time dispatches the `animationend` event and not `webkitAnimationEnd`.\n  // Register both events in case `window.onanimationend` is not supported because of that,\n  // do the same for `transitionend` as Safari is likely to exhibit similar behavior.\n  // Also, the only modern browser that uses vendor prefixes for transitions/keyframes is webkit\n  // therefore there is no reason to test anymore for other vendor prefixes:\n  // http://caniuse.com/#search=transition\n  if (\n    window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    TRANSITION_PROP = \"WebkitTransition\";\n    TRANSITIONEND_EVENT = \"webkitTransitionEnd transitionend\";\n  } else {\n    TRANSITION_PROP = \"transition\";\n    TRANSITIONEND_EVENT = \"transitionend\";\n  }\n\n  if (\n    window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    ANIMATION_PROP = \"WebkitAnimation\";\n    ANIMATIONEND_EVENT = \"webkitAnimationEnd animationend\";\n  } else {\n    ANIMATION_PROP = \"animation\";\n    ANIMATIONEND_EVENT = \"animationend\";\n  }\n\n  const DURATION_KEY = \"Duration\";\n  const PROPERTY_KEY = ASTType.Property;\n  const DELAY_KEY = \"Delay\";\n  const TIMING_KEY = \"TimingFunction\";\n  const ANIMATION_ITERATION_COUNT_KEY = \"IterationCount\";\n  const ANIMATION_PLAYSTATE_KEY = \"PlayState\";\n  const SAFE_FAST_FORWARD_DURATION_VALUE = 9999;\n\n  const ANIMATION_DELAY_PROP = ANIMATION_PROP + DELAY_KEY;\n  const ANIMATION_DURATION_PROP = ANIMATION_PROP + DURATION_KEY;\n  const TRANSITION_DELAY_PROP = TRANSITION_PROP + DELAY_KEY;\n  const TRANSITION_DURATION_PROP = TRANSITION_PROP + DURATION_KEY;\n\n  const ngMinErr$1 = minErr(\"ng\");\n  function assertArg(arg, name, reason) {\n    if (!arg) {\n      throw ngMinErr$1(\n        \"areq\",\n        \"Argument '{0}' is {1}\",\n        name || \"?\",\n        reason,\n      );\n    }\n    return arg;\n  }\n\n  function packageStyles(options) {\n    const styles = {};\n    if (options && (options.to || options.from)) {\n      styles.to = options.to;\n      styles.from = options.from;\n    }\n    return styles;\n  }\n\n  function pendClasses(classes, fix, isPrefix) {\n    let className = \"\";\n\n    classes = Array.isArray(classes)\n      ? classes\n      : classes && isString(classes) && classes.length\n        ? classes.split(/\\s+/)\n        : [];\n    classes.forEach((klass, i) => {\n      if (klass && klass.length > 0) {\n        className += i > 0 ? \" \" : \"\";\n        className += isPrefix ? fix + klass : klass + fix;\n      }\n    });\n    return className;\n  }\n\n  function removeFromArray(arr, val) {\n    const index = arr.indexOf(val);\n    if (val >= 0) {\n      arr.splice(index, 1);\n    }\n  }\n\n  /**\n   *\n   * @param {NodeList|Node} element\n   * @returns {Node[]|Node|undefined}\n   */\n  function stripCommentsFromElement(element) {\n    if (element instanceof NodeList) {\n      return Array.from(element).filter((x) => x.nodeType == Node.ELEMENT_NODE);\n    } else if (element.nodeType === Node.ELEMENT_NODE) {\n      return /** @type {Node} */ (element);\n    } else {\n      return undefined;\n    }\n  }\n\n  /**\n   * @param {NodeList|Node} element\n   * @returns {Node}\n   */\n  function extractElementNode(element) {\n    if (!element) return /** @type {Node} */ (element);\n    for (let i = 0; i < /** @type {NodeList} */ (element).length; i++) {\n      const elm = element[i];\n      if (elm.nodeType === Node.ELEMENT_NODE) {\n        return elm;\n      }\n    }\n  }\n\n  function applyAnimationClassesFactory() {\n    return function (element, options) {\n      if (options.addClass) {\n        element.classList.add(...options.addClass.trim().split(\" \"));\n        options.addClass = null;\n      }\n      if (options.removeClass) {\n        element.classList.remove(...options.removeClass.trim().split(\" \"));\n        options.removeClass = null;\n      }\n    };\n  }\n\n  function prepareAnimationOptions(options) {\n    options = options || {};\n    if (!options.$$prepared) {\n      let domOperation = options.domOperation || (() => {});\n      options.domOperation = function () {\n        options.$$domOperationFired = true;\n        domOperation();\n        domOperation = () => {};\n      };\n      options.$$prepared = true;\n    }\n    return options;\n  }\n\n  function applyAnimationStyles(element, options) {\n    applyAnimationFromStyles(element, options);\n    applyAnimationToStyles(element, options);\n  }\n\n  function applyAnimationFromStyles(element, options) {\n    if (options.from) {\n      //element.css(options.from);\n      options.from = null;\n    }\n  }\n\n  function applyAnimationToStyles(element, options) {\n    if (options.to) {\n      //element.css(options.to);\n      options.to = null;\n    }\n  }\n\n  function mergeAnimationDetails(element, oldAnimation, newAnimation) {\n    const target = oldAnimation.options || {};\n    const newOptions = newAnimation.options || {};\n\n    const toAdd = `${target.addClass || \"\"} ${newOptions.addClass || \"\"}`;\n    const toRemove = `${target.removeClass || \"\"} ${newOptions.removeClass || \"\"}`;\n    const classes = resolveElementClasses(\n      element.getAttribute(\"class\"),\n      toAdd,\n      toRemove,\n    );\n\n    if (newOptions.preparationClasses) {\n      target.preparationClasses = concatWithSpace(\n        newOptions.preparationClasses,\n        target.preparationClasses,\n      );\n      delete newOptions.preparationClasses;\n    }\n\n    extend(target, newOptions);\n\n    if (classes.addClass) {\n      target.addClass = classes.addClass;\n    } else {\n      target.addClass = null;\n    }\n\n    if (classes.removeClass) {\n      target.removeClass = classes.removeClass;\n    } else {\n      target.removeClass = null;\n    }\n\n    oldAnimation.addClass = target.addClass;\n    oldAnimation.removeClass = target.removeClass;\n\n    return target;\n  }\n\n  function resolveElementClasses(existing, toAdd, toRemove) {\n    const ADD_CLASS = 1;\n    const REMOVE_CLASS = -1;\n\n    const flags = {};\n    existing = splitClassesToLookup(existing);\n\n    toAdd = splitClassesToLookup(toAdd);\n    Object.keys(toAdd).forEach((key) => {\n      flags[key] = ADD_CLASS;\n    });\n\n    toRemove = splitClassesToLookup(toRemove);\n    Object.keys(toRemove).forEach((key) => {\n      flags[key] = flags[key] === ADD_CLASS ? null : REMOVE_CLASS;\n    });\n\n    const classes = {\n      addClass: \"\",\n      removeClass: \"\",\n    };\n\n    Object.entries(flags).forEach(([klass, val]) => {\n      let prop, allow;\n      if (val === ADD_CLASS) {\n        prop = \"addClass\";\n        allow = !existing[klass] || existing[klass + REMOVE_CLASS_SUFFIX];\n      } else if (val === REMOVE_CLASS) {\n        prop = \"removeClass\";\n        allow = existing[klass] || existing[klass + ADD_CLASS_SUFFIX];\n      }\n      if (allow) {\n        if (classes[prop].length) {\n          classes[prop] += \" \";\n        }\n        classes[prop] += klass;\n      }\n    });\n\n    function splitClassesToLookup(classes) {\n      if (isString(classes)) {\n        classes = classes.trim().split(\" \");\n      }\n\n      const obj = {};\n      if (classes) {\n        classes.forEach((klass) => {\n          // sometimes the split leaves empty string values\n          // incase extra spaces were applied to the options\n          if (klass.length) {\n            obj[klass] = true;\n          }\n        });\n      }\n      return obj;\n    }\n\n    return classes;\n  }\n\n  function applyGeneratedPreparationClasses(element, event, options) {\n    let classes = \"\";\n    if (event) {\n      classes = pendClasses(event, EVENT_CLASS_PREFIX, true);\n    }\n    if (options.addClass) {\n      classes = concatWithSpace(\n        classes,\n        pendClasses(options.addClass, ADD_CLASS_SUFFIX),\n      );\n    }\n    if (options.removeClass) {\n      classes = concatWithSpace(\n        classes,\n        pendClasses(options.removeClass, REMOVE_CLASS_SUFFIX),\n      );\n    }\n    if (classes.length) {\n      options.preparationClasses = classes;\n      element.className += ` ${classes}`;\n    }\n  }\n\n  function clearGeneratedClasses(element, options) {\n    if (options.preparationClasses) {\n      options.preparationClasses\n        .split(\" \")\n        .forEach((cls) => element.classList.remove(cls));\n      options.preparationClasses = null;\n    }\n    if (options.activeClasses) {\n      options.activeClasses\n        .split(\" \")\n        .forEach((cls) => element.classList.remove(cls));\n      options.activeClasses = null;\n    }\n  }\n\n  function blockKeyframeAnimations(node, applyBlock) {\n    const value = applyBlock ? \"paused\" : \"\";\n    const key = ANIMATION_PROP + ANIMATION_PLAYSTATE_KEY;\n    applyInlineStyle(node, [key, value]);\n    return [key, value];\n  }\n\n  function applyInlineStyle(node, styleTuple) {\n    const prop = styleTuple[0];\n    node.style[prop] = styleTuple[1];\n  }\n\n  function concatWithSpace(a, b) {\n    if (!a) return b;\n    if (!b) return a;\n    return `${a} ${b}`;\n  }\n\n  /** @typedef {\"enter\"|\"leave\"|\"move\"|\"addClass\"|\"setClass\"|\"removeClass\"} AnimationMethod */\n\n  /**\n   * @typedef {Object} AnimationOptions\n   * @property {string} addClass - space-separated CSS classes to add to element\n   * @property {Object} from - CSS properties & values at the beginning of animation. Must have matching `to`\n   * @property {string} removeClass - space-separated CSS classes to remove from element\n   * @property {string} to - CSS properties & values at end of animation. Must have matching `from`\n   */\n\n  const $animateMinErr = minErr(\"$animate\");\n\n  function mergeClasses(a, b) {\n    if (!a && !b) return \"\";\n    if (!a) return b;\n    if (!b) return a;\n    if (Array.isArray(a)) a = a.join(\" \");\n    if (Array.isArray(b)) b = b.join(\" \");\n    return `${a} ${b}`;\n  }\n\n  // if any other type of options value besides an Object value is\n  // passed into the $animate.method() animation then this helper code\n  // will be run which will ignore it. While this patch is not the\n  // greatest solution to this, a lot of existing plugins depend on\n  // $animate to either call the callback (< 1.2) or return a promise\n  // that can be changed. This helper function ensures that the options\n  // are wiped clean incase a callback function is provided.\n  function prepareAnimateOptions(options) {\n    return isObject(options) ? options : {};\n  }\n\n  AnimateProvider.$inject = [\"$provide\"];\n\n  /** @param {import('../interface.ts').Provider} $provide */\n  function AnimateProvider($provide) {\n    const provider = this;\n    let classNameFilter = null;\n    let customFilter = null;\n\n    this.$$registeredAnimations = Object.create(null);\n\n    /**\n     * Registers a new injectable animation factory function. The factory function produces the\n     * animation object which contains callback functions for each event that is expected to be\n     * animated.\n     *\n     *   * `eventFn`: `function(element, ... , doneFunction, options)`\n     *   The element to animate, the `doneFunction` and the options fed into the animation. Depending\n     *   on the type of animation additional arguments will be injected into the animation function. The\n     *   list below explains the function signatures for the different animation methods:\n     *\n     *   - setClass: function(element, addedClasses, removedClasses, doneFunction, options)\n     *   - addClass: function(element, addedClasses, doneFunction, options)\n     *   - removeClass: function(element, removedClasses, doneFunction, options)\n     *   - enter, leave, move: function(element, doneFunction, options)\n     *   - animate: function(element, fromStyles, toStyles, doneFunction, options)\n     *\n     *   Make sure to trigger the `doneFunction` once the animation is fully complete.\n     *\n     * ```js\n     *   return {\n     *     //enter, leave, move signature\n     *     eventFn : function(element, done, options) {\n     *       //code to run the animation\n     *       //once complete, then run done()\n     *       return function endFunction(wasCancelled) {\n     *         //code to cancel the animation\n     *       }\n     *     }\n     *   }\n     * ```\n     *\n     * @param {string} name The name of the animation (this is what the class-based CSS value will be compared to).\n     * @param {import(\"../interface.ts\").Injectable} factory The factory function that will be executed to return the animation\n     *                           object.\n     */\n    this.register = function (name, factory) {\n      if (name && name.charAt(0) !== \".\") {\n        throw $animateMinErr(\n          \"notcsel\",\n          \"Expecting class selector starting with '.' got '{0}'.\",\n          name,\n        );\n      }\n\n      const key = `${name}-animation`;\n      provider.$$registeredAnimations[name.substring(1)] = key;\n      $provide.factory(key, factory);\n    };\n\n    /**\n     * Sets and/or returns the custom filter function that is used to \"filter\" animations, i.e.\n     * determine if an animation is allowed or not. When no filter is specified (the default), no\n     * animation will be blocked. Setting the `customFilter` value will only allow animations for\n     * which the filter function's return value is truthy.\n     *\n     * This allows to easily create arbitrarily complex rules for filtering animations, such as\n     * allowing specific events only, or enabling animations on specific subtrees of the DOM, etc.\n     * Filtering animations can also boost performance for low-powered devices, as well as\n     * applications containing a lot of structural operations.\n     *\n     * <div class=\"alert alert-success\">\n     *   **Best Practice:**\n     *   Keep the filtering function as lean as possible, because it will be called for each DOM\n     *   action (e.g. insertion, removal, class change) performed by \"animation-aware\" directives.\n     *   See {@link guide/animations#which-directives-support-animations- here} for a list of built-in\n     *   directives that support animations.\n     *   Performing computationally expensive or time-consuming operations on each call of the\n     *   filtering function can make your animations sluggish.\n     * </div>\n     *\n     * **Note:** If present, `customFilter` will be checked before\n     * {@link $animateProvider#classNameFilter classNameFilter}.\n     *\n     * @param {Function=} filterFn - The filter function which will be used to filter all animations.\n     *   If a falsy value is returned, no animation will be performed. The function will be called\n     *   with the following arguments:\n     *   - **node** `{Element}` - The DOM element to be animated.\n     *   - **event** `{String}` - The name of the animation event (e.g. `enter`, `leave`, `addClass`\n     *     etc).\n     *   - **options** `{Object}` - A collection of options/styles used for the animation.\n     * @return {Function} The current filter function or `null` if there is none set.\n     */\n    this.customFilter = function (filterFn) {\n      if (arguments.length === 1) {\n        customFilter = isFunction(filterFn) ? filterFn : null;\n      }\n\n      return customFilter;\n    };\n\n    /**\n     * Sets and/or returns the CSS class regular expression that is checked when performing\n     * an animation. Upon bootstrap the classNameFilter value is not set at all and will\n     * therefore enable $animate to attempt to perform an animation on any element that is triggered.\n     * When setting the `classNameFilter` value, animations will only be performed on elements\n     * that successfully match the filter expression. This in turn can boost performance\n     * for low-powered devices as well as applications containing a lot of structural operations.\n     *\n     * **Note:** If present, `classNameFilter` will be checked after\n     * {@link $animateProvider#customFilter customFilter}. If `customFilter` is present and returns\n     * false, `classNameFilter` will not be checked.\n     *\n     * @param {RegExp=} expression The className expression which will be checked against all animations\n     * @return {RegExp} The current CSS className expression value. If null then there is no expression value\n     */\n    this.classNameFilter = function (expression) {\n      if (arguments.length === 1) {\n        classNameFilter = expression instanceof RegExp ? expression : null;\n        if (classNameFilter) {\n          const reservedRegex = new RegExp(\n            `[(\\\\s|\\\\/)]${NG_ANIMATE_CLASSNAME}[(\\\\s|\\\\/)]`,\n          );\n          if (reservedRegex.test(classNameFilter.toString())) {\n            classNameFilter = null;\n            throw $animateMinErr(\n              \"nongcls\",\n              '$animateProvider.classNameFilter(regex) prohibits accepting a regex value which matches/contains the \"{0}\" CSS class.',\n              NG_ANIMATE_CLASSNAME,\n            );\n          }\n        }\n      }\n      return classNameFilter;\n    };\n\n    this.$get = [\n      \"$$animateQueue\",\n      function ($$animateQueue) {\n        /**\n         * The $animate service exposes a series of DOM utility methods that provide support\n         * for animation hooks. The default behavior is the application of DOM operations, however,\n         * when an animation is detected (and animations are enabled), $animate will do the heavy lifting\n         * to ensure that animation runs with the triggered DOM operation.\n         *\n         * By default $animate doesn't trigger any animations. This is because the `ngAnimate` module isn't\n         * included and only when it is active then the animation hooks that `$animate` triggers will be\n         * functional. Once active then all structural `ng-` directives will trigger animations as they perform\n         * their DOM-related operations (enter, leave and move). Other directives such as `ngClass`,\n         * `ngShow`, `ngHide` and `ngMessages` also provide support for animations.\n         *\n         * It is recommended that the`$animate` service is always used when executing DOM-related procedures within directives.\n         */\n        return {\n          /**\n           *\n           * Sets up an event listener to fire whenever the animation event (enter, leave, move, etc...)\n           *    has fired on the given element or among any of its children. Once the listener is fired, the provided callback\n           *    is fired with the following params:\n           *\n           * ```js\n           * $animate.on('enter', container,\n           *    function callback(element, phase) {\n           *      // cool we detected an enter animation within the container\n           *    }\n           * );\n           * ```\n           *\n           * <div class=\"alert alert-warning\">\n           * **Note**: Generally, the events that are fired correspond 1:1 to `$animate` method names,\n           * e.g. {@link ng.$animate#addClass addClass()} will fire `addClass`, and {@link ng.ngClass}\n           * will fire `addClass` if classes are added, and `removeClass` if classes are removed.\n           * However, there are two exceptions:\n           *\n           * <ul>\n           *   <li>if both an {@link ng.$animate#addClass addClass()} and a\n           *   {@link ng.$animate#removeClass removeClass()} action are performed during the same\n           *   animation, the event fired will be `setClass`. This is true even for `ngClass`.</li>\n           *   <li>an {@link ng.$animate#animate animate()} call that adds and removes classes will fire\n           *   the `setClass` event, but if it either removes or adds classes,\n           *   it will fire `animate` instead.</li>\n           * </ul>\n           *\n           * </div>\n           *\n           * @param {string} event the animation event that will be captured (e.g. enter, leave, move, addClass, removeClass, etc...)\n           * @param {Element} container the container element that will capture each of the animation events that are fired on itself\n           *     as well as among its children\n           * @param {Function} callback the callback function that will be fired when the listener is triggered.\n           *\n           * The arguments present in the callback function are:\n           * * `element` - The captured DOM element that the animation was fired on.\n           * * `phase` - The phase of the animation. The two possible phases are **start** (when the animation starts) and **close** (when it ends).\n           * * `data` - an object with these properties:\n           *     * addClass - `{string|null}` - space-separated CSS classes to add to the element\n           *     * removeClass - `{string|null}` - space-separated CSS classes to remove from the element\n           *     * from - `{Object|null}` - CSS properties & values at the beginning of the animation\n           *     * to - `{Object|null}` - CSS properties & values at the end of the animation\n           *\n           * Note that the callback does not trigger a scope digest. Wrap your call into a\n           * {@link $rootScope.Scope#$apply scope.$apply} to propagate changes to the scope.\n           */\n          on: $$animateQueue.on,\n\n          /**\n           * Deregisters an event listener based on the event which has been associated with the provided element. This method\n           * can be used in three different ways depending on the arguments:\n           *\n           * ```js\n           * // remove all the animation event listeners listening for `enter`\n           * $animate.off('enter');\n           *\n           * // remove listeners for all animation events from the container element\n           * $animate.off(container);\n           *\n           * // remove all the animation event listeners listening for `enter` on the given element and its children\n           * $animate.off('enter', container);\n           *\n           * // remove the event listener function provided by `callback` that is set\n           * // to listen for `enter` on the given `container` as well as its children\n           * $animate.off('enter', container, callback);\n           * ```\n           *\n           * @param {string|Element} event|container the animation event (e.g. enter, leave, move,\n           * addClass, removeClass, etc...), or the container element. If it is the element, all other\n           * arguments are ignored.\n           * @param {Element=} container the container element the event listener was placed on\n           * @param {Function=} callback the callback function that was registered as the listener\n           */\n          off: $$animateQueue.off,\n\n          /**\n           *  Associates the provided element with a host parent element to allow the element to be animated even if it exists\n           *  outside of the DOM structure of the AngularTS application. By doing so, any animation triggered via `$animate` can be issued on the\n           *  element despite being outside the realm of the application or within another application. Say for example if the application\n           *  was bootstrapped on an element that is somewhere inside of the `<body>` tag, but we wanted to allow for an element to be situated\n           *  as a direct child of `document.body`, then this can be achieved by pinning the element via `$animate.pin(element)`. Keep in mind\n           *  that calling `$animate.pin(element, parentElement)` will not actually insert into the DOM anywhere; it will just create the association.\n           *\n           *  Note that this feature is only active when the `ngAnimate` module is used.\n           *\n           * @param {Element} element the external element that will be pinned\n           * @param {Element} parentElement the host parent element that will be associated with the external element\n           */\n          pin: $$animateQueue.pin,\n\n          /**\n           * Used to get and set whether animations are enabled or not on the entire application or on an element and its children. This\n           * function can be called in four ways:\n           *\n           * ```js\n           * // returns true or false\n           * $animate.enabled();\n           *\n           * // changes the enabled state for all animations\n           * $animate.enabled(false);\n           * $animate.enabled(true);\n           *\n           * // returns true or false if animations are enabled for an element\n           * $animate.enabled(element);\n           *\n           * // changes the enabled state for an element and its children\n           * $animate.enabled(element, true);\n           * $animate.enabled(element, false);\n           * ```\n           *\n           * @param {Element=} element the element that will be considered for checking/setting the enabled state\n           * @param {boolean=} enabled whether or not the animations will be enabled for the element\n           *\n           * @return {boolean} whether or not animations are enabled\n           */\n          enabled: $$animateQueue.enabled,\n\n          /**\n         * Cancels the provided animation and applies the end state of the animation.\n         * Note that this does not cancel the underlying operation, e.g. the setting of classes or\n         * adding the element to the DOM.\n         *\n         * @param {import('./animate-runner.js').AnimateRunner} runner An animation runner returned by an $animate function.\n         *\n         * @example\n          <example module=\"animationExample\" deps=\"angular-animate.js\" animations=\"true\" name=\"animate-cancel\">\n            <file name=\"app.js\">\n              angular.module('animationExample', []).component('cancelExample', {\n                templateUrl: 'template.html',\n                controller: function($element, $animate) {\n                  this.runner = null;\n\n                  this.addClass = function() {\n                    this.runner = $animate.addClass($element.querySelectorAll('div'), 'red');\n                    let ctrl = this;\n                    this.runner.finally(function() {\n                      ctrl.runner = null;\n                    });\n                  };\n\n                  this.removeClass = function() {\n                    this.runner = $animate.removeClass($element.querySelectorAll('div'), 'red');\n                    let ctrl = this;\n                    this.runner.finally(function() {\n                      ctrl.runner = null;\n                    });\n                  };\n\n                  this.cancel = function() {\n                    $animate.cancel(this.runner);\n                  };\n                }\n              });\n            </file>\n            <file name=\"template.html\">\n              <p>\n                <button id=\"add\" ng-click=\"$ctrl.addClass()\">Add</button>\n                <button ng-click=\"$ctrl.removeClass()\">Remove</button>\n                <br>\n                <button id=\"cancel\" ng-click=\"$ctrl.cancel()\" ng-disabled=\"!$ctrl.runner\">Cancel</button>\n                <br>\n                <div id=\"target\">CSS-Animated Text</div>\n              </p>\n            </file>\n            <file name=\"index.html\">\n              <cancel-example></cancel-example>\n            </file>\n            <file name=\"style.css\">\n              .red-add, .red-remove {\n                transition: all 4s cubic-bezier(0.250, 0.460, 0.450, 0.940);\n              }\n\n              .red,\n              .red-add.red-add-active {\n                color: #FF0000;\n                font-size: 40px;\n              }\n\n              .red-remove.red-remove-active {\n                font-size: 10px;\n                color: black;\n              }\n\n            </file>\n          </example>\n         */\n          cancel(runner) {\n            if (runner.cancel) {\n              runner.cancel();\n            }\n          },\n\n          /**\n           * Inserts the element into the DOM either after the `after` element (if provided) or\n           * as the first child within the `parent` element and then triggers an animation.\n           * A promise is returned that will be resolved during the next digest once the animation\n           * has completed.\n           *\n           * @param {Element} element - the element which will be inserted into the DOM\n           * @param {Element} parent - the parent element which will append the element as a child (so long as the after element is not present)\n           * @param {Element} after - after the sibling element after which the element will be appended\n           * @param {AnimationOptions} [options] - an optional collection of options/styles that will be applied to the element.\n           * @returns {import('./animate-runner.js').AnimateRunner} the animation runner\n           */\n          enter(element, parent, after, options) {\n            parent = parent || after.parentElement;\n            domInsert(element, parent, after);\n            return $$animateQueue.push(\n              element,\n              \"enter\",\n              prepareAnimateOptions(options),\n            );\n          },\n\n          /**\n           * Inserts (moves) the element into its new position in the DOM either after\n           * the `after` element (if provided) or as the first child within the `parent` element\n           * and then triggers an animation. A promise is returned that will be resolved\n           * during the next digest once the animation has completed.\n           *\n           * @param {Element} element - the element which will be inserted into the DOM\n           * @param {Element} parent - the parent element which will append the element as a child (so long as the after element is not present)\n           * @param {Element} after - after the sibling element after which the element will be appended\n           * @param {AnimationOptions} [options] - an optional collection of options/styles that will be applied to the element.\n           * @returns {import('./animate-runner.js').AnimateRunner} the animation runner\n           */\n          move(element, parent, after, options) {\n            parent = parent || after.parentElement;\n            domInsert(element, parent, after);\n            return $$animateQueue.push(\n              element,\n              \"move\",\n              prepareAnimateOptions(options),\n            );\n          },\n\n          /**\n           * Triggers an animation and then removes the element from the DOM.\n           * When the function is called a promise is returned that will be resolved during the next\n           * digest once the animation has completed.\n           *\n           * @param {Element} element the element which will be removed from the DOM\n           * @param {AnimationOptions} [options] an optional collection of options/styles that will be applied to the element.\n           * @returns {import('./animate-runner.js').AnimateRunner} the animation runner\n           */\n          leave(element, options) {\n            return $$animateQueue.push(\n              element,\n              \"leave\",\n              prepareAnimateOptions(options),\n              () => {\n                // TODO no array should be here\n                if (Array.isArray(element)) {\n                  element.forEach((x) => removeElement(x));\n                } else {\n                  removeElement(element);\n                }\n              },\n            );\n          },\n\n          /**\n           * Triggers an addClass animation surrounding the addition of the provided CSS class(es). Upon\n           * execution, the addClass operation will only be handled after the next digest and it will not trigger an\n           * animation if element already contains the CSS class or if the class is removed at a later step.\n           * Note that class-based animations are treated differently compared to structural animations\n           * (like enter, move and leave) since the CSS classes may be added/removed at different points\n           * depending if CSS or JavaScript animations are used.\n           *\n           * @param {Element} element the element which the CSS classes will be applied to\n           * @param {string} className the CSS class(es) that will be added (multiple classes are separated via spaces)\n           * @param {AnimationOptions} [options] an optional collection of options/styles that will be applied to the element.\n           * @return {import('./animate-runner.js').AnimateRunner}} animationRunner the animation runner\n           */\n          addClass(element, className, options) {\n            options = prepareAnimateOptions(options);\n            options.addClass = mergeClasses(options.addClass, className);\n            return $$animateQueue.push(element, \"addClass\", options);\n          },\n\n          /**\n           * Triggers a removeClass animation surrounding the removal of the provided CSS class(es). Upon\n           * execution, the removeClass operation will only be handled after the next digest and it will not trigger an\n           * animation if element does not contain the CSS class or if the class is added at a later step.\n           * Note that class-based animations are treated differently compared to structural animations\n           * (like enter, move and leave) since the CSS classes may be added/removed at different points\n           * depending if CSS or JavaScript animations are used.\n           *\n           * @param {Element} element the element which the CSS classes will be applied to\n           * @param {string} className the CSS class(es) that will be removed (multiple classes are separated via spaces)\n           * @param {AnimationOptions} [options] an optional collection of options/styles that will be applied to the element.         *\n           * @return {import('./animate-runner.js').AnimateRunner} animationRunner the animation runner\n           */\n          removeClass(element, className, options) {\n            options = prepareAnimateOptions(options);\n            options.removeClass = mergeClasses(options.removeClass, className);\n            return $$animateQueue.push(element, \"removeClass\", options);\n          },\n\n          /**\n           * Performs both the addition and removal of a CSS classes on an element and (during the process)\n           * triggers an animation surrounding the class addition/removal. Much like `$animate.addClass` and\n           * `$animate.removeClass`, `setClass` will only evaluate the classes being added/removed once a digest has\n           * passed. Note that class-based animations are treated differently compared to structural animations\n           * (like enter, move and leave) since the CSS classes may be added/removed at different points\n           * depending if CSS or JavaScript animations are used.\n           *\n           * @param {Element} element the element which the CSS classes will be applied to\n           * @param {string} add the CSS class(es) that will be added (multiple classes are separated via spaces)\n           * @param {string} remove the CSS class(es) that will be removed (multiple classes are separated via spaces)\n           * @param {object=} options an optional collection of options/styles that will be applied to the element.\n           *\n           * @return {import('./animate-runner.js').AnimateRunner} the animation runner\n           */\n          setClass(element, add, remove, options) {\n            options = prepareAnimateOptions(options);\n            options.addClass = mergeClasses(options.addClass, add);\n            options.removeClass = mergeClasses(options.removeClass, remove);\n            return $$animateQueue.push(element, \"setClass\", options);\n          },\n\n          /**\n           * Performs an inline animation on the element which applies the provided to and from CSS styles to the element.\n           * If any detected CSS transition, keyframe or JavaScript matches the provided className value, then the animation will take\n           * on the provided styles. For example, if a transition animation is set for the given className, then the provided `from` and\n           * `to` styles will be applied alongside the given transition. If the CSS style provided in `from` does not have a corresponding\n           * style in `to`, the style in `from` is applied immediately, and no animation is run.\n           * If a JavaScript animation is detected then the provided styles will be given in as function parameters into the `animate`\n           * method (or as part of the `options` parameter):\n           *\n           * ```js\n           * ngModule.animation('.my-inline-animation', function() {\n           *   return {\n           *     animate : function(element, from, to, done, options) {\n           *       //animation\n           *       done();\n           *     }\n           *   }\n           * });\n           * ```\n           *  @return {import('./animate-runner.js').AnimateRunner} the animation runner\n           */\n          animate(element, from, to, className, options) {\n            options = prepareAnimateOptions(options);\n            options.from = options.from ? extend(options.from, from) : from;\n            options.to = options.to ? extend(options.to, to) : to;\n\n            className = className || \"ng-inline-animate\";\n            options.tempClasses = mergeClasses(options.tempClasses, className);\n            return $$animateQueue.push(element, \"animate\", options);\n          },\n        };\n      },\n    ];\n  }\n\n  function AnimateAsyncRunFactoryProvider() {\n    this.$get = [\n      function () {\n        let waitQueue = [];\n\n        function waitForTick(fn) {\n          waitQueue.push(fn);\n          if (waitQueue.length > 1) return;\n          window.requestAnimationFrame(function () {\n            for (let i = 0; i < waitQueue.length; i++) {\n              waitQueue[i]();\n            }\n            waitQueue = [];\n          });\n        }\n\n        return function () {\n          let passed = false;\n          waitForTick(function () {\n            passed = true;\n          });\n          return function (callback) {\n            if (passed) {\n              callback();\n            } else {\n              waitForTick(callback);\n            }\n          };\n        };\n      },\n    ];\n  }\n\n  const INITIAL_STATE = 0;\n  const DONE_PENDING_STATE = 1;\n  const DONE_COMPLETE_STATE = 2;\n  let $$animateAsyncRun;\n\n  function AnimateRunnerFactoryProvider() {\n    this.$get = [\n      \"$$animateAsyncRun\",\n      function (animateAsyncRun) {\n        $$animateAsyncRun = animateAsyncRun;\n        return AnimateRunner;\n      },\n    ];\n  }\n\n  class AnimateRunner {\n    static chain(chain, callback) {\n      let index = 0;\n\n      function next() {\n        if (index === chain.length) {\n          callback(true);\n          return;\n        }\n\n        chain[index]((response) => {\n          if (response === false) {\n            callback(false);\n            return;\n          }\n          index++;\n          next();\n        });\n      }\n\n      next();\n    }\n\n    static all(runners, callback) {\n      let count = 0;\n      let status = true;\n\n      runners.forEach((runner) => {\n        runner.done(onProgress);\n      });\n\n      function onProgress(response) {\n        status = status && response;\n        if (++count === runners.length) {\n          callback(status);\n        }\n      }\n    }\n\n    constructor(host) {\n      this.setHost(host);\n\n      const rafTick = $$animateAsyncRun();\n      const timeoutTick = (fn) => {\n        setTimeout(fn, 0, false);\n      };\n\n      this._doneCallbacks = [];\n      this._tick = (fn) => {\n        if (document.hidden) {\n          timeoutTick(fn);\n        } else {\n          rafTick(fn);\n        }\n      };\n      this._state = 0;\n    }\n\n    setHost(host) {\n      this.host = host || {};\n    }\n\n    done(fn) {\n      if (this._state === DONE_COMPLETE_STATE) {\n        fn();\n      } else {\n        this._doneCallbacks.push(fn);\n      }\n    }\n\n    progress() {}\n\n    getPromise() {\n      if (!this.promise) {\n        const self = this;\n        this.promise = new Promise((resolve, reject) => {\n          self.done((status) => {\n            if (status === false) {\n              reject();\n            } else {\n              resolve();\n            }\n          });\n        });\n      }\n      return this.promise;\n    }\n\n    then(resolveHandler, rejectHandler) {\n      return this.getPromise().then(resolveHandler, rejectHandler);\n    }\n\n    catch(handler) {\n      return this.getPromise().catch(handler);\n    }\n\n    finally(handler) {\n      return this.getPromise().finally(handler);\n    }\n\n    pause() {\n      if (this.host.pause) {\n        this.host.pause();\n      }\n    }\n\n    resume() {\n      if (this.host.resume) {\n        this.host.resume();\n      }\n    }\n\n    end() {\n      if (this.host.end) {\n        this.host.end();\n      }\n      this._resolve(true);\n    }\n\n    cancel() {\n      if (this.host.cancel) {\n        this.host.cancel();\n      }\n      this._resolve(false);\n    }\n\n    complete(response) {\n      if (this._state === INITIAL_STATE) {\n        this._state = DONE_PENDING_STATE;\n        this._tick(() => {\n          this._resolve(response);\n        });\n      }\n    }\n\n    _resolve(response) {\n      if (this._state !== DONE_COMPLETE_STATE) {\n        this._doneCallbacks.forEach((fn) => {\n          fn(response);\n        });\n        this._doneCallbacks.length = 0;\n        this._state = DONE_COMPLETE_STATE;\n      }\n    }\n  }\n\n  /**\n   * Provides an instance of a cache that can be used to store and retrieve template content.\n   */\n  class TemplateCacheProvider {\n    constructor() {\n      /** @type {import('./interface.ts').TemplateCache} */\n      this.cache = new Map();\n    }\n    /**\n     * @returns {import('./interface.ts').TemplateCache}\n     */\n    $get() {\n      return this.cache;\n    }\n  }\n\n  /**\n   * Handles uncaught exceptions thrown in AngularTS expressions.\n   *\n   * By default, this service delegates to `$log.error()`, logging the exception to the browser console.\n   * You can override this behavior to provide custom exception handling—such as reporting errors\n   * to a backend server, or altering the log level used.\n   *\n   * ## Default Behavior\n   *\n   * Uncaught exceptions within AngularTS expressions are intercepted and passed to this service.\n   * The default implementation logs the error using `$log.error(exception, cause)`.\n   *\n   * ## Custom Implementation\n   *\n   * You can override the default `$exceptionHandler` by providing your own factory. This allows you to:\n   * - Log errors to a remote server\n   * - Change the log level (e.g., from `error` to `warn`)\n   * - Trigger custom error-handling workflows\n   *\n   * ### Example: Overriding `$exceptionHandler`\n   *\n   * ```js\n   * angular\n   *   .module('exceptionOverwrite', [])\n   *   .factory('$exceptionHandler', ['$log', 'logErrorsToBackend', function($log, logErrorsToBackend) {\n   *     return function myExceptionHandler(exception, cause) {\n   *       logErrorsToBackend(exception, cause);\n   *       $log.warn(exception, cause); // Use warn instead of error\n   *     };\n   *   }]);\n   * ```\n   * - You may also manually invoke the exception handler:\n   *\n   * ```js\n   * try {\n   *   // Some code that might throw\n   * } catch (e) {\n   *   $exceptionHandler(e, 'optional context');\n   * }\n   * ```\n   *\n   * @see {@link angular.ErrorHandler AngularTS ErrorHandler}\n   */\n\n  /** @typedef {import('../log/interface.ts').LogService} LogService */\n\n  /** @typedef {import(\"./interface.ts\").Interface}  ErrorHandler */\n\n  /**\n   * Provider for `$exceptionHandler` service. Delegates uncaught exceptions to `$log.error()` by default.\n   * Can be overridden to implement custom error-handling logic.\n   */\n  class ExceptionHandlerProvider {\n    constructor() {\n      /** @type {LogService} */\n      this.log = window.console;\n\n      /** @type {ErrorHandler} */\n      this.errorHandler = (exception, cause) => {\n        this.log.error(exception, cause);\n      };\n\n      this.$get = [\n        \"$log\",\n        /**\n         * @param {LogService} $log\n         * @returns {ErrorHandler}\n         */\n        ($log) => {\n          this.log = $log;\n          return this.errorHandler;\n        },\n      ];\n    }\n  }\n\n  /**\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function filterFilter() {\n    /**\n     * @param {Array} array The source array.\n     * @param {string|Object|function(any, number, []):[]} expression The predicate to be used for selecting items from `array`.\n     * @param {function(any, any):boolean|boolean} [comparator] Comparator which is used in determining if values retrieved using `expression`\n     * (when it is not a function) should be considered a match based on the expected value (from the filter expression) and actual value (from the object in the array).\n     * @param {string} [anyPropertyKey] The special property name that matches against any property.\n     * @return {Array} Filtered array\n     */\n    return function (array, expression, comparator, anyPropertyKey) {\n      if (!isArrayLike(array)) {\n        if (array == null) {\n          return array;\n        }\n        throw minErr(\"filter\")(\n          \"notarray\",\n          \"Expected array but received: {0}\",\n          array,\n        );\n      }\n\n      anyPropertyKey = anyPropertyKey || \"$\";\n      let predicateFn;\n\n      let matchAgainstAnyProp = false;\n\n      switch (getTypeForFilter(expression)) {\n        case \"function\":\n          predicateFn = expression;\n          break;\n        case \"boolean\":\n        case \"null\":\n        case \"number\":\n        case \"string\":\n          matchAgainstAnyProp = true;\n        // falls through\n        case \"object\":\n          predicateFn = createPredicateFn(\n            expression,\n            comparator,\n            anyPropertyKey,\n            matchAgainstAnyProp,\n          );\n          break;\n        default:\n          return array;\n      }\n\n      return Array.prototype.filter.call(array, predicateFn);\n    };\n  }\n\n  // Helper functions for `filterFilter`\n  function createPredicateFn(\n    expression,\n    comparator,\n    anyPropertyKey,\n    matchAgainstAnyProp,\n  ) {\n    const shouldMatchPrimitives =\n      isObject(expression) && anyPropertyKey in expression;\n    let predicateFn;\n\n    if (comparator === true) {\n      comparator = equals$1;\n    } else if (!isFunction(comparator)) {\n      comparator = function (actual, expected) {\n        if (isUndefined(actual)) {\n          // No substring matching against `undefined`\n          return false;\n        }\n        if (actual === null || expected === null) {\n          // No substring matching against `null`; only match against `null`\n          return actual === expected;\n        }\n        if (\n          isObject(expected) ||\n          (isObject(actual) && !hasCustomToString(actual))\n        ) {\n          // Should not compare primitives against objects, unless they have custom `toString` method\n          return false;\n        }\n\n        actual = `${actual}`.toLowerCase();\n        expected = `${expected}`.toLowerCase();\n        return actual.indexOf(expected) !== -1;\n      };\n    }\n\n    predicateFn = function (item) {\n      if (shouldMatchPrimitives && !isObject(item)) {\n        return deepCompare(\n          item,\n          expression[anyPropertyKey],\n          comparator,\n          anyPropertyKey,\n          false,\n        );\n      }\n      return deepCompare(\n        item,\n        expression,\n        comparator,\n        anyPropertyKey,\n        matchAgainstAnyProp,\n      );\n    };\n\n    return predicateFn;\n  }\n\n  function deepCompare(\n    actual,\n    expected,\n    comparator,\n    anyPropertyKey,\n    matchAgainstAnyProp,\n    dontMatchWholeObject,\n  ) {\n    const actualType = getTypeForFilter(actual);\n    const expectedType = getTypeForFilter(expected);\n\n    if (expectedType === \"string\" && expected.charAt(0) === \"!\") {\n      return !deepCompare(\n        actual,\n        expected.substring(1),\n        comparator,\n        anyPropertyKey,\n        matchAgainstAnyProp,\n      );\n    }\n    if (Array.isArray(actual)) {\n      // In case `actual` is an array, consider it a match\n      // if ANY of it's items matches `expected`\n      return actual.some((item) =>\n        deepCompare(\n          item,\n          expected,\n          comparator,\n          anyPropertyKey,\n          matchAgainstAnyProp,\n        ),\n      );\n    }\n\n    switch (actualType) {\n      case \"object\":\n        if (matchAgainstAnyProp) {\n          for (let key in actual) {\n            // Under certain, rare, circumstances, key may not be a string and `charAt` will be undefined\n            // See: https://github.com/angular/angular.js/issues/15644\n            if (\n              key.charAt &&\n              key.charAt(0) !== \"$\" &&\n              deepCompare(actual[key], expected, comparator, anyPropertyKey, true)\n            ) {\n              return true;\n            }\n          }\n          return dontMatchWholeObject\n            ? false\n            : deepCompare(actual, expected, comparator, anyPropertyKey, false);\n        }\n        if (expectedType === \"object\") {\n          for (let key in expected) {\n            const expectedVal = expected[key];\n            if (isFunction(expectedVal) || isUndefined(expectedVal)) {\n              continue;\n            }\n\n            const matchAnyProperty = key === anyPropertyKey;\n            const actualVal = matchAnyProperty ? actual : actual[key];\n            if (\n              !deepCompare(\n                actualVal,\n                expectedVal,\n                comparator,\n                anyPropertyKey,\n                matchAnyProperty,\n                matchAnyProperty,\n              )\n            ) {\n              return false;\n            }\n          }\n          return true;\n        }\n        return comparator(actual, expected);\n\n      case \"function\":\n        return false;\n      default:\n        return comparator(actual, expected);\n    }\n  }\n\n  // Used for easily differentiating between `null` and actual `object`\n  function getTypeForFilter(val) {\n    return val === null ? \"null\" : typeof val;\n  }\n\n  /**\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function jsonFilter() {\n    return function (object, spacing) {\n      if (isUndefined(spacing)) {\n        spacing = 2;\n      }\n      return toJson(object, spacing);\n    };\n  }\n\n  /**\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function limitToFilter() {\n    /**\n     * @param {Array|ArrayLike|string|number|Function} input Array/array-like, string, or number to be limited.\n     * @param {string|number} limit The length of the returned array or string.\n     * @param {string|number} [begin] Index at which to begin limitation. As a negative index, `begin` indicates an offset from the end of `input`. Defaults to `0`.\n     */\n    return function (input, limit, begin) {\n      if (isFunction(input)) {\n        input = /** @type {Function} */ (input)();\n      }\n      if (Math.abs(Number(limit)) === Infinity) {\n        limit = Number(limit);\n      } else {\n        limit = parseInt(/** @type {string} */ (limit), 10);\n      }\n      if (isNumberNaN(limit)) return input;\n\n      if (isNumber(input)) input = input.toString();\n      if (!isArrayLike(input)) return input;\n\n      begin =\n        !begin || isNaN(/** @type {any} */ (begin))\n          ? 0\n          : parseInt(/** @type {string} */ (begin), 10);\n      begin =\n        begin < 0 ? Math.max(0, /** @type {[]} */ (input).length + begin) : begin;\n\n      if (limit >= 0) {\n        return sliceFn(input, begin, begin + limit);\n      } else {\n        if (begin === 0) {\n          return sliceFn(input, limit, /** @type {[]} */ (input).length);\n        } else {\n          return sliceFn(input, Math.max(0, begin + limit), begin);\n        }\n      }\n    };\n  }\n\n  function sliceFn(input, begin, end) {\n    if (isString(input)) return input.slice(begin, end);\n\n    return [].slice.call(input, begin, end);\n  }\n\n  orderByFilter.$inject = [$injectTokens.$parse];\n\n  /**\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function orderByFilter($parse) {\n    return function (array, sortPredicate, reverseOrder, compareFn) {\n      if (array == null) return array;\n      if (isFunction(array)) return array();\n      if (!isArrayLike(array)) {\n        throw minErr(\"orderBy\")(\n          \"notarray\",\n          \"Expected array but received: {0}\",\n          array,\n        );\n      }\n\n      if (!Array.isArray(sortPredicate)) {\n        sortPredicate = [sortPredicate];\n      }\n      if (sortPredicate.length === 0) {\n        sortPredicate = [\"+\"];\n      }\n\n      const predicates = processPredicates(sortPredicate);\n\n      const descending = reverseOrder ? -1 : 1;\n\n      // Define the `compare()` function. Use a default comparator if none is specified.\n      const compare = isFunction(compareFn) ? compareFn : defaultCompare;\n\n      // The next three lines are a version of a Swartzian Transform idiom from Perl\n      // (sometimes called the Decorate-Sort-Undecorate idiom)\n      // See https://en.wikipedia.org/wiki/Schwartzian_transform\n      const compareValues = Array.prototype.map.call(array, getComparisonObject);\n      compareValues.sort(doComparison);\n      array = compareValues.map((item) => item.value);\n\n      return array;\n\n      function getComparisonObject(value, index) {\n        // NOTE: We are adding an extra `tieBreaker` value based on the element's index.\n        // This will be used to keep the sort stable when none of the input predicates can\n        // distinguish between two elements.\n        return {\n          value,\n          tieBreaker: { value: index, type: \"number\", index },\n          predicateValues: predicates.map((predicate) =>\n            getPredicateValue(predicate.get(value), index),\n          ),\n        };\n      }\n\n      function doComparison(v1, v2) {\n        for (let i = 0, ii = predicates.length; i < ii; i++) {\n          const result = compare(v1.predicateValues[i], v2.predicateValues[i]);\n          if (result) {\n            return result * predicates[i].descending * descending;\n          }\n        }\n\n        return (\n          (compare(v1.tieBreaker, v2.tieBreaker) ||\n            defaultCompare(v1.tieBreaker, v2.tieBreaker)) * descending\n        );\n      }\n    };\n\n    function processPredicates(sortPredicates) {\n      return sortPredicates.map((predicate) => {\n        let descending = 1;\n        let get = (x) => x;\n\n        if (isFunction(predicate)) {\n          get = predicate;\n        } else if (isString(predicate)) {\n          if (predicate.charAt(0) === \"+\" || predicate.charAt(0) === \"-\") {\n            descending = predicate.charAt(0) === \"-\" ? -1 : 1;\n            predicate = predicate.substring(1);\n          }\n          if (predicate !== \"\") {\n            let parsed = $parse(predicate);\n            if (parsed.constant) {\n              const key = parsed();\n              get = (value) => value[key];\n            } else {\n              get = parsed;\n            }\n          }\n        }\n        return { get, descending };\n      });\n    }\n\n    function isPrimitive(value) {\n      switch (typeof value) {\n        case \"number\": /* falls through */\n        case \"boolean\": /* falls through */\n        case \"string\":\n          return true;\n        default:\n          return false;\n      }\n    }\n\n    function objectValue(value) {\n      // If `valueOf` is a valid function use that\n      if (isFunction(value.valueOf)) {\n        value = value.valueOf();\n        if (isPrimitive(value)) return value;\n      }\n      // If `toString` is a valid function and not the one from `Object.prototype` use that\n      if (hasCustomToString(value)) {\n        value = value.toString();\n        if (isPrimitive(value)) return value;\n      }\n\n      return value;\n    }\n\n    function getPredicateValue(value, index) {\n      /** @type {String} */ let type = typeof value;\n      if (value === null) {\n        type = \"null\";\n      } else if (type === \"object\") {\n        value = objectValue(value);\n      }\n      return { value, type, index };\n    }\n\n    function defaultCompare(v1, v2) {\n      let result = 0;\n      const type1 = v1.type;\n      const type2 = v2.type;\n\n      if (type1 === type2) {\n        let value1 = v1.value;\n        let value2 = v2.value;\n\n        if (type1 === \"string\") {\n          // Compare strings case-insensitively\n          value1 = value1.toLowerCase();\n          value2 = value2.toLowerCase();\n        } else if (type1 === \"object\") {\n          // For basic objects, use the position of the object\n          // in the collection instead of the value\n          if (isObject(value1)) value1 = v1.index;\n          if (isObject(value2)) value2 = v2.index;\n        }\n\n        if (value1 !== value2) {\n          result = value1 < value2 ? -1 : 1;\n        }\n      } else {\n        result =\n          type1 === \"undefined\"\n            ? 1\n            : type2 === \"undefined\"\n              ? -1\n              : type1 === \"null\"\n                ? 1\n                : type2 === \"null\"\n                  ? -1\n                  : type1 < type2\n                    ? -1\n                    : 1;\n      }\n\n      return result;\n    }\n  }\n\n  $IsStateFilter.$inject = [$injectTokens.$state];\n\n  /**\n   * `isState` Filter: truthy if the current state is the parameter\n   *\n   * Translates to [[StateService.is]] `$state.is(\"stateName\")`.\n   *\n   * #### Example:\n   * ```html\n   * <div ng-if=\"'stateName' | isState\">show if state is 'stateName'</div>\n   * ```\n   *\n   * @param {import('./state/state-service.js').StateProvider} $state\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function $IsStateFilter($state) {\n    const isFilter = (state, params, options) =>\n      $state.is(state, params, options);\n    isFilter.$stateful = true;\n    return isFilter;\n  }\n\n  $IncludedByStateFilter.$inject = [$injectTokens.$state];\n\n  /**\n   * `includedByState` Filter: truthy if the current state includes the parameter\n   *\n   * Translates to [[StateService.includes]]` $state.is(\"fullOrPartialStateName\")`.\n   *\n   * #### Example:\n   * ```html\n   * <div ng-if=\"'fullOrPartialStateName' | includedByState\">show if state includes 'fullOrPartialStateName'</div>\n   * ```\n   *\n   * @param {import('./state/state-service.js').StateProvider} $state\n   * @returns {import('../interface.ts').FilterFn}\n   */\n  function $IncludedByStateFilter($state) {\n    const includesFilter = function (state, params, options) {\n      return $state.includes(state, params, options);\n    };\n    includesFilter.$stateful = true;\n    return includesFilter;\n  }\n\n  const SUFFIX = \"Filter\";\n\n  class FilterProvider {\n    /* @ignore */ static $inject = [$injectTokens.$provide];\n\n    /**\n     * @param {import('../../interface.ts').Provider} $provide\n     */\n    constructor($provide) {\n      this.$provide = $provide;\n      this.register({\n        filter: filterFilter,\n        json: jsonFilter,\n        limitTo: limitToFilter,\n        orderBy: orderByFilter,\n        isState: $IsStateFilter,\n        includedByState: $IncludedByStateFilter,\n      });\n    }\n\n    /**\n     * @param {string|Record<string, import('../../interface.ts').FilterFactory>} name\n     * @param {import('../../interface.ts').FilterFactory} [factory]\n     * @return {import('../../interface.ts').Provider}\n     */\n    register(name, factory) {\n      if (isObject(name)) {\n        Object.entries(name).forEach(([key, filter]) => {\n          this.register(key, filter);\n        });\n      }\n      return this.$provide.factory(name + SUFFIX, factory);\n    }\n\n    $get = [\n      $injectTokens.$injector,\n      /**\n       * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n       * @returns {import('../../interface.ts').FilterFn}\n       */\n      ($injector) => (/** @type {string} */ name) => $injector.get(name + SUFFIX),\n    ];\n  }\n\n  const PURITY_ABSOLUTE = 1;\n  const PURITY_RELATIVE = 2;\n\n  class ASTInterpreter {\n    /**\n     * @param {function(any):any} $filter\n     */\n    constructor($filter) {\n      this.$filter = $filter;\n    }\n\n    /**\n     * Compiles the AST into a function.\n     * @param {import(\"./ast/ast\").ASTNode} ast - The AST to compile.\n     * @returns {import(\"./interface.ts\").CompiledExpression}\n     */\n    compile(ast) {\n      let decoratedNode = findConstantAndWatchExpressions(ast, this.$filter);\n      /** @type {import(\"./ast/ast\").ASTNode} */\n      let assignable;\n      /** @type {import(\"./interface.ts\").CompiledExpression} */\n      let assign;\n      if ((assignable = assignableAST(decoratedNode))) {\n        assign = /** @type {import(\"./interface.ts\").CompiledExpression} */ (\n          this.recurse(assignable)\n        );\n      }\n      const toWatch = getInputs(decoratedNode.body);\n      let inputs;\n      if (toWatch) {\n        inputs = [];\n        for (const [key, watch] of Object.entries(toWatch)) {\n          const input =\n            /** @type {import(\"./interface.ts\").CompiledExpression} */ (\n              this.recurse(watch)\n            );\n          input.isPure = watch.isPure;\n          watch.input = input;\n          inputs.push(input);\n          watch.watchId = key;\n        }\n      }\n      const expressions = [];\n      decoratedNode.body.forEach((expression) => {\n        expressions.push(this.recurse(expression.expression));\n      });\n\n      /** @type {import(\"./interface.ts\").CompiledExpression} */\n      const fn =\n        decoratedNode.body.length === 0\n          ? () => {}\n          : decoratedNode.body.length === 1\n            ? expressions[0]\n            : function (scope, locals) {\n                let lastValue;\n                expressions.forEach((exp) => {\n                  lastValue = exp(scope, locals);\n                });\n                return lastValue;\n              };\n      if (assign) {\n        fn.assign = (scope, value, locals) => assign(scope, locals, value);\n      }\n      if (inputs) {\n        fn.inputs = inputs;\n      }\n      fn.decoratedNode = decoratedNode;\n      return fn;\n    }\n\n    /**\n     * Recurses the AST nodes.\n     * @param {import(\"./ast/ast\").ASTNode} ast - The AST node.\n     * @param {Object} [context] - The context.\n     * @param {boolean|1} [create] - The create flag.\n     * @returns {import(\"./interface.ts\").CompiledExpressionFunction} The recursive function.\n     */\n    recurse(ast, context, create) {\n      let left;\n      let right;\n      const self = this;\n      let args;\n      switch (ast.type) {\n        case ASTType.Literal:\n          return this.value(ast.value, context);\n        case ASTType.UnaryExpression:\n          right = this.recurse(ast.argument);\n          return this[`unary${ast.operator}`](right, context);\n        case ASTType.BinaryExpression:\n          left = this.recurse(ast.left);\n          right = this.recurse(ast.right);\n          return this[`binary${ast.operator}`](left, right, context);\n        case ASTType.LogicalExpression:\n          left = this.recurse(ast.left);\n          right = this.recurse(ast.right);\n          return this[`binary${ast.operator}`](left, right, context);\n        case ASTType.ConditionalExpression:\n          return /** @type {import(\"./interface.ts\").CompiledExpressionFunction} */ (\n            this[\"ternary?:\"](\n              this.recurse(ast.test),\n              this.recurse(ast.alternate),\n              this.recurse(ast.consequent),\n              context,\n            )\n          );\n        case ASTType.Identifier:\n          return self.identifier(ast.name, context, create);\n        case ASTType.MemberExpression:\n          left = this.recurse(ast.object, false, !!create);\n          if (!ast.computed) {\n            right = ast.property.name;\n          }\n          if (ast.computed) right = this.recurse(ast.property);\n          return /** @type {import(\"./interface.ts\").CompiledExpressionFunction} */ (\n            ast.computed\n              ? this.computedMember(\n                  left,\n                  /** @type {function } */ (right),\n                  context,\n                  create,\n                )\n              : this.nonComputedMember(\n                  left,\n                  /** @type {string } */ (right),\n                  context,\n                  create,\n                )\n          );\n        case ASTType.CallExpression:\n          args = [];\n          ast.arguments.forEach((expr) => {\n            args.push(self.recurse(expr));\n          });\n          if (ast.filter) right = this.$filter(ast.callee.name);\n          if (!ast.filter) right = this.recurse(ast.callee, true);\n          return ast.filter\n            ? (scope, locals, assign) => {\n                const values = [];\n                for (let i = 0; i < args.length; ++i) {\n                  const res = args[i](\n                    scope && scope.$target ? scope.$target : scope,\n                    locals,\n                    assign,\n                  );\n                  values.push(res);\n                }\n                const value = () => {\n                  return right.apply(undefined, values);\n                };\n                return context\n                  ? { context: undefined, name: undefined, value }\n                  : value;\n              }\n            : (scope, locals, assign) => {\n                const rhs = right(\n                  scope.$target ? scope.$target : scope,\n                  locals,\n                  assign,\n                );\n                let value;\n                if (rhs.value != null && isFunction(rhs.value)) {\n                  const values = [];\n                  for (let i = 0; i < args.length; ++i) {\n                    const res = args[i](scope, locals, assign);\n                    values.push(isFunction(res) ? res() : res);\n                  }\n                  value = rhs.value.apply(rhs.context, values);\n                }\n                return context ? { value } : value;\n              };\n        case ASTType.AssignmentExpression:\n          left = this.recurse(ast.left, true, 1);\n          right = this.recurse(ast.right);\n          return (scope, locals, assign) => {\n            const lhs = left(scope, locals, assign);\n            const rhs = right(scope, locals, assign);\n            // lhs.context[lhs.name] = rhs;\n            const ctx = isProxy(lhs.context)\n              ? lhs.context\n              : (lhs.context.$proxy ?? lhs.context);\n            ctx[lhs.name] = rhs;\n            return context ? { value: rhs } : rhs;\n          };\n        case ASTType.ArrayExpression:\n          args = [];\n          ast.elements.forEach((expr) => {\n            args.push(self.recurse(expr));\n          });\n          return (scope, locals, assign) => {\n            const value = [];\n            for (let i = 0; i < args.length; ++i) {\n              value.push(args[i](scope, locals, assign));\n            }\n            return context ? { value } : value;\n          };\n        case ASTType.ObjectExpression:\n          args = [];\n          ast.properties.forEach((property) => {\n            if (property.computed) {\n              args.push({\n                key: self.recurse(property.key),\n                computed: true,\n                value: self.recurse(property.value),\n              });\n            } else {\n              args.push({\n                key:\n                  property.key.type === ASTType.Identifier\n                    ? property.key.name\n                    : `${property.key.value}`,\n                computed: false,\n                value: self.recurse(property.value),\n              });\n            }\n          });\n          return (scope, locals, assign) => {\n            const value = {};\n            for (let i = 0; i < args.length; ++i) {\n              if (args[i].computed) {\n                value[args[i].key(scope, locals, assign)] = args[i].value(\n                  scope,\n                  locals,\n                  assign,\n                );\n              } else {\n                value[args[i].key] = args[i].value(scope, locals, assign);\n              }\n            }\n            return context ? { value } : value;\n          };\n        case ASTType.ThisExpression:\n          return (scope) => (context ? { value: scope } : scope.$proxy);\n        case ASTType.LocalsExpression:\n          // @ts-ignore\n          return (scope, locals) => (context ? { value: locals } : locals);\n        case ASTType.NGValueParameter:\n          // @ts-ignore\n          return (scope, locals, assign) =>\n            context ? { value: assign } : assign;\n      }\n    }\n\n    /**\n     * Unary plus operation.\n     * @param {function} argument - The argument function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The unary plus function.\n     */\n    \"unary+\"(argument, context) {\n      return (scope, locals, assign) => {\n        let arg = argument(scope, locals, assign);\n        if (isDefined(arg)) {\n          arg = +arg;\n        } else {\n          arg = 0;\n        }\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Unary minus operation.\n     * @param {function} argument - The argument function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The unary minus function.\n     */\n    \"unary-\"(argument, context) {\n      return (scope, locals, assign) => {\n        let arg = argument(scope, locals, assign);\n        if (isDefined(arg)) {\n          arg = -arg;\n        } else {\n          arg = -0;\n        }\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Unary negation operation.\n     * @param {function} argument - The argument function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The unary negation function.\n     */\n    \"unary!\"(argument, context) {\n      return (scope, locals, assign) => {\n        const arg = !argument(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary plus operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary plus function.\n     */\n    \"binary+\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const lhs = left(scope, locals, assign);\n        const rhs = right(scope, locals, assign);\n        const arg = plusFn(lhs, rhs);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary minus operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary minus function.\n     */\n    \"binary-\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const lhs = left(scope, locals, assign);\n        const rhs = right(scope, locals, assign);\n        const arg = (isDefined(lhs) ? lhs : 0) - (isDefined(rhs) ? rhs : 0);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary multiplication operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary multiplication function.\n     */\n    \"binary*\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) * right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    \"binary/\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) / right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary division operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary division function.\n     */\n    \"binary%\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) % right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary strict equality operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary strict equality function.\n     */\n    \"binary===\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) === right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary strict inequality operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary strict inequality function.\n     */\n    \"binary!==\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) !== right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary equality operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary equality function.\n     */\n    \"binary==\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) == right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary inequality operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary inequality function.\n     */\n    \"binary!=\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) != right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary less-than operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary less-than function.\n     */\n    \"binary<\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) < right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary greater-than operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary greater-than function.\n     */\n    \"binary>\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) > right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary less-than-or-equal-to operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary less-than-or-equal-to function.\n     */\n    \"binary<=\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) <= right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary greater-than-or-equal-to operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary greater-than-or-equal-to function.\n     */\n    \"binary>=\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) >= right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n    /**\n     * Binary logical AND operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary logical AND function.\n     */\n    \"binary&&\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) && right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Binary logical OR operation.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The binary logical OR function.\n     */\n    \"binary||\"(left, right, context) {\n      return (scope, locals, assign) => {\n        const arg = left(scope, locals, assign) || right(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Ternary conditional operation.\n     * @param {function} test - The test function.\n     * @param {function} alternate - The alternate function.\n     * @param {function} consequent - The consequent function.\n     * @param {Object} [context] - The context.\n     * @returns {function} The ternary conditional function.\n     */\n    \"ternary?:\"(test, alternate, consequent, context) {\n      return (scope, locals, assign) => {\n        const arg = test(scope, locals, assign)\n          ? alternate(scope, locals, assign)\n          : consequent(scope, locals, assign);\n        return context ? { value: arg } : arg;\n      };\n    }\n\n    /**\n     * Returns the value of a literal.\n     * @param {*} value - The literal value.\n     * @param {Object} [context] - The context.\n     * @returns {import(\"./interface.ts\").CompiledExpressionFunction} The function returning the literal value.\n     */\n    value(value, context) {\n      return () =>\n        context ? { context: undefined, name: undefined, value } : value;\n    }\n\n    /**\n     * Returns the value of an identifier.\n     * @param {string} name - The identifier name.\n     * @param {Object} [context] - The context.\n     * @param {boolean|1} [create] - Whether to create the identifier if it does not exist.\n     * @returns {import(\"./interface.ts\").CompiledExpressionFunction} The function returning the identifier value.\n     */\n    identifier(name, context, create) {\n      return (scope, locals) => {\n        const base =\n          locals && name in locals ? locals : ((scope && scope.$proxy) ?? scope);\n        if (create && create !== 1 && base && base[name] == null) {\n          base[name] = {};\n        }\n        let value = undefined;\n        if (base) {\n          value = base[\"$target\"] ? base[\"$target\"][name] : base[name];\n        }\n        if (context) {\n          return { context: base, name, value };\n        }\n        return value;\n      };\n    }\n\n    /**\n     * Returns the value of a computed member expression.\n     * @param {function} left - The left operand function.\n     * @param {function} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @param {boolean|1} [create] - Whether to create the member if it does not exist.\n     * @returns {function} The function returning the computed member value.\n     */\n    computedMember(left, right, context, create) {\n      return (scope, locals, assign) => {\n        const lhs = left(scope, locals, assign);\n        let rhs;\n        let value;\n        if (lhs != null) {\n          rhs = right(scope, locals, assign);\n          rhs = getStringValue(rhs);\n          if (create && create !== 1) {\n            if (lhs && !lhs[rhs]) {\n              lhs[rhs] = {};\n            }\n          }\n          value = lhs[rhs];\n        }\n        if (context) {\n          return { context: lhs, name: rhs, value };\n        }\n        return value;\n      };\n    }\n\n    /**\n     * Returns the value of a non-computed member expression.\n     * @param {function} left - The left operand function.\n     * @param {string} right - The right operand function.\n     * @param {Object} [context] - The context.\n     * @param {boolean|1} [create] - Whether to create the member if it does not exist.\n     * @returns {function} The function returning the non-computed member value.\n     */\n    nonComputedMember(left, right, context, create) {\n      return (scope, locals, assign) => {\n        const lhs = left(scope, locals, assign);\n        if (create && create !== 1) {\n          if (lhs && lhs[right] == null) {\n            lhs[right] = {};\n          }\n        }\n        const value = lhs != null ? lhs[right] : undefined;\n        if (context) {\n          return { context: lhs, name: right, value };\n        }\n        return value;\n      };\n    }\n  }\n\n  /**\n   * @typedef {import(\"./ast/ast\").ASTNode & {\n   *  isPure: boolean|number,\n   *  constant: boolean,\n   *  toWatch: Array,\n   * }} DecoratedASTNode\n   */\n\n  /**\n   * Decorates AST with constant, toWatch, and isPure properties\n   * @param {import(\"./ast/ast\").ASTNode} ast\n   * @param {function(any):any} $filter\n   * @param {boolean|1|2} [parentIsPure]\n   * @returns {DecoratedASTNode}\n   */\n  function findConstantAndWatchExpressions(ast, $filter, parentIsPure) {\n    let allConstants;\n    let argsToWatch;\n    let isStatelessFilter;\n    let decoratedNode = /** @type  {DecoratedASTNode} */ (ast);\n    let decoratedLeft,\n      decoratedRight,\n      decoratedTest,\n      decoratedAlternate,\n      decoratedConsequent,\n      decoratedObject,\n      decoratedProperty,\n      decoratedKey;\n    // @ts-ignore\n    const astIsPure = (decoratedNode.isPure = isPure(ast, parentIsPure));\n\n    switch (ast.type) {\n      case ASTType.Program:\n        allConstants = true;\n        decoratedNode.body.forEach((expr) => {\n          let decorated = findConstantAndWatchExpressions(\n            expr.expression,\n            $filter,\n            astIsPure,\n          );\n          allConstants = allConstants && decorated.constant;\n        });\n        decoratedNode.constant = allConstants;\n        return decoratedNode;\n      case ASTType.Literal:\n        decoratedNode.constant = true;\n        decoratedNode.toWatch = [];\n        return decoratedNode;\n      case ASTType.UnaryExpression:\n        var decorated = findConstantAndWatchExpressions(\n          decoratedNode.argument,\n          $filter,\n          astIsPure,\n        );\n        decoratedNode.constant = decorated.constant;\n        decoratedNode.toWatch = decorated.toWatch;\n        return decoratedNode;\n      case ASTType.BinaryExpression:\n        decoratedLeft = findConstantAndWatchExpressions(\n          decoratedNode.left,\n          $filter,\n          astIsPure,\n        );\n        decoratedRight = findConstantAndWatchExpressions(\n          decoratedNode.right,\n          $filter,\n          astIsPure,\n        );\n        decoratedNode.constant =\n          decoratedLeft.constant && decoratedRight.constant;\n        decoratedNode.toWatch = decoratedLeft.toWatch.concat(\n          decoratedRight.toWatch,\n        );\n        return decoratedNode;\n      case ASTType.LogicalExpression:\n        decoratedLeft = findConstantAndWatchExpressions(\n          decoratedNode.left,\n          $filter,\n          astIsPure,\n        );\n        decoratedRight = findConstantAndWatchExpressions(\n          decoratedNode.right,\n          $filter,\n          astIsPure,\n        );\n        decoratedNode.constant =\n          decoratedLeft.constant && decoratedRight.constant;\n        decoratedNode.toWatch = decoratedNode.constant ? [] : [ast];\n        return decoratedNode;\n      case ASTType.ConditionalExpression:\n        decoratedTest = findConstantAndWatchExpressions(\n          ast.test,\n          $filter,\n          astIsPure,\n        );\n        decoratedAlternate = findConstantAndWatchExpressions(\n          ast.alternate,\n          $filter,\n          astIsPure,\n        );\n        decoratedConsequent = findConstantAndWatchExpressions(\n          ast.consequent,\n          $filter,\n          astIsPure,\n        );\n        decoratedNode.constant =\n          decoratedTest.constant &&\n          decoratedAlternate.constant &&\n          decoratedConsequent.constant;\n        decoratedNode.toWatch = decoratedNode.constant ? [] : [ast];\n        return decoratedNode;\n      case ASTType.Identifier:\n        decoratedNode.constant = false;\n        decoratedNode.toWatch = [ast];\n        return decoratedNode;\n      case ASTType.MemberExpression:\n        decoratedObject = findConstantAndWatchExpressions(\n          ast.object,\n          $filter,\n          astIsPure,\n        );\n        if (ast.computed) {\n          decoratedProperty = findConstantAndWatchExpressions(\n            ast.property,\n            $filter,\n            astIsPure,\n          );\n        }\n        decoratedNode.constant =\n          decoratedObject.constant &&\n          (!decoratedNode.computed || decoratedProperty.constant);\n        decoratedNode.toWatch = decoratedNode.constant ? [] : [ast];\n        return decoratedNode;\n      case ASTType.CallExpression:\n        isStatelessFilter = ast.filter\n          ? isStateless($filter, ast.callee.name)\n          : false;\n        allConstants = isStatelessFilter;\n        argsToWatch = [];\n        ast.arguments.forEach((expr) => {\n          decorated = findConstantAndWatchExpressions(expr, $filter, astIsPure);\n          allConstants = allConstants && decorated.constant;\n          argsToWatch.push.apply(argsToWatch, decorated.toWatch);\n        });\n        decoratedNode.constant = allConstants;\n        decoratedNode.toWatch = isStatelessFilter ? argsToWatch : [decoratedNode];\n        return decoratedNode;\n      case ASTType.AssignmentExpression:\n        decoratedLeft = findConstantAndWatchExpressions(\n          ast.left,\n          $filter,\n          astIsPure,\n        );\n        decoratedRight = findConstantAndWatchExpressions(\n          ast.right,\n          $filter,\n          astIsPure,\n        );\n        decoratedNode.constant =\n          decoratedLeft.constant && decoratedRight.constant;\n        decoratedNode.toWatch = [decoratedNode];\n        return decoratedNode;\n      case ASTType.ArrayExpression:\n        allConstants = true;\n        argsToWatch = [];\n        ast.elements.forEach((expr) => {\n          decorated = findConstantAndWatchExpressions(expr, $filter, astIsPure);\n          allConstants = allConstants && decorated.constant;\n          argsToWatch.push.apply(argsToWatch, decorated.toWatch);\n        });\n        decoratedNode.constant = allConstants;\n        decoratedNode.toWatch = argsToWatch;\n        return decoratedNode;\n      case ASTType.ObjectExpression:\n        allConstants = true;\n        argsToWatch = [];\n        ast.properties.forEach((property) => {\n          decorated = findConstantAndWatchExpressions(\n            property.value,\n            $filter,\n            astIsPure,\n          );\n          allConstants = allConstants && decorated.constant;\n          argsToWatch.push.apply(argsToWatch, decorated.toWatch);\n          if (property.computed) {\n            // `{[key]: value}` implicitly does `key.toString()` which may be non-pure\n            decoratedKey = findConstantAndWatchExpressions(\n              property.key,\n              $filter,\n              false,\n            );\n            allConstants = allConstants && decoratedKey.constant;\n            argsToWatch.push.apply(argsToWatch, decoratedKey.toWatch);\n          }\n        });\n        decoratedNode.constant = allConstants;\n        decoratedNode.toWatch = argsToWatch;\n        return decoratedNode;\n      case ASTType.ThisExpression:\n        decoratedNode.constant = false;\n        decoratedNode.toWatch = [];\n        return decoratedNode;\n      case ASTType.LocalsExpression:\n        decoratedNode.constant = false;\n        decoratedNode.toWatch = [];\n        return decoratedNode;\n    }\n  }\n\n  /**\n   * Converts a single expression AST node into an assignment expression if the expression is assignable.\n   *\n   * @param {import(\"./ast/ast\").ASTNode} ast\n   * @returns {import(\"./ast/ast\").ASTNode}\n   */\n  function assignableAST(ast) {\n    if (ast.body.length === 1 && isAssignable(ast.body[0].expression)) {\n      return {\n        type: ASTType.AssignmentExpression,\n        left: ast.body[0].expression,\n        right: { type: ASTType.NGValueParameter },\n        operator: \"=\",\n      };\n    }\n  }\n\n  function plusFn(l, r) {\n    if (typeof l === \"undefined\" || isObject(l)) return r;\n    if (typeof r === \"undefined\" || isObject(r)) return l;\n    return l + r;\n  }\n\n  /**\n   *\n   * @param {import(\"./ast/ast\").ASTNode[]} body\n   * @returns {any}\n   */\n  function getInputs(body) {\n    if (body.length !== 1) return;\n    const lastExpression = /** @type {DecoratedASTNode} */ (body[0].expression);\n    const candidate = lastExpression.toWatch;\n    if (candidate.length !== 1) return candidate;\n    return candidate[0] !== lastExpression ? candidate : undefined;\n  }\n\n  /**\n   * Detect nodes which could depend on non-shallow state of objects\n   * @param {import(\"./ast/ast\").ASTNode} node\n   * @param {boolean|PURITY_ABSOLUTE|PURITY_RELATIVE} parentIsPure\n   * @returns {boolean|PURITY_ABSOLUTE|PURITY_RELATIVE}\n   */\n  function isPure(node, parentIsPure) {\n    switch (node.type) {\n      // Computed members might invoke a stateful toString()\n      case ASTType.MemberExpression:\n        if (node.computed) {\n          return false;\n        }\n        break;\n\n      // Unary always convert to primitive\n      case ASTType.UnaryExpression:\n        return PURITY_ABSOLUTE;\n\n      // The binary + operator can invoke a stateful toString().\n      case ASTType.BinaryExpression:\n        return node.operator !== \"+\" ? PURITY_ABSOLUTE : false;\n\n      // Functions / filters probably read state from within objects\n      case ASTType.CallExpression:\n        return false;\n    }\n\n    return undefined === parentIsPure ? PURITY_RELATIVE : parentIsPure;\n  }\n\n  function isStateless($filter, filterName) {\n    const fn = $filter(filterName);\n    return !fn.$stateful;\n  }\n\n  /**\n   * Converts parameter to  strings property name for use  as keys in an object.\n   * Any non-string object, including a number, is typecasted into a string via the toString method.\n   * {@link https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Property_accessors#Property_names}\n   *\n   * @param {!any} name\n   * @returns {string}\n   */\n  function getStringValue(name) {\n    return `${name}`;\n  }\n\n  /**\n   * @param {import(\"./ast/ast\").ASTNode} ast\n   * @returns {boolean}\n   */\n  function isAssignable(ast) {\n    return (\n      ast.type === ASTType.Identifier || ast.type === ASTType.MemberExpression\n    );\n  }\n\n  /**\n   * @typedef {import(\"./token.ts\").Token} Token\n   */\n\n  const $parseMinErr$1 = minErr(\"$parse\");\n\n  const ESCAPE = {\n    n: \"\\n\",\n    f: \"\\f\",\n    r: \"\\r\",\n    t: \"\\t\",\n    v: \"\\v\",\n    \"'\": \"'\",\n    '\"': '\"',\n  };\n\n  const OPERATORS = new Set(\n    \"+ - * / % === !== == != < > <= >= && || ! = |\".split(\" \"),\n  );\n\n  /**\n   * @typedef {Object} LexerOptions\n   * @property {(ch: string, codePoint: number) => boolean} [isIdentifierStart] - Custom function to determine if a character is a valid identifier start.\n   * @property {(ch: string, codePoint: number) => boolean} [isIdentifierContinue] - Custom function to determine if a character is a valid identifier continuation.\n   */\n\n  /**\n   * Represents a lexer that tokenizes input text. The Lexer takes the original expression string and returns an array of tokens parsed from that string.\n   * For example, the string \"a + b\" would result in tokens for a, +, and b.\n   */\n  class Lexer {\n    /**\n     * Creates an instance of Lexer.\n     * @param {LexerOptions} options - Lexer options.\n     */\n    constructor(options) {\n      /** @type {LexerOptions} */\n      this.options = options;\n    }\n\n    /**\n     * Tokenizes the input text.\n     * @param {string} text Input text to lex.\n     * @returns {Array<Token>} Array of tokens.\n     */\n    lex(text) {\n      this.text = text;\n      this.index = 0;\n      /** @type {Array<Token>} */\n      this.tokens = [];\n\n      while (this.index < this.text.length) {\n        const ch = this.text.charAt(this.index);\n        if (ch === '\"' || ch === \"'\") {\n          this.readString(ch);\n        } else if (\n          this.isNumber(ch) ||\n          (ch === \".\" && this.isNumber(/** @type {string} */ (this.peek())))\n        ) {\n          this.readNumber();\n        } else if (\n          this.isIdentifierStart &&\n          this.isIdentifierStart(this.peekMultichar())\n        ) {\n          this.readIdent();\n        } else if (this.is(ch, \"(){}[].,;:?\")) {\n          this.tokens.push({ index: this.index, text: ch });\n          this.index++;\n        } else if (this.isWhitespace(ch)) {\n          this.index++;\n        } else {\n          const ch2 = ch + this.peek();\n          const ch3 = ch2 + this.peek(2);\n          const op1 = OPERATORS.has(ch);\n          const op2 = OPERATORS.has(ch2);\n          const op3 = OPERATORS.has(ch3);\n          if (op1 || op2 || op3) {\n            const token = op3 ? ch3 : op2 ? ch2 : ch;\n            this.tokens.push({ index: this.index, text: token, operator: true });\n            this.index += token.length;\n          } else {\n            this.throwError(\n              \"Unexpected next character \",\n              this.index,\n              this.index + 1,\n            );\n          }\n        }\n      }\n      return this.tokens;\n    }\n\n    /**\n     * Checks if a character is contained in a set of characters.\n     * @param {string} ch Character to check.\n     * @param {string} chars Set of characters.\n     * @returns {boolean} True if character is in the set, false otherwise.\n     */\n    is(ch, chars) {\n      return chars.indexOf(ch) !== -1;\n    }\n\n    /**\n     * Peeks at the next character in the text.\n     * @param {number} [i=1] Number of characters to peek.\n     * @returns {string|false} Next character or false if end of text.\n     */\n    peek(i) {\n      const num = i || 1;\n      return this.index + num < this.text.length\n        ? this.text.charAt(this.index + num)\n        : false;\n    }\n\n    /**\n     * Checks if a character is a number.\n     * @param {string} ch Character to check.\n     * @returns {boolean} True if character is a number, false otherwise.\n     */\n    isNumber(ch) {\n      return ch >= \"0\" && ch <= \"9\" && typeof ch === \"string\";\n    }\n\n    /**\n     * Checks if a character is whitespace.\n     * @param {string} ch Character to check.\n     * @returns {boolean} True if character is whitespace, false otherwise.\n     */\n    isWhitespace(ch) {\n      return (\n        ch === \" \" || ch === \"\\r\" || ch === \"\\t\" || ch === \"\\n\" || ch === \"\\v\"\n      );\n    }\n\n    /**\n     * Checks if a character is a valid identifier start.\n     * @param {string} ch Character to check.\n     * @returns {boolean} True if character is a valid identifier start, false otherwise.\n     */\n    isIdentifierStart(ch) {\n      return this.options.isIdentifierStart\n        ? this.options.isIdentifierStart(ch, this.codePointAt(ch))\n        : (ch >= \"a\" && ch <= \"z\") ||\n            (ch >= \"A\" && ch <= \"Z\") ||\n            ch === \"_\" ||\n            ch === \"$\";\n    }\n\n    /**\n     * Checks if a character is a valid identifier continuation.\n     * @param {string} ch Character to check.\n     * @returns {boolean} True if character is a valid identifier continuation, false otherwise.\n     */\n    isIdentifierContinue(ch) {\n      return this.options.isIdentifierContinue\n        ? this.options.isIdentifierContinue(ch, this.codePointAt(ch))\n        : (ch >= \"a\" && ch <= \"z\") ||\n            (ch >= \"A\" && ch <= \"Z\") ||\n            ch === \"_\" ||\n            ch === \"$\" ||\n            (ch >= \"0\" && ch <= \"9\");\n    }\n\n    /**\n     * Converts a character to its Unicode code point.\n     * @param {string} ch Character to convert.\n     * @returns {number} Unicode code point.\n     */\n    codePointAt(ch) {\n      if (ch.length === 1) return ch.charCodeAt(0);\n      return (ch.charCodeAt(0) << 10) + ch.charCodeAt(1) - 0x35fdc00;\n    }\n\n    /**\n     * Peeks at the next multicharacter sequence in the text.\n     * @returns {string} Next multicharacter sequence.\n     */\n    peekMultichar() {\n      const ch = this.text.charAt(this.index);\n      const peek = this.peek();\n      if (!peek) {\n        return ch;\n      }\n      const cp1 = ch.charCodeAt(0);\n      const cp2 = peek.charCodeAt(0);\n      if (cp1 >= 0xd800 && cp1 <= 0xdbff && cp2 >= 0xdc00 && cp2 <= 0xdfff) {\n        return ch + peek;\n      }\n      return ch;\n    }\n\n    /**\n     * Checks if a character is an exponent operator.\n     * @param {string} ch Character to check.\n     * @returns {boolean} True if character is an exponent operator, false otherwise.\n     */\n    isExpOperator(ch) {\n      return ch === \"-\" || ch === \"+\" || this.isNumber(ch);\n    }\n\n    /**\n     * Throws a lexer error.\n     * @param {string} error Error message.\n     * @param {number} [start] Start index.\n     * @param {number} [end] End index.\n     * @throws {Error} Lexer error.\n     */\n    throwError(error, start, end) {\n      end = end || this.index;\n      const colStr = isDefined(start)\n        ? `s ${start}-${this.index} [${this.text.substring(start, end)}]`\n        : ` ${end}`;\n      throw $parseMinErr$1(\n        \"lexerr\",\n        `Lexer Error: ${error} at column${colStr} in expression [${this.text}].`,\n      );\n    }\n\n    /**\n     * Reads and tokenizes a number from the text.\n     * @return {void}\n     */\n    readNumber() {\n      let number = \"\";\n      const start = this.index;\n      while (this.index < this.text.length) {\n        const ch = this.text.charAt(this.index).toLowerCase();\n        if (ch === \".\" || this.isNumber(ch)) {\n          number += ch;\n        } else {\n          const peekCh = this.peek();\n          if (ch === \"e\" && this.isExpOperator(/** @type {string} */ (peekCh))) {\n            number += ch;\n          } else if (\n            this.isExpOperator(ch) &&\n            peekCh &&\n            this.isNumber(peekCh) &&\n            number.charAt(number.length - 1) === \"e\"\n          ) {\n            number += ch;\n          } else if (\n            this.isExpOperator(ch) &&\n            (!peekCh || !this.isNumber(peekCh)) &&\n            number.charAt(number.length - 1) === \"e\"\n          ) {\n            this.throwError(\"Invalid exponent\");\n          } else {\n            break;\n          }\n        }\n        this.index++;\n      }\n      this.tokens.push({\n        index: start,\n        text: number,\n        constant: true,\n        value: Number(number),\n      });\n    }\n\n    /**\n     * Reads and tokenizes an identifier from the text.\n     */\n    readIdent() {\n      const start = this.index;\n      this.index += this.peekMultichar().length;\n      while (this.index < this.text.length) {\n        const ch = this.peekMultichar();\n        if (this.isIdentifierContinue && !this.isIdentifierContinue(ch)) {\n          break;\n        }\n        this.index += ch.length;\n      }\n      this.tokens.push({\n        index: start,\n        text: this.text.slice(start, this.index),\n        identifier: true,\n      });\n    }\n\n    /**\n     * Reads and tokenizes a string from the text.\n     * @param {string} quote Quote character used for the string.\n     */\n    readString(quote) {\n      const start = this.index;\n      let string = \"\";\n      let escape = false;\n\n      this.index++; // Skip opening quote\n\n      while (this.index < this.text.length) {\n        const ch = this.text[this.index];\n\n        if (escape) {\n          if (ch === \"u\") {\n            // Handle unicode escapes\n            // Simplified for brevity\n            string += this.handleUnicodeEscape();\n          } else {\n            string += ESCAPE[ch] || ch;\n          }\n          escape = false;\n        } else if (ch === \"\\\\\") {\n          escape = true;\n        } else if (ch === quote) {\n          this.tokens.push({\n            index: start,\n            text: this.text.slice(start, this.index + 1),\n            constant: true,\n            value: string,\n          });\n          this.index++; // Skip closing quote\n          return;\n        } else {\n          string += ch;\n        }\n\n        this.index++;\n      }\n\n      this.throwError(\"Unterminated quote\", start);\n    }\n\n    /**\n     * @returns {string}\n     */\n    handleUnicodeEscape() {\n      const hex = this.text.substring(this.index + 1, this.index + 5);\n      if (!hex.match(/[\\da-f]{4}/i)) {\n        this.throwError(`Invalid unicode escape [\\\\u${hex}]`);\n      }\n      this.index += 4; // Move index past the four hexadecimal digits\n      return String.fromCharCode(parseInt(hex, 16));\n    }\n  }\n\n  /**\n   * @typedef {import(\"./ast-node.ts\").ASTNode} ASTNode\n   * @typedef {import(\"../lexer/token.js\").Token} Token\n   */\n\n  const $parseMinErr = minErr(\"$parse\");\n\n  /** @type {Map<string,any>} */\n  const literals = new Map([\n    [\"true\", true],\n    [\"false\", false],\n    [\"null\", null],\n    [\"undefined\", undefined],\n  ]);\n\n  /**\n   * @class\n   */\n  class AST {\n    /**\n     * @param {import('../lexer/lexer.js').Lexer} lexer - The lexer instance for tokenizing input\n     */\n    constructor(lexer) {\n      /** @type {import('../lexer/lexer.js').Lexer} */\n      this.lexer = lexer;\n      this.selfReferential = {\n        this: { type: ASTType.ThisExpression },\n        $locals: { type: ASTType.LocalsExpression },\n      };\n    }\n\n    /**\n     * Parses the input text and generates an AST.\n     * @param {string} text - The input text to parse.\n     * @returns {ASTNode} The root node of the AST.\n     */\n    ast(text) {\n      this.text = text;\n      this.tokens = this.lexer.lex(text);\n      const value = this.program();\n      if (this.tokens.length !== 0) {\n        this.throwError(\"is an unexpected token\", this.tokens[0]);\n      }\n      return value;\n    }\n\n    /**\n     * Parses a program.\n     * @returns {ASTNode} The program node.\n     */\n    program() {\n      const body = [];\n      let hasMore = true;\n      while (hasMore) {\n        if (this.tokens.length > 0 && !this.peek(\"}\", \")\", \";\", \"]\"))\n          body.push(this.expressionStatement());\n        if (!this.expect(\";\")) {\n          hasMore = false;\n        }\n      }\n      return { type: ASTType.Program, body };\n    }\n\n    /**\n     * Parses an expression statement.\n     * @returns {ASTNode} The expression statement node.\n     */\n    expressionStatement() {\n      return {\n        type: ASTType.ExpressionStatement,\n        expression: this.filterChain(),\n      };\n    }\n\n    /**\n     * Parses a filter chain.\n     * @returns {ASTNode} The filter chain node.\n     */\n    filterChain() {\n      let left = this.assignment();\n      while (this.expect(\"|\")) {\n        left = this.filter(left);\n      }\n      return left;\n    }\n\n    /**\n     * Parses an assignment expression.\n     * @returns {ASTNode} The assignment expression node.\n     */\n    assignment() {\n      let result = this.ternary();\n      if (this.expect(\"=\")) {\n        if (!isAssignable(result)) {\n          throw $parseMinErr(\"lval\", \"Trying to assign a value to a non l-value\");\n        }\n\n        result = {\n          type: ASTType.AssignmentExpression,\n          left: result,\n          right: this.assignment(),\n          operator: \"=\",\n        };\n      }\n      return result;\n    }\n\n    /**\n     * Parses a ternary expression.\n     * @returns {ASTNode} The ternary expression node.\n     */\n    ternary() {\n      const test = this.logicalOR();\n      let alternate;\n      let consequent;\n      if (this.expect(\"?\")) {\n        alternate = this.assignment();\n        if (this.consume(\":\")) {\n          consequent = this.assignment();\n          return {\n            type: ASTType.ConditionalExpression,\n            test,\n            alternate,\n            consequent,\n          };\n        }\n      }\n      return test;\n    }\n\n    /**\n     * Parses a logical OR expression.\n     * @returns {ASTNode} The logical OR expression node.\n     */\n    logicalOR() {\n      let left = this.logicalAND();\n      while (this.expect(\"||\")) {\n        left = {\n          type: ASTType.LogicalExpression,\n          operator: \"||\",\n          left,\n          right: this.logicalAND(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses a logical AND expression.\n     * @returns {ASTNode} The logical AND expression node.\n     */\n    logicalAND() {\n      let left = this.equality();\n      while (this.expect(\"&&\")) {\n        left = {\n          type: ASTType.LogicalExpression,\n          operator: \"&&\",\n          left,\n          right: this.equality(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses an equality expression.\n     * @returns {ASTNode} The equality expression node.\n     */\n    equality() {\n      let left = this.relational();\n      let token;\n      while ((token = this.expect(\"==\", \"!=\", \"===\", \"!==\"))) {\n        left = {\n          type: ASTType.BinaryExpression,\n          operator: /** @type {Token} */ (token).text,\n          left,\n          right: this.relational(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses a relational expression.\n     * @returns {ASTNode} The relational expression node.\n     */\n    relational() {\n      let left = this.additive();\n      let token;\n      while ((token = this.expect(\"<\", \">\", \"<=\", \">=\"))) {\n        left = {\n          type: ASTType.BinaryExpression,\n          operator: /** @type {Token} */ (token).text,\n          left,\n          right: this.additive(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses an additive expression.\n     * @returns {ASTNode} The additive expression node.\n     */\n    additive() {\n      let left = this.multiplicative();\n      let token;\n      while ((token = this.expect(\"+\", \"-\"))) {\n        left = {\n          type: ASTType.BinaryExpression,\n          operator: /** @type {Token} */ (token).text,\n          left,\n          right: this.multiplicative(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses a multiplicative expression.\n     * @returns {ASTNode} The multiplicative expression node.\n     */\n    multiplicative() {\n      let left = this.unary();\n      let token;\n      while ((token = this.expect(\"*\", \"/\", \"%\"))) {\n        left = {\n          type: ASTType.BinaryExpression,\n          operator: /** @type {import(\"../lexer/lexer.js\").Token} */ (token).text,\n          left,\n          right: this.unary(),\n        };\n      }\n      return left;\n    }\n\n    /**\n     * Parses a unary expression.\n     * @returns {ASTNode} The unary expression node.\n     */\n    unary() {\n      let token;\n      if ((token = this.expect(\"+\", \"-\", \"!\"))) {\n        return {\n          type: ASTType.UnaryExpression,\n          operator: /** @type {import(\"../lexer/lexer.js\").Token} */ (token).text,\n          prefix: true,\n          argument: this.unary(),\n        };\n      }\n      return this.primary();\n    }\n\n    /**\n     * Parses a primary expression.\n     * @returns {ASTNode} The primary expression node.\n     */\n    primary() {\n      let primary;\n      if (this.expect(\"(\")) {\n        primary = this.filterChain();\n        this.consume(\")\");\n      } else if (this.expect(\"[\")) {\n        primary = this.arrayDeclaration();\n      } else if (this.expect(\"{\")) {\n        primary = this.object();\n      } else if (\n        hasOwn(\n          this.selfReferential,\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()).text,\n        )\n      ) {\n        primary = structuredClone(this.selfReferential[this.consume().text]);\n      } else if (\n        literals.has(\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()).text,\n        )\n      ) {\n        primary = {\n          type: ASTType.Literal,\n          value: literals.get(this.consume().text),\n        };\n      } else if (\n        /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()).identifier\n      ) {\n        primary = this.identifier();\n      } else if (\n        /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()).constant\n      ) {\n        primary = this.constant();\n      } else {\n        this.throwError(\n          \"not a primary expression\",\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()),\n        );\n      }\n\n      let next;\n      while ((next = this.expect(\"(\", \"[\", \".\"))) {\n        if (\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (next).text === \"(\"\n        ) {\n          primary = {\n            type: ASTType.CallExpression,\n            callee: primary,\n            arguments: this.parseArguments(),\n          };\n          this.consume(\")\");\n        } else if (\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (next).text === \"[\"\n        ) {\n          primary = {\n            type: ASTType.MemberExpression,\n            object: primary,\n            property: this.assignment(),\n            computed: true,\n          };\n          this.consume(\"]\");\n        } else if (\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (next).text === \".\"\n        ) {\n          primary = {\n            type: ASTType.MemberExpression,\n            object: primary,\n            property: this.identifier(),\n            computed: false,\n          };\n        } else {\n          this.throwError(\"IMPOSSIBLE\");\n        }\n      }\n      return primary;\n    }\n\n    /**\n     * Parses a filter.\n     * @param {ASTNode} baseExpression - The base expression to apply the filter to.\n     * @returns {ASTNode} The filter node.\n     */\n    filter(baseExpression) {\n      /** @type {ASTNode[]} */\n      const args = [baseExpression];\n      const result = {\n        type: ASTType.CallExpression,\n        callee: this.identifier(),\n        arguments: args,\n        filter: true,\n      };\n\n      while (this.expect(\":\")) {\n        args.push(this.assignment());\n      }\n\n      return result;\n    }\n\n    /**\n     * Parses function arguments.\n     * @returns {ASTNode[]} The arguments array.\n     */\n    parseArguments() {\n      /** @type {ASTNode[]} */\n      const args = [];\n      if (this.peekToken().text !== \")\") {\n        do {\n          args.push(this.filterChain());\n        } while (this.expect(\",\"));\n      }\n      return args;\n    }\n\n    /**\n     * Parses an identifier.\n     * @returns {ASTNode} The identifier node.\n     */\n    identifier() {\n      const token = this.consume();\n      if (!token.identifier) {\n        this.throwError(\"is not a valid identifier\", token);\n      }\n      return { type: ASTType.Identifier, name: token.text };\n    }\n\n    /**\n     * Parses a constant.\n     * @returns {ASTNode} The constant node.\n     */\n    constant() {\n      // TODO check that it is a constant\n      return { type: ASTType.Literal, value: this.consume().value };\n    }\n\n    /**\n     * Parses an array declaration.\n     * @returns {ASTNode} The array declaration node.\n     */\n    arrayDeclaration() {\n      /** @type {ASTNode[]} */\n      const elements = [];\n      if (this.peekToken().text !== \"]\") {\n        do {\n          if (this.peek(\"]\")) {\n            // Support trailing commas per ES5.1.\n            break;\n          }\n          elements.push(this.assignment());\n        } while (this.expect(\",\"));\n      }\n      this.consume(\"]\");\n\n      return { type: ASTType.ArrayExpression, elements };\n    }\n\n    /**\n     * Parses an object.\n     * @returns {ASTNode} The object node.\n     */\n    object() {\n      /** @type {ASTNode[]} */\n      const properties = [];\n      /** @type {ASTNode} */\n      let property;\n      if (this.peekToken().text !== \"}\") {\n        do {\n          if (this.peek(\"}\")) {\n            // Support trailing commas per ES5.1.\n            break;\n          }\n          property = { type: ASTType.Property, kind: \"init\" };\n          if (\n            /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek())\n              .constant\n          ) {\n            property.key = this.constant();\n            property.computed = false;\n            this.consume(\":\");\n            property.value = this.assignment();\n          } else if (\n            /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek())\n              .identifier\n          ) {\n            property.key = this.identifier();\n            property.computed = false;\n            if (this.peek(\":\")) {\n              this.consume(\":\");\n              property.value = this.assignment();\n            } else {\n              property.value = property.key;\n            }\n          } else if (this.peek(\"[\")) {\n            this.consume(\"[\");\n            property.key = this.assignment();\n            this.consume(\"]\");\n            property.computed = true;\n            this.consume(\":\");\n            property.value = this.assignment();\n          } else {\n            this.throwError(\n              \"invalid key\",\n              /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()),\n            );\n          }\n          properties.push(property);\n        } while (this.expect(\",\"));\n      }\n      this.consume(\"}\");\n\n      return { type: ASTType.ObjectExpression, properties };\n    }\n\n    /**\n     * Throws a syntax error.\n     * @param {string} msg - The error message.\n     * @param {import(\"../lexer/lexer.js\").Token} [token] - The token that caused the error.\n     */\n    throwError(msg, token) {\n      throw $parseMinErr(\n        \"syntax\",\n        \"Syntax Error: Token '{0}' {1} at column {2} of the expression [{3}] starting at [{4}].\",\n        token.text,\n        msg,\n        token.index + 1,\n        this.text,\n        this.text.substring(token.index),\n      );\n    }\n\n    /**\n     * Consumes a token if it matches the expected type.\n     * @param {string} [e1] - The expected token type.\n     * @returns {import(\"../lexer/lexer.js\").Token} The consumed token.\n     */\n    consume(e1) {\n      if (this.tokens.length === 0) {\n        throw $parseMinErr(\n          \"ueoe\",\n          \"Unexpected end of expression: {0}\",\n          this.text,\n        );\n      }\n\n      const token = this.expect(e1);\n      if (!token) {\n        this.throwError(\n          `is unexpected, expecting [${e1}]`,\n          /** @type {import(\"../lexer/lexer.js\").Token} */ (this.peek()),\n        );\n      } else {\n        return /** @type  {import(\"../lexer/lexer.js\").Token} */ (token);\n      }\n    }\n\n    /**\n     * Returns the next token without consuming it.\n     * @returns {import(\"../lexer/lexer.js\").Token} The next token.\n     */\n    peekToken() {\n      if (this.tokens.length === 0) {\n        throw $parseMinErr(\n          \"ueoe\",\n          \"Unexpected end of expression: {0}\",\n          this.text,\n        );\n      }\n      return this.tokens[0];\n    }\n\n    /**\n     * Checks if the next token matches any of the expected types.\n     * @param {...string} [expected] - The expected token types.\n     * @returns {import('../lexer/lexer.js').Token|boolean} The next token if it matches, otherwise false.\n     */\n    peek(...expected) {\n      return this.peekAhead(0, ...expected);\n    }\n\n    /**\n     * Checks if the token at the specified index matches any of the expected types.\n     * @param {number} i - The index to check.\n     * @param {...string} [expected] - The expected token types.\n     * @returns {import(\"../lexer/lexer.js\").Token|boolean} The token at the specified index if it matches, otherwise false.\n     */\n    peekAhead(i, ...expected) {\n      if (this.tokens.length > i) {\n        const token = this.tokens[i];\n        const t = token.text;\n        if (\n          expected.includes(t) ||\n          (!expected[0] && !expected[1] && !expected[2] && !expected[3])\n        ) {\n          return token;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Consumes the next token if it matches any of the expected types.\n     * @param {...string} [expected] - The expected token types.\n     * @returns {import(\"../lexer/lexer.js\").Token|boolean} The consumed token if it matches, otherwise false.\n     */\n    expect(...expected) {\n      const token = this.peek(...expected);\n      if (token) {\n        this.tokens.shift();\n        return token;\n      }\n      return false;\n    }\n  }\n\n  /**\n   * @typedef {Object} ParsedAST\n   * @property {import(\"../ast/ast-node.d.ts\").ASTNode} ast - AST representation of expression\n   */\n\n  /**\n   * @constructor\n   */\n  class Parser {\n    /**\n     *\n     * @param {import('../lexer/lexer.js').Lexer} lexer\n     * @param {function(any):any} $filter\n     */\n    constructor(lexer, $filter) {\n      /** @type {AST} */\n      this.ast = new AST(lexer);\n\n      /** @type {ASTInterpreter} */\n      this.astCompiler = new ASTInterpreter($filter);\n    }\n\n    /**\n     *\n     * @param {string} exp - Expression to be parsed\n     * @returns {import(\"../interface.ts\").CompiledExpression}\n     */\n    parse(exp) {\n      const { ast } = this.getAst(exp);\n      const fn = this.astCompiler.compile(ast);\n      fn.literal = isLiteral(ast);\n      fn.constant = isConstant(ast);\n      return fn;\n    }\n\n    /**\n     * @param {string} exp - Expression to be parsed\n     * @returns {ParsedAST}\n     */\n    getAst(exp) {\n      exp = exp.trim();\n      return {\n        ast: this.ast.ast(exp),\n      };\n    }\n  }\n\n  function isLiteral(ast) {\n    return (\n      ast.body.length === 0 ||\n      (ast.body.length === 1 &&\n        (ast.body[0].expression.type === ASTType.Literal ||\n          ast.body[0].expression.type === ASTType.ArrayExpression ||\n          ast.body[0].expression.type === ASTType.ObjectExpression))\n    );\n  }\n\n  function isConstant(ast) {\n    return ast.constant;\n  }\n\n  class ParseProvider {\n    constructor() {\n      const cache = Object.create(null);\n\n      /** @type {function(any):boolean?} */\n      let identStart;\n\n      /** @type {function(any):boolean?} */\n      let identContinue;\n\n      /**\n       * Allows defining the set of characters that are allowed in AngularTS expressions. The function\n       * `identifierStart` will get called to know if a given character is a valid character to be the\n       * first character for an identifier. The function `identifierContinue` will get called to know if\n       * a given character is a valid character to be a follow-up identifier character. The functions\n       * `identifierStart` and `identifierContinue` will receive as arguments the single character to be\n       * identifier and the character code point. These arguments will be `string` and `numeric`. Keep in\n       * mind that the `string` parameter can be two characters long depending on the character\n       * representation. It is expected for the function to return `true` or `false`, whether that\n       * character is allowed or not.\n       *\n       * Since this function will be called extensively, keep the implementation of these functions fast,\n       * as the performance of these functions have a direct impact on the expressions parsing speed.\n       *\n       * @param {function(any):boolean} [identifierStart] The function that will decide whether the given character is\n       *   a valid identifier start character.\n       * @param {function(any):boolean} [identifierContinue] The function that will decide whether the given character is\n       *   a valid identifier continue character.\n       * @returns {ParseProvider}\n       */\n      this.setIdentifierFns = function (identifierStart, identifierContinue) {\n        identStart = identifierStart;\n        identContinue = identifierContinue;\n        return this;\n      };\n\n      this.$get = [\n        \"$filter\",\n        /**\n         *\n         * @param {(any) => any} $filter\n         * @returns {import('./interface').ParseService}\n         */\n        function ($filter) {\n          /** @type {import(\"./lexer/lexer.js\").LexerOptions} */\n          const $lexerOptions = {\n            isIdentifierStart: isFunction(identStart) && identStart,\n            isIdentifierContinue: isFunction(identContinue) && identContinue,\n          };\n          return $parse;\n\n          /**\n           * @param {string} exp\n           * @param interceptorFn\n           * @returns any\n           */\n          function $parse(exp, interceptorFn) {\n            let parsedExpression, cacheKey;\n\n            switch (typeof exp) {\n              case \"string\":\n                exp = exp.trim();\n                cacheKey = exp;\n\n                parsedExpression = cache[cacheKey];\n\n                if (!parsedExpression) {\n                  const lexer = new Lexer($lexerOptions);\n                  const parser = new Parser(lexer, $filter);\n                  parsedExpression = parser.parse(exp);\n\n                  cache[cacheKey] = addWatchDelegate(parsedExpression);\n                }\n                return addInterceptor(parsedExpression, interceptorFn);\n\n              case \"function\":\n                return addInterceptor(exp, interceptorFn);\n\n              default:\n                return addInterceptor(() => {}, interceptorFn);\n            }\n          }\n\n          /**\n           * @param {Function} parsedExpression\n           * @param interceptorFn\n           * @returns {import('./interface').CompiledExpression|*}\n           */\n          function addInterceptor(parsedExpression, interceptorFn) {\n            if (!interceptorFn) {\n              return parsedExpression;\n            }\n\n            // Extract any existing interceptors out of the parsedExpression\n            // to ensure the original parsedExpression is always the $$intercepted\n            // @ts-ignore\n            if (parsedExpression.$$interceptor) {\n              interceptorFn = chainInterceptors(\n                // @ts-ignore\n                parsedExpression.$$interceptor,\n                interceptorFn,\n              );\n              // @ts-ignore\n              parsedExpression = parsedExpression.$$intercepted;\n            }\n\n            let useInputs = false;\n\n            const fn = function interceptedExpression(\n              scope,\n              locals,\n              assign,\n              inputs,\n            ) {\n              const value =\n                useInputs && inputs\n                  ? inputs[0]\n                  : parsedExpression(scope, locals, assign, inputs);\n              // Do not invoke for getters\n              if (scope?.getter) {\n                return;\n              }\n              const res = isFunction(value) ? value() : value;\n              return interceptorFn(isProxy(res) ? res.$target : res);\n            };\n\n            // Maintain references to the interceptor/intercepted\n            fn.$$intercepted = parsedExpression;\n            fn.$$interceptor = interceptorFn;\n\n            // Propagate the literal/oneTime/constant attributes\n            // @ts-ignore\n            fn.literal = parsedExpression.literal;\n            // @ts-ignore\n            fn.oneTime = parsedExpression.oneTime;\n            // @ts-ignore\n            fn.constant = parsedExpression.constant;\n            // @ts-ignore\n            fn.decoratedNode = parsedExpression.decoratedNode;\n\n            // Treat the interceptor like filters.\n            // If it is not $stateful then only watch its inputs.\n            // If the expression itself has no inputs then use the full expression as an input.\n            if (!interceptorFn.$stateful) {\n              // @ts-ignore\n              useInputs = !parsedExpression.inputs;\n              // @ts-ignore\n              fn.inputs = parsedExpression.inputs\n                ? // @ts-ignore\n                  parsedExpression.inputs\n                : [parsedExpression];\n\n              if (!interceptorFn.$$pure) {\n                fn.inputs = fn.inputs.map(function (e) {\n                  // Remove the isPure flag of inputs when it is not absolute because they are now wrapped in a\n                  // non-pure interceptor function.\n                  if (e.isPure === PURITY_RELATIVE) {\n                    return function depurifier(s) {\n                      return e(s);\n                    };\n                  }\n                  return e;\n                });\n              }\n            }\n\n            return addWatchDelegate(fn);\n          }\n        },\n      ];\n    }\n  }\n\n  function constantWatchDelegate(\n    scope,\n    listener,\n    objectEquality,\n    parsedExpression,\n  ) {\n    const unwatch = scope.$watch(\n      () => {\n        unwatch();\n        return parsedExpression(scope);\n      },\n      listener,\n      objectEquality,\n    );\n    return unwatch;\n  }\n\n  /**\n   *\n   * @param {import('./interface.ts').CompiledExpression} parsedExpression\n   * @returns {import('./interface.ts').CompiledExpression}\n   */\n  function addWatchDelegate(parsedExpression) {\n    if (parsedExpression.constant) {\n      parsedExpression.$$watchDelegate = constantWatchDelegate;\n    } else if (parsedExpression.inputs) {\n      parsedExpression.$$watchDelegate = inputsWatchDelegate;\n    }\n\n    return parsedExpression;\n  }\n\n  /**\n   *\n   * @param {import('../scope/scope.js').Scope} scope\n   * @param {Function} listener\n   * @param {*} objectEquality\n   * @param {import('./interface').CompiledExpression} parsedExpression\n   * @returns\n   */\n  function inputsWatchDelegate(\n    scope,\n    listener,\n    objectEquality,\n    parsedExpression,\n  ) {\n    let inputExpressions = /** @type {Function} */ (parsedExpression.inputs);\n    let lastResult;\n\n    if (inputExpressions.length === 1) {\n      let oldInputValueOf = expressionInputDirtyCheck; // init to something unique so that equals check fails\n\n      let inputExpression = inputExpressions[0];\n      return scope.$watch(\n        // @ts-ignore\n        ($scope) => {\n          const newInputValue = inputExpression($scope);\n          if (\n            !expressionInputDirtyCheck(\n              newInputValue,\n              oldInputValueOf,\n              inputExpression.isPure,\n            )\n          ) {\n            lastResult = parsedExpression($scope, undefined, [newInputValue]);\n            oldInputValueOf = newInputValue && getValueOf(newInputValue);\n          }\n          return lastResult;\n        },\n        listener,\n        objectEquality,\n      );\n    } else {\n      const oldInputValueOfValues = [];\n      const oldInputValues = [];\n      for (let i = 0, ii = inputExpressions.length; i < ii; i++) {\n        oldInputValueOfValues[i] = expressionInputDirtyCheck; // init to something unique so that equals check fails\n        oldInputValues[i] = null;\n      }\n      return scope.$watch(\n        // @ts-ignore\n        (scope) => {\n          let changed = false;\n\n          for (let i = 0, ii = inputExpressions.length; i < ii; i++) {\n            const newInputValue = inputExpressions[i](scope);\n            if (\n              changed ||\n              (changed = !expressionInputDirtyCheck(\n                newInputValue,\n                oldInputValueOfValues[i],\n                inputExpressions[i].isPure,\n              ))\n            ) {\n              oldInputValues[i] = newInputValue;\n              oldInputValueOfValues[i] =\n                newInputValue && getValueOf(newInputValue);\n            }\n          }\n\n          if (changed) {\n            lastResult = parsedExpression(scope, undefined, oldInputValues);\n          }\n\n          return lastResult;\n        },\n        listener,\n        objectEquality,\n      );\n    }\n  }\n\n  function chainInterceptors(first, second) {\n    function chainedInterceptor(value) {\n      return second(first(value));\n    }\n    chainedInterceptor.$stateful = first.$stateful || second.$stateful;\n    chainedInterceptor.$$pure = first.$$pure && second.$$pure;\n\n    return chainedInterceptor;\n  }\n\n  function expressionInputDirtyCheck(\n    newValue,\n    oldValueOfValue,\n    compareObjectIdentity,\n  ) {\n    if (newValue == null || oldValueOfValue == null) {\n      // null/undefined\n      return newValue === oldValueOfValue;\n    }\n\n    if (typeof newValue === \"object\") {\n      // attempt to convert the value to a primitive type\n      // TODO(docs): add a note to docs that by implementing valueOf even objects and arrays can\n      //             be cheaply dirty-checked\n      newValue = getValueOf(newValue);\n\n      if (typeof newValue === \"object\" && !compareObjectIdentity) {\n        // objects/arrays are not supported - deep-watching them would be too expensive\n        return false;\n      }\n\n      // fall-through to the primitive equality check\n    }\n\n    // Primitive or NaN\n\n    return (\n      newValue === oldValueOfValue ||\n      (newValue !== newValue && oldValueOfValue !== oldValueOfValue)\n    );\n  }\n\n  function getValueOf(value) {\n    return isFunction(value.valueOf)\n      ? value.valueOf()\n      : {}.constructor.prototype.valueOf.call(value);\n  }\n\n  const $interpolateMinErr = minErr(\"$interpolate\");\n  function throwNoconcat(text) {\n    throw $interpolateMinErr(\n      \"noconcat\",\n      \"Error while interpolating: {0}\\nStrict Contextual Escaping disallows \" +\n        \"interpolations that concatenate multiple expressions when a trusted value is \" +\n        \"required.  See http://docs.angularjs.org/api/ng.$sce\",\n      text,\n    );\n  }\n\n  function interr(text, err) {\n    throw $interpolateMinErr(\n      \"interr\",\n      \"Can't interpolate: {0}\\n{1}\",\n      text,\n      err.toString(),\n    );\n  }\n\n  /**\n   *\n   * Used for configuring the interpolation markup. Defaults to `{{` and `}}`.\n   *\n   * <div class=\"alert alert-danger\">\n   * This feature is sometimes used to mix different markup languages, e.g. to wrap an AngularTS\n   * template within a Python Jinja template (or any other template language). Mixing templating\n   * languages is **very dangerous**. The embedding template language will not safely escape AngularTS\n   * expressions, so any user-controlled values in the template will cause Cross Site Scripting (XSS)\n   * security bugs!\n   * </div>\n   */\n  class InterpolateProvider {\n    constructor() {\n      /**\n       * @type {string} Symbol to denote start of expression in the interpolated string. Defaults to `{{`.\n       */\n      this.startSymbol = \"{{\";\n\n      /**\n       * @type {string} Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n       */\n      this.endSymbol = \"}}\";\n    }\n\n    $get = [\n      \"$parse\",\n      \"$sce\",\n      /**\n       *\n       * @param {import(\"../parse/interface.ts\").ParseService} $parse\n       * @param {*} $sce\n       * @returns\n       */\n      function ($parse, $sce) {\n        /** @type {InterpolateProvider} */\n        const provider = this;\n        const startSymbolLength = provider.startSymbol.length;\n        const endSymbolLength = provider.endSymbol.length;\n\n        const escapedStartRegexp = new RegExp(\n          provider.startSymbol.replace(/./g, escape),\n          \"g\",\n        );\n        const escapedEndRegexp = new RegExp(\n          provider.endSymbol.replace(/./g, escape),\n          \"g\",\n        );\n\n        function escape(ch) {\n          return `\\\\\\\\\\\\${ch}`;\n        }\n\n        function unescapeText(text) {\n          return text\n            .replace(escapedStartRegexp, provider.startSymbol)\n            .replace(escapedEndRegexp, provider.endSymbol);\n        }\n\n        /**\n         *\n         * Compiles a string with markup into an interpolation function. This service is used by the\n         * HTML {@link ng.$compile $compile} service for data binding. See\n         * {@link ng.$interpolateProvider $interpolateProvider} for configuring the\n         * interpolation markup.\n         *\n         *\n         * ```js\n         *   let $interpolate = ...; // injected\n         *   let exp = $interpolate('Hello {{name | uppercase}}!');\n         *   expect(exp({name:'AngularTS'})).toEqual('Hello ANGULARJS!');\n         * ```\n         *\n         * `$interpolate` takes an optional fourth argument, `allOrNothing`. If `allOrNothing` is\n         * `true`, the interpolation function will return `undefined` unless all embedded expressions\n         * evaluate to a value other than `undefined`.\n         *\n         * ```js\n         *   let $interpolate = ...; // injected\n         *   let context = {greeting: 'Hello', name: undefined };\n         *\n         *   // default \"forgiving\" mode\n         *   let exp = $interpolate('{{greeting}} {{name}}!');\n         *   expect(exp(context)).toEqual('Hello !');\n         *\n         *   // \"allOrNothing\" mode\n         *   exp = $interpolate('{{greeting}} {{name}}!', false, null, true);\n         *   expect(exp(context)).toBeUndefined();\n         *   context.name = 'AngularTS';\n         *   expect(exp(context)).toEqual('Hello AngularTS!');\n         * ```\n         *\n         * `allOrNothing` is useful for interpolating URLs. `ngSrc` and `ngSrcset` use this behavior.\n         *\n         * #### Escaped Interpolation\n         * $interpolate provides a mechanism for escaping interpolation markers. Start and end markers\n         * can be escaped by preceding each of their characters with a REVERSE SOLIDUS U+005C (backslash).\n         * It will be rendered as a regular start/end marker, and will not be interpreted as an expression\n         * or binding.\n         *\n         * This enables web-servers to prevent script injection attacks and defacing attacks, to some\n         * degree, while also enabling code examples to work without relying on the\n         * {@link ng.directive:ngNonBindable ngNonBindable} directive.\n         *\n         * **For security purposes, it is strongly encouraged that web servers escape user-supplied data,\n         * replacing angle brackets (&lt;, &gt;) with &amp;lt; and &amp;gt; respectively, and replacing all\n         * interpolation start/end markers with their escaped counterparts.**\n         *\n         * Escaped interpolation markers are only replaced with the actual interpolation markers in rendered\n         * output when the $interpolate service processes the text. So, for HTML elements interpolated\n         * by {@link ng.$compile $compile}, or otherwise interpolated with the `mustHaveExpression` parameter\n         * set to `true`, the interpolated text must contain an unescaped interpolation expression. As such,\n         * this is typically useful only when user-data is used in rendering a template from the server, or\n         * when otherwise untrusted data is used by a directive.\n         *\n         * <example name=\"interpolation\">\n         *  <file name=\"index.html\">\n         *    <div ng-init=\"username='A user'\">\n         *      <p ng-init=\"apptitle='Escaping demo'\">{{apptitle}}: \\{\\{ username = \"defaced value\"; \\}\\}\n         *        </p>\n         *      <p><strong>{{username}}</strong> attempts to inject code which will deface the\n         *        application, but fails to accomplish their task, because the server has correctly\n         *        escaped the interpolation start/end markers with REVERSE SOLIDUS U+005C (backslash)\n         *        characters.</p>\n         *      <p>Instead, the result of the attempted script injection is visible, and can be removed\n         *        from the database by an administrator.</p>\n         *    </div>\n         *  </file>\n         * </example>\n         *\n         * @knownIssue\n         * It is currently not possible for an interpolated expression to contain the interpolation end\n         * symbol. For example, `{{ '}}' }}` will be incorrectly interpreted as `{{ ' }}` + `' }}`, i.e.\n         * an interpolated expression consisting of a single-quote (`'`) and the `' }}` string.\n         *\n         * @knownIssue\n         * All directives and components must use the standard `{{` `}}` interpolation symbols\n         * in their templates. If you change the application interpolation symbols the {@link $compile}\n         * service will attempt to denormalize the standard symbols to the custom symbols.\n         * The denormalization process is not clever enough to know not to replace instances of the standard\n         * symbols where they would not normally be treated as interpolation symbols. For example in the following\n         * code snippet the closing braces of the literal object will get incorrectly denormalized:\n         *\n         * ```\n         * <div data-context='{\"context\":{\"id\":3,\"type\":\"page\"}}\">\n         * ```\n         *\n         * The workaround is to ensure that such instances are separated by whitespace:\n         * ```\n         * <div data-context='{\"context\":{\"id\":3,\"type\":\"page\"} }\">\n         * ```\n         *\n         * See https://github.com/angular/angular.js/pull/14610#issuecomment-219401099 for more information.\n         *\n         * @param {string} text The text with markup to interpolate.\n         * @param {boolean=} mustHaveExpression if set to true then the interpolation string must have\n         *    embedded expression in order to return an interpolation function. Strings with no\n         *    embedded expression will return null for the interpolation function.\n         * @param {string=} trustedContext when provided, the returned function passes the interpolated\n         *    result through {@link ng.$sce#getTrusted $sce.getTrusted(interpolatedResult,\n         *    trustedContext)} before returning it.  Refer to the {@link ng.$sce $sce} service that\n         *    provides Strict Contextual Escaping for details.\n         * @param {boolean=} allOrNothing if `true`, then the returned function returns undefined\n         *    unless all embedded expressions evaluate to a value other than `undefined`.\n         * @returns {Function} an interpolation function which is used to compute the\n         *    interpolated string. The function has these parameters:\n         *\n         * - `context`: evaluation context for all expressions embedded in the interpolated text\n         */\n        function $interpolate(\n          text,\n          mustHaveExpression,\n          trustedContext,\n          allOrNothing,\n        ) {\n          const contextAllowsConcatenation =\n            trustedContext === $sce.URL || trustedContext === $sce.MEDIA_URL;\n\n          // Provide a quick exit and simplified result function for text with no interpolation\n          if (!text.length || text.indexOf(provider.startSymbol) === -1) {\n            if (mustHaveExpression) return;\n\n            let unescapedText = unescapeText(text);\n            if (contextAllowsConcatenation) {\n              unescapedText = $sce.getTrusted(trustedContext, unescapedText);\n            }\n\n            /**\n             * @type {any}\n             */\n            const constantInterp = () => unescapedText;\n            constantInterp.exp = text;\n            constantInterp.expressions = [];\n            constantInterp.$$watchDelegate = constantWatchDelegate;\n\n            return constantInterp;\n          }\n\n          allOrNothing = !!allOrNothing;\n          let startIndex;\n          let endIndex;\n          let index = 0;\n          const expressions = [];\n          let parseFns;\n          const textLength = text.length;\n          let exp;\n          const concat = [];\n          const expressionPositions = [];\n          let singleExpression;\n\n          while (index < textLength) {\n            if (\n              (startIndex = text.indexOf(provider.startSymbol, index)) !== -1 &&\n              (endIndex = text.indexOf(\n                provider.endSymbol,\n                startIndex + startSymbolLength,\n              )) !== -1\n            ) {\n              if (index !== startIndex) {\n                concat.push(unescapeText(text.substring(index, startIndex)));\n              }\n              exp = text.substring(startIndex + startSymbolLength, endIndex);\n              expressions.push(exp);\n              index = endIndex + endSymbolLength;\n              expressionPositions.push(concat.length);\n              concat.push(\"\"); // Placeholder that will get replaced with the evaluated expression.\n            } else {\n              // we did not find an interpolation, so we have to add the remainder to the separators array\n              if (index !== textLength) {\n                concat.push(unescapeText(text.substring(index)));\n              }\n              break;\n            }\n          }\n\n          singleExpression =\n            concat.length === 1 && expressionPositions.length === 1;\n          // Intercept expression if we need to stringify concatenated inputs, which may be SCE trusted\n          // objects rather than simple strings\n          // (we don't modify the expression if the input consists of only a single trusted input)\n          const interceptor =\n            contextAllowsConcatenation && singleExpression\n              ? undefined\n              : parseStringifyInterceptor;\n          parseFns = expressions.map((exp) => $parse(exp, interceptor));\n\n          // Concatenating expressions makes it hard to reason about whether some combination of\n          // concatenated values are unsafe to use and could easily lead to XSS.  By requiring that a\n          // single expression be used for some $sce-managed secure contexts (RESOURCE_URLs mostly),\n          // we ensure that the value that's used is assigned or constructed by some JS code somewhere\n          // that is more testable or make it obvious that you bound the value to some user controlled\n          // value.  This helps reduce the load when auditing for XSS issues.\n\n          // Note that URL and MEDIA_URL $sce contexts do not need this, since `$sce` can sanitize the values\n          // passed to it. In that case, `$sce.getTrusted` will be called on either the single expression\n          // or on the overall concatenated string (losing trusted types used in the mix, by design).\n          // Both these methods will sanitize plain strings. Also, HTML could be included, but since it's\n          // only used in srcdoc attributes, this would not be very useful.\n\n          if (!mustHaveExpression || expressions.length) {\n            const compute = function (values) {\n              for (let i = 0, ii = expressions.length; i < ii; i++) {\n                if (allOrNothing && isUndefined(values[i])) return;\n                concat[expressionPositions[i]] = values[i];\n              }\n\n              if (contextAllowsConcatenation) {\n                // If `singleExpression` then `concat[0]` might be a \"trusted\" value or `null`, rather than a string\n                return $sce.getTrusted(\n                  trustedContext,\n                  singleExpression ? concat[0] : concat.join(\"\"),\n                );\n              }\n              if (trustedContext && concat.length > 1) {\n                // This context does not allow more than one part, e.g. expr + string or exp + exp.\n                throwNoconcat(text);\n              }\n              // In an unprivileged context or only one part: just concatenate and return.\n              return concat.join(\"\");\n            };\n\n            return extend(\n              (context, cb) => {\n                let i = 0;\n                const ii = expressions.length;\n                const values = new Array(ii);\n                try {\n                  for (; i < ii; i++) {\n                    if (cb) {\n                      const watchProp = expressions[i].trim();\n                      context.$watch(watchProp, () => {\n                        let vals = new Array(ii);\n                        let j = 0;\n                        for (; j < ii; j++) {\n                          let fn = parseFns[j];\n                          vals[j] = fn(context);\n                        }\n                        cb(compute(vals));\n                      });\n                    }\n\n                    values[i] = parseFns[i](context);\n                  }\n\n                  return compute(values);\n                } catch (err) {\n                  interr(text, err);\n                }\n              },\n              {\n                // Most likely we would need to register watches during interpolation\n                // all of these properties are undocumented for now\n                exp: text, // just for compatibility with regular watchers created via $watch\n                expressions,\n                $$watchDelegate(scope, listener) {\n                  let lastValue;\n                  return scope.$watch(\n                    parseFns,\n                    function interpolateFnWatcher(values, oldValues) {\n                      const currValue = compute(values);\n                      listener.call(\n                        this,\n                        currValue,\n                        values !== oldValues ? lastValue : currValue,\n                        scope,\n                      );\n                      lastValue = currValue;\n                    },\n                  );\n                },\n              },\n            );\n          }\n\n          function parseStringifyInterceptor(value) {\n            try {\n              // In concatenable contexts, getTrusted comes at the end, to avoid sanitizing individual\n              // parts of a full URL. We don't care about losing the trustedness here.\n              // In non-concatenable contexts, where there is only one expression, this interceptor is\n              // not applied to the expression.\n              value =\n                trustedContext && !contextAllowsConcatenation\n                  ? $sce.getTrusted(trustedContext, value)\n                  : $sce.valueOf(value);\n              return allOrNothing && !isDefined(value) ? value : stringify$1(value);\n            } catch (err) {\n              interr(text, err);\n            }\n          }\n        }\n\n        /**\n         * Symbol to denote the start of expression in the interpolated string. Defaults to `{{`.\n         *\n         * Use {@link ng.$interpolateProvider#startSymbol `$interpolateProvider.startSymbol`} to change\n         * the symbol.\n         *\n         * @returns {string} start symbol.\n         */\n        $interpolate.startSymbol = function () {\n          return provider.startSymbol;\n        };\n\n        /**\n         * Symbol to denote the end of expression in the interpolated string. Defaults to `}}`.\n         *\n         * Use {@link ng.$interpolateProvider#endSymbol `$interpolateProvider.endSymbol`} to change\n         * the symbol.\n         *\n         * @returns {string} end symbol.\n         */\n        $interpolate.endSymbol = function () {\n          return provider.endSymbol;\n        };\n\n        return $interpolate;\n      },\n    ];\n  }\n\n  let lastCookies = {};\n  let lastCookieString = \"\";\n\n  /**\n   * @returns {Object<String, String>} List of all cookies\n   */\n  function getCookies() {\n    let cookieArray;\n    let cookie;\n    let i;\n    let index;\n    let name;\n    const currentCookieString = document.cookie;\n\n    if (currentCookieString !== lastCookieString) {\n      lastCookieString = currentCookieString;\n      cookieArray = lastCookieString.split(\"; \");\n      lastCookies = {};\n\n      for (i = 0; i < cookieArray.length; i++) {\n        cookie = cookieArray[i];\n        index = cookie.indexOf(\"=\");\n        if (index > 0) {\n          // ignore nameless cookies\n          name = safeDecodeURIComponent(cookie.substring(0, index));\n          // the first value that is seen for a cookie is the most\n          // specific one.  values for the same cookie name that\n          // follow are for less specific paths.\n          if (isUndefined(lastCookies[name])) {\n            lastCookies[name] = safeDecodeURIComponent(\n              cookie.substring(index + 1),\n            );\n          }\n        }\n      }\n    }\n    return lastCookies;\n  }\n\n  function safeDecodeURIComponent(str) {\n    try {\n      return decodeURIComponent(str);\n    } catch {\n      return str;\n    }\n  }\n\n  const APPLICATION_JSON = \"application/json\";\n  const CONTENT_TYPE_APPLICATION_JSON = {\n    \"Content-Type\": `${APPLICATION_JSON};charset=utf-8`,\n  };\n  const JSON_START = /^\\[|^\\{(?!\\{)/;\n  const JSON_ENDS = {\n    \"[\": /]$/,\n    \"{\": /}$/,\n  };\n  const JSON_PROTECTION_PREFIX = /^\\)]\\}',?\\n/;\n  const $httpMinErr = minErr(\"$http\");\n\n  function serializeValue(v) {\n    if (isObject(v)) {\n      return isDate(v) ? v.toISOString() : toJson(v);\n    }\n    return v;\n  }\n\n  /**\n   * Default params serializer that converts objects to strings\n   * according to the following rules:\n   *\n   * * `{'foo': 'bar'}` results in `foo=bar`\n   * * `{'foo': Date.now()}` results in `foo=2015-04-01T09%3A50%3A49.262Z` (`toISOString()` and encoded representation of a Date object)\n   * * `{'foo': ['bar', 'baz']}` results in `foo=bar&foo=baz` (repeated key for each array element)\n   * * `{'foo': {'bar':'baz'}}` results in `foo=%7B%22bar%22%3A%22baz%22%7D` (stringified and encoded representation of an object)\n   *\n   * Note that serializer will sort the request parameters alphabetically.\n   */\n  function HttpParamSerializerProvider() {\n    this.$get = function () {\n      return function ngParamSerializer(params) {\n        if (!params) return \"\";\n        const parts = [];\n        Object.keys(params)\n          .sort()\n          .forEach((key) => {\n            const value = params[key];\n            if (value === null || isUndefined(value) || isFunction(value)) return;\n            if (Array.isArray(value)) {\n              value.forEach((v) => {\n                parts.push(\n                  `${encodeUriQuery(key)}=${encodeUriQuery(serializeValue(v))}`,\n                );\n              });\n            } else {\n              parts.push(\n                `${encodeUriQuery(key)}=${encodeUriQuery(serializeValue(value))}`,\n              );\n            }\n          });\n\n        return parts.join(\"&\");\n      };\n    };\n  }\n\n  function defaultHttpResponseTransform(data, headers) {\n    if (isString(data)) {\n      // Strip json vulnerability protection prefix and trim whitespace\n      const tempData = data.replace(JSON_PROTECTION_PREFIX, \"\").trim();\n\n      if (tempData) {\n        const contentType = headers(\"Content-Type\");\n        const hasJsonContentType =\n          contentType && contentType.indexOf(APPLICATION_JSON) === 0;\n\n        if (hasJsonContentType || isJsonLike(tempData)) {\n          try {\n            data = fromJson(tempData);\n          } catch (e) {\n            if (!hasJsonContentType) {\n              return data;\n            }\n            throw $httpMinErr(\n              \"baddata\",\n              'Data must be a valid JSON object. Received: \"{0}\". ' +\n                'Parse error: \"{1}\"',\n              data,\n              e,\n            );\n          }\n        }\n      }\n    }\n\n    return data;\n  }\n\n  function isJsonLike(str) {\n    const jsonStart = str.match(JSON_START);\n    return jsonStart && JSON_ENDS[jsonStart[0]].test(str);\n  }\n\n  /**\n   * Parse headers into key value object\n   *\n   * @param {string} headers Raw headers as a string\n   * @returns {Object} Parsed headers as key value object\n   */\n  function parseHeaders(headers) {\n    const parsed = Object.create(null);\n    let i;\n\n    function fillInParsed(key, val) {\n      if (key) {\n        parsed[key] = parsed[key] ? `${parsed[key]}, ${val}` : val;\n      }\n    }\n\n    if (isString(headers)) {\n      headers.split(\"\\n\").forEach(\n        /** @param {string} line */\n        (line) => {\n          i = line.indexOf(\":\");\n          fillInParsed(\n            line.substring(0, i).trim().toLowerCase(),\n            trim(line.substring(i + 1)),\n          );\n        },\n      );\n    } else if (isObject(headers)) {\n      Object.entries(headers).forEach(([headerKey, headerVal]) => {\n        fillInParsed(lowercase(headerKey), trim(headerVal));\n      });\n    }\n\n    return parsed;\n  }\n\n  /**\n   * Returns a function that provides access to parsed headers.\n   *\n   * Headers are lazy parsed when first requested.\n   * @see parseHeaders\n   *\n   * @param {(string|Object)} headers Headers to provide access to.\n   * @returns {function(string=)} Returns a getter function which if called with:\n   *\n   *   - if called with an argument returns a single header value or null\n   *   - if called with no arguments returns an object containing all headers.\n   */\n  function headersGetter(headers) {\n    let headersObj;\n\n    return function (name) {\n      if (!headersObj) headersObj = parseHeaders(headers);\n\n      if (name) {\n        let value = headersObj[lowercase(name)];\n        if (value === undefined) {\n          value = null;\n        }\n        return value;\n      }\n\n      return headersObj;\n    };\n  }\n\n  /**\n   * Chain all given functions\n   *\n   * This function is used for both request and response transforming\n   *\n   * @param {*} data Data to transform.\n   * @param {function(string=):any} headers HTTP headers getter fn.\n   * @param {number} status HTTP status code of the response.\n   * @param {function(...any): any | Array<Function>} fns Function or an array of functions.\n   * @returns {*} Transformed data.\n   */\n  function transformData(data, headers, status, fns) {\n    if (isFunction(fns)) {\n      return fns(data, headers, status);\n    }\n\n    if (Array.isArray(fns)) {\n      /** @type {Array<function(...any): any>} */ (fns).forEach((fn) => {\n        data = fn(data, headers, status);\n      });\n    }\n\n    return data;\n  }\n\n  function isSuccess(status) {\n    return status >= 200 && status < 300;\n  }\n\n  /**\n   * Use `$httpProvider` to change the default behavior of the {@link ng.$http $http} service.\n   */\n  function HttpProvider() {\n    /**\n     * Object containing default values for all {@link ng.$http $http} requests.\n     *\n     * - **`defaults.cache`** - {boolean|Object} - A boolean value or object created with\n     * {@link ng.$cacheFactory `$cacheFactory`} to enable or disable caching of HTTP responses\n     * by default. See {@link $http#caching $http Caching} for more information.\n     *\n     * - **`defaults.headers`** - {Object} - Default headers for all $http requests.\n     * Refer to {@link ng.$http#setting-http-headers $http} for documentation on\n     * setting default headers.\n     *     - **`defaults.headers.common`**\n     *     - **`defaults.headers.post`**\n     *     - **`defaults.headers.put`**\n     *     - **`defaults.headers.patch`**\n     *   *\n     * - **`defaults.paramSerializer`** - `{string|function(Object<string,string>):string}` - A function\n     *  used to the prepare string representation of request parameters (specified as an object).\n     *  If specified as string, it is interpreted as a function registered with the {@link auto.$injector $injector}.\n     *  Defaults to {@link ng.$httpParamSerializer $httpParamSerializer}.\n     *\n     * - **`defaults.transformRequest`** -\n     * `{Array<function(data, headersGetter)>|function(data, headersGetter)}` -\n     * An array of functions (or a single function) which are applied to the request data.\n     * By default, this is an array with one request transformation function:\n     *\n     *   - If the `data` property of the request configuration object contains an object, serialize it\n     *     into JSON format.\n     *\n     * - **`defaults.transformResponse`** -\n     * `{Array<function(data, headersGetter, status)>|function(data, headersGetter, status)}` -\n     * An array of functions (or a single function) which are applied to the response data. By default,\n     * this is an array which applies one response transformation function that does two things:\n     *\n     *  - If XSRF prefix is detected, strip it\n     *    (see {@link ng.$http#security-considerations Security Considerations in the $http docs}).\n     *  - If the `Content-Type` is `application/json` or the response looks like JSON,\n     *    deserialize it using a JSON parser.\n     *\n     * - **`defaults.xsrfCookieName`** - {string} - Name of cookie containing the XSRF token.\n     * Defaults value is `'XSRF-TOKEN'`.\n     *\n     * - **`defaults.xsrfHeaderName`** - {string} - Name of HTTP header to populate with the\n     * XSRF token. Defaults value is `'X-XSRF-TOKEN'`.\n     *\n     */\n    const defaults = (this.defaults = {\n      // transform incoming response data\n      transformResponse: [defaultHttpResponseTransform],\n\n      // transform outgoing request data\n      transformRequest: [\n        function (d) {\n          return isObject(d) && !isFile(d) && !isBlob(d) && !isFormData(d)\n            ? toJson(d)\n            : d;\n        },\n      ],\n\n      // default headers\n      headers: {\n        common: {\n          Accept: \"application/json, text/plain, */*\",\n        },\n        post: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n        put: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n        patch: shallowCopy(CONTENT_TYPE_APPLICATION_JSON),\n      },\n\n      xsrfCookieName: \"XSRF-TOKEN\",\n      xsrfHeaderName: \"X-XSRF-TOKEN\",\n\n      paramSerializer: \"$httpParamSerializer\",\n    });\n\n    let useApplyAsync = false;\n\n    /**\n     * Configure $http service to combine processing of multiple http responses received at around\n     * the same time via {@link ng.$rootScope.Scope#$applyAsync $rootScope.$applyAsync}. This can result in\n     * significant performance improvement for bigger applications that make many HTTP requests\n     * concurrently (common during application bootstrap).\n     *\n     * Defaults to false. If no value is specified, returns the current configured value.\n     *\n     * @param {boolean=} value If true, when requests are loaded, they will schedule a deferred\n     *    \"apply\" on the next tick, giving time for subsequent requests in a roughly ~10ms window\n     *    to load and share the same digest cycle.\n     *\n     * @returns {boolean|Object} If a value is specified, returns the $httpProvider for chaining.\n     *    otherwise, returns the current configured value.\n     */\n    this.useApplyAsync = function (value) {\n      if (isDefined(value)) {\n        useApplyAsync = !!value;\n        return this;\n      }\n      return useApplyAsync;\n    };\n\n    /**\n     * Array containing service factories for all synchronous or asynchronous {@link ng.$http $http}\n     * pre-processing of request or postprocessing of responses.\n     *\n     * These service factories are ordered by request, i.e. they are applied in the same order as the\n     * array, on request, but reverse order, on response.\n     *\n     * {@link ng.$http#interceptors Interceptors detailed info}\n     */\n    this.interceptors = [];\n\n    /**\n     * Array containing URLs whose origins are trusted to receive the XSRF token. See the\n     * {@link ng.$http#security-considerations Security Considerations} sections for more details on\n     * XSRF.\n     *\n     * **Note:** An \"origin\" consists of the [URI scheme](https://en.wikipedia.org/wiki/URI_scheme),\n     * the [hostname](https://en.wikipedia.org/wiki/Hostname) and the\n     * [port number](https://en.wikipedia.org/wiki/Port_(computer_networking). For `http:` and\n     * `https:`, the port number can be omitted if using th default ports (80 and 443 respectively).\n     * Examples: `http://example.com`, `https://api.example.com:9876`\n     *\n     * <div class=\"alert alert-warning\">\n     *   It is not possible to trust specific URLs/paths. The `path`, `query` and `fragment` parts\n     *   of a URL will be ignored. For example, `https://foo.com/path/bar?query=baz#fragment` will be\n     *   treated as `https://foo.com`, meaning that **all** requests to URLs starting with\n     *   `https://foo.com/` will include the XSRF token.\n     * </div>\n     *\n     * @example\n     *\n     * ```js\n     * // App served from `https://example.com/`.\n     * angular.\n     *   module('xsrfTrustedOriginsExample', []).\n     *   config(['$httpProvider', function($httpProvider) {\n     *     $httpProvider.xsrfTrustedOrigins.push('https://api.example.com');\n     *   }]).\n     *   run(['$http', function($http) {\n     *     // The XSRF token will be sent.\n     *     $http.get('https://api.example.com/preferences').then(...);\n     *\n     *     // The XSRF token will NOT be sent.\n     *     $http.get('https://stats.example.com/activity').then(...);\n     *   }]);\n     * ```\n     *\n     * @type {string[]}\n     */\n    this.xsrfTrustedOrigins = [];\n\n    /**\n     * This property is deprecated. Use {@link $httpProvider#xsrfTrustedOrigins xsrfTrustedOrigins}\n     * instead.\n     */\n    Object.defineProperty(this, \"xsrfWhitelistedOrigins\", {\n      get() {\n        return this.xsrfTrustedOrigins;\n      },\n      set(origins) {\n        this.xsrfTrustedOrigins = origins;\n      },\n    });\n\n    this.$get = [\n      \"$httpBackend\",\n      \"$injector\",\n      \"$sce\",\n      /**\n       *\n       * @param {*} $httpBackend\n       * @param {import(\"../../core/di/internal-injector.js\").InjectorService} $injector\n       * @param {*} $sce\n       * @returns\n       */\n      function ($httpBackend, $injector, $sce) {\n        /**\n         * @type {Map<string, string>}\n         */\n        const defaultCache = new Map();\n\n        /**\n         * Make sure that default param serializer is exposed as a function\n         */\n        defaults.paramSerializer = isString(defaults.paramSerializer)\n          ? $injector.get(defaults.paramSerializer)\n          : defaults.paramSerializer;\n\n        /**\n         * Interceptors stored in reverse order. Inner interceptors before outer interceptors.\n         * The reversal is needed so that we can build up the interception chain around the\n         * server request.\n         */\n        const reversedInterceptors = [];\n\n        this.interceptors.forEach((interceptorFactory) => {\n          reversedInterceptors.unshift(\n            isString(interceptorFactory)\n              ? $injector.get(interceptorFactory)\n              : $injector.invoke(interceptorFactory),\n          );\n        });\n\n        /**\n         * A function to check request URLs against a list of allowed origins.\n         */\n        const urlIsAllowedOrigin = urlIsAllowedOriginFactory(\n          this.xsrfTrustedOrigins,\n        );\n\n        /**\n         * @property {Array.<Object>} requestConfig Array of config objects for currently pending\n         * requests. This is primarily meant to be used for debugging purposes.\n         */\n        function $http(requestConfig) {\n          if (!isObject(requestConfig)) {\n            throw minErr(\"$http\")(\n              \"badreq\",\n              \"Http request configuration must be an object.  Received: {0}\",\n              requestConfig,\n            );\n          }\n\n          if (!isString($sce.valueOf(requestConfig.url))) {\n            throw minErr(\"$http\")(\n              \"badreq\",\n              \"Http request configuration url must be a string or a $sce trusted object.  Received: {0}\",\n              requestConfig.url,\n            );\n          }\n\n          const config = extend(\n            {\n              method: \"get\",\n              transformRequest: defaults.transformRequest,\n              transformResponse: defaults.transformResponse,\n              paramSerializer: defaults.paramSerializer,\n            },\n            requestConfig,\n          );\n\n          config.headers = mergeHeaders(requestConfig);\n          config.method = uppercase(config.method);\n          config.paramSerializer = isString(config.paramSerializer)\n            ? $injector.get(config.paramSerializer)\n            : config.paramSerializer;\n\n          const requestInterceptors = [];\n          const responseInterceptors = [];\n          let promise = Promise.resolve(config);\n\n          // apply interceptors\n          reversedInterceptors.forEach((interceptor) => {\n            if (interceptor.request || interceptor.requestError) {\n              requestInterceptors.unshift(\n                interceptor.request,\n                interceptor.requestError,\n              );\n            }\n            if (interceptor.response || interceptor.responseError) {\n              responseInterceptors.push(\n                interceptor.response,\n                interceptor.responseError,\n              );\n            }\n          });\n\n          promise = chainInterceptors(promise, requestInterceptors);\n          promise = promise.then(serverRequest);\n          promise = chainInterceptors(promise, responseInterceptors);\n\n          return promise;\n\n          function chainInterceptors(promise, interceptors) {\n            for (let i = 0, ii = interceptors.length; i < ii; ) {\n              const thenFn = interceptors[i++];\n              const rejectFn = interceptors[i++];\n\n              promise = promise.then(thenFn, rejectFn);\n            }\n\n            interceptors.length = 0;\n\n            return promise;\n          }\n\n          function executeHeaderFns(headers, config) {\n            let headerContent;\n            const processedHeaders = {};\n\n            Object.entries(headers).forEach(([header, headerFn]) => {\n              if (isFunction(headerFn)) {\n                headerContent = headerFn(config);\n                if (headerContent != null) {\n                  processedHeaders[header] = headerContent;\n                }\n              } else {\n                processedHeaders[header] = headerFn;\n              }\n            });\n\n            return processedHeaders;\n          }\n\n          function mergeHeaders(config) {\n            let defHeaders = defaults.headers,\n              reqHeaders = extend({}, config.headers);\n\n            defHeaders = extend(\n              {},\n              defHeaders.common,\n              defHeaders[lowercase(config.method)],\n            );\n\n            Object.keys(defHeaders).forEach((defHeaderName) => {\n              const lowercaseDefHeaderName = lowercase(defHeaderName);\n              const hasMatchingHeader = Object.keys(reqHeaders).some(\n                (reqHeaderName) => {\n                  return lowercase(reqHeaderName) === lowercaseDefHeaderName;\n                },\n              );\n              if (!hasMatchingHeader) {\n                reqHeaders[defHeaderName] = defHeaders[defHeaderName];\n              }\n            });\n\n            // execute if header value is a function for merged headers\n            return executeHeaderFns(reqHeaders, shallowCopy(config));\n          }\n\n          function serverRequest(config) {\n            const { headers } = config;\n            const reqData = transformData(\n              config.data,\n              headersGetter(headers),\n              undefined,\n              config.transformRequest,\n            );\n\n            // strip content-type if data is undefined\n            if (isUndefined(reqData)) {\n              Object.keys(headers).forEach((header) => {\n                if (lowercase(header) === \"content-type\") {\n                  delete headers[header];\n                }\n              });\n            }\n\n            if (\n              isUndefined(config.withCredentials) &&\n              !isUndefined(defaults.withCredentials)\n            ) {\n              config.withCredentials = defaults.withCredentials;\n            }\n\n            // send request\n            return sendReq(config, reqData).then(\n              transformResponse,\n              transformResponse,\n            );\n          }\n\n          function transformResponse(response) {\n            // make a copy since the response must be cacheable\n            const resp = extend({}, response);\n            resp.data = transformData(\n              response.data,\n              response.headers,\n              response.status,\n              config.transformResponse,\n            );\n            return isSuccess(response.status) ? resp : Promise.reject(resp);\n          }\n        }\n\n        $http.pendingRequests = [];\n\n        /**\n         * Shortcut method to perform `GET` request.\n         *\n         * @param {string} url Absolute or relative URL of the resource that is being requested;\n         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n\n        /**\n         * Shortcut method to perform `DELETE` request.\n         *\n         * @param {string} url Absolute or relative URL of the resource that is being requested;\n         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n\n        /**\n         * Shortcut method to perform `HEAD` request.\n         *\n         * @param {string} url Absolute or relative URL of the resource that is being requested;\n         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n\n        /**\n         * Shortcut method to perform `JSONP` request.\n         *\n         * Note that, since JSONP requests are sensitive because the response is given full access to the browser,\n         * the url must be declared, via {@link $sce} as a trusted resource URL.\n         * You can trust a URL by adding it to the trusted resource URL list via\n         * {@link $sceDelegateProvider#trustedResourceUrlList  `$sceDelegateProvider.trustedResourceUrlList`} or\n         * by explicitly trusting the URL via {@link $sce#trustAsResourceUrl `$sce.trustAsResourceUrl(url)`}.\n         *\n         * You should avoid generating the URL for the JSONP request from user provided data.\n         * Provide additional query parameters via `params` property of the `config` parameter, rather than\n         * modifying the URL itself.\n         *\n         * You can also specify a default callback parameter name in `$http.defaults.jsonpCallbackParam`.\n         * Initially this is set to `'callback'`.\n         *\n         * <div class=\"alert alert-danger\">\n         * You can no longer use the `JSON_CALLBACK` string as a placeholder for specifying where the callback\n         * parameter value should go.\n         * </div>\n         *\n         * If you would like to customise where and how the callbacks are stored then try overriding\n         * or decorating the {@link $jsonpCallbacks} service.\n         *\n         * @param {string} url Absolute or relative URL of the resource that is being requested;\n         *                                   or an object created by a call to `$sce.trustAsResourceUrl(url)`.\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n        createShortMethods(\"get\", \"delete\", \"head\");\n\n        /**\n         * Shortcut method to perform `POST` request.\n         *\n         * @param {string} url Relative or absolute URL specifying the destination of the request\n         * @param {*} data Request content\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n\n        /**\n         * Shortcut method to perform `PUT` request.\n         *\n         * @param {string} url Relative or absolute URL specifying the destination of the request\n         * @param {*} data Request content\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n\n        /**\n         * Shortcut method to perform `PATCH` request.\n         *\n         * @param {string} url Relative or absolute URL specifying the destination of the request\n         * @param {*} data Request content\n         * @param {Object=} config Optional configuration object. See {@link ng.$http#$http-arguments `$http()` arguments}.\n         * @returns {HttpPromise}  A Promise that will be resolved or rejected with a response object.\n         * See {@link ng.$http#$http-returns `$http()` return value}.\n         */\n        createShortMethodsWithData(\"post\", \"put\", \"patch\");\n\n        /**\n         * Runtime equivalent of the `$httpProvider.defaults` property. Allows configuration of\n         * default headers, withCredentials as well as request and response transformations.\n         *\n         * See \"Setting HTTP Headers\" and \"Transforming Requests and Responses\" sections above.\n         */\n        $http.defaults = defaults;\n\n        return $http;\n\n        function createShortMethods(...names) {\n          names.forEach((name) => {\n            $http[name] = function (url, config) {\n              return $http(\n                extend({}, config || {}, {\n                  method: name,\n                  url,\n                }),\n              );\n            };\n          });\n        }\n\n        function createShortMethodsWithData(...names) {\n          names.forEach((name) => {\n            $http[name] = function (url, data, config) {\n              return $http(\n                extend({}, config || {}, {\n                  method: name,\n                  url,\n                  data,\n                }),\n              );\n            };\n          });\n        }\n\n        /**\n         * Makes the request.\n         *\n         * !!! ACCESSES CLOSURE VARS:\n         * $httpBackend, defaults, $log, $rootScope, defaultCache, $http.pendingRequests\n         */\n        function sendReq(config, reqData) {\n          const { promise, resolve, reject } = Promise.withResolvers();\n          let cache;\n          let cachedResp;\n          const reqHeaders = config.headers;\n          let { url } = config;\n\n          if (!isString(url)) {\n            // If it is not a string then the URL must be a $sce trusted object\n            url = $sce.valueOf(url);\n          }\n\n          url = buildUrl(url, config.paramSerializer(config.params));\n\n          $http.pendingRequests.push(config);\n          promise.then(removePendingReq, removePendingReq);\n\n          if (\n            (config.cache || defaults.cache) &&\n            config.cache !== false &&\n            config.method === \"GET\"\n          ) {\n            cache = isObject(config.cache)\n              ? config.cache\n              : isObject(/** @type {?} */ (defaults).cache)\n                ? /** @type {?} */ (defaults).cache\n                : defaultCache;\n          }\n\n          if (cache) {\n            cachedResp = cache.get(url);\n            if (isDefined(cachedResp)) {\n              if (isPromiseLike(cachedResp)) {\n                // cached request has already been sent, but there is no response yet\n                cachedResp.then(\n                  resolvePromiseWithResult,\n                  resolvePromiseWithResult,\n                );\n              } else {\n                // serving from cache\n                if (Array.isArray(cachedResp)) {\n                  resolvePromise(\n                    cachedResp[1],\n                    cachedResp[0],\n                    shallowCopy(cachedResp[2]),\n                    cachedResp[3],\n                    cachedResp[4],\n                  );\n                } else {\n                  resolvePromise(cachedResp, 200, {}, \"OK\", \"complete\");\n                }\n              }\n            } else {\n              // put the promise for the non-transformed response into cache as a placeholder\n              cache.set(url, promise);\n            }\n          }\n\n          // if we won't have the response in cache, set the xsrf headers and\n          // send the request to the backend\n          if (isUndefined(cachedResp)) {\n            const xsrfValue = urlIsAllowedOrigin(config.url)\n              ? getCookies()[config.xsrfCookieName || defaults.xsrfCookieName]\n              : undefined;\n            if (xsrfValue) {\n              reqHeaders[config.xsrfHeaderName || defaults.xsrfHeaderName] =\n                xsrfValue;\n            }\n\n            $httpBackend(\n              config.method,\n              url,\n              reqData,\n              done,\n              reqHeaders,\n              config.timeout,\n              config.withCredentials,\n              config.responseType,\n              createApplyHandlers(config.eventHandlers),\n              createApplyHandlers(config.uploadEventHandlers),\n            );\n          }\n\n          return promise;\n\n          function createApplyHandlers(eventHandlers) {\n            if (eventHandlers) {\n              const applyHandlers = {};\n              Object.entries(eventHandlers).forEach(([key, eventHandler]) => {\n                applyHandlers[key] = function (event) {\n                  if (useApplyAsync) {\n                    setTimeout(() => callEventHandler());\n                  } else {\n                    callEventHandler();\n                  }\n\n                  function callEventHandler() {\n                    eventHandler(event);\n                  }\n                };\n              });\n              return applyHandlers;\n            }\n          }\n\n          /**\n           * Callback registered to $httpBackend():\n           *  - caches the response if desired\n           *  - resolves the raw $http promise\n           *  - calls $apply\n           */\n          function done(status, response, headersString, statusText, xhrStatus) {\n            if (cache) {\n              if (isSuccess(status)) {\n                cache.set(url, [\n                  status,\n                  response,\n                  parseHeaders(headersString),\n                  statusText,\n                  xhrStatus,\n                ]);\n              } else {\n                // remove promise from the cache\n                cache.delete(url);\n              }\n            }\n\n            function resolveHttpPromise() {\n              resolvePromise(\n                response,\n                status,\n                headersString,\n                statusText,\n                xhrStatus,\n              );\n            }\n\n            if (useApplyAsync) {\n              setTimeout(resolveHttpPromise);\n            } else {\n              resolveHttpPromise();\n            }\n          }\n\n          /**\n           * Resolves the raw $http promise.\n           */\n          function resolvePromise(\n            response,\n            status,\n            headers,\n            statusText,\n            xhrStatus,\n          ) {\n            // status: HTTP response status code, 0, -1 (aborted by timeout / promise)\n            status = status >= -1 ? status : 0;\n\n            (isSuccess(status) ? resolve : reject)({\n              data: response,\n              status,\n              headers: headersGetter(headers),\n              config,\n              statusText,\n              xhrStatus,\n            });\n          }\n\n          function resolvePromiseWithResult(result) {\n            resolvePromise(\n              result.data,\n              result.status,\n              shallowCopy(result.headers()),\n              result.statusText,\n              result.xhrStatus,\n            );\n          }\n\n          function removePendingReq() {\n            const idx = $http.pendingRequests.indexOf(config);\n            if (idx !== -1) $http.pendingRequests.splice(idx, 1);\n          }\n        }\n\n        function buildUrl(url, serializedParams) {\n          if (serializedParams.length > 0) {\n            url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n          }\n          return url;\n        }\n      },\n    ];\n  }\n\n  /**\n   * HTTP backend used by the `$http` that delegates to\n   * XMLHttpRequest object and deals with browser incompatibilities.\n   * You should never need to use this service directly.\n   */\n  class HttpBackendProvider {\n    constructor() {\n      this.$get = () => createHttpBackend();\n    }\n  }\n\n  /**\n   * @returns\n   */\n  function createHttpBackend() {\n    /**\n     * Makes an HTTP request using XMLHttpRequest with flexible options.\n     *\n     * @param {string} method - The HTTP method (e.g., \"GET\", \"POST\").\n     * @param {string} [url] - The URL to send the request to. Defaults to the current page URL.\n     * @param {*} [post] - The body to send with the request, if any.\n     * @param {function(number, any, string|null, string, string): void} [callback] - Callback invoked when the request completes.\n     * @param {Object<string, string|undefined>} [headers] - Headers to set on the request.\n     * @param {number|Promise<any>} [timeout] - Timeout in ms or a cancellable promise.\n     * @param {boolean} [withCredentials] - Whether to send credentials with the request.\n     * @param {XMLHttpRequestResponseType} [responseType] - The type of data expected in the response.\n     * @param {Object<string, EventListener>} [eventHandlers] - Event listeners for the XMLHttpRequest object.\n     * @param {Object<string, EventListener>} [uploadEventHandlers] - Event listeners for the XMLHttpRequest.upload object.\n     * @returns {void}\n     */\n    return function (\n      method,\n      url,\n      post,\n      callback,\n      headers,\n      timeout,\n      withCredentials,\n      responseType,\n      eventHandlers,\n      uploadEventHandlers,\n    ) {\n      url = url || trimEmptyHash(window.location.href);\n\n      const xhr = new XMLHttpRequest();\n      let abortedByTimeout = false;\n      let timeoutId;\n\n      xhr.open(method, url, true);\n\n      if (headers) {\n        for (const [key, value] of Object.entries(headers)) {\n          if (isDefined(value)) {\n            xhr.setRequestHeader(key, value);\n          }\n        }\n      }\n\n      xhr.onload = () => {\n        let status = xhr.status || 0;\n        const statusText = xhr.statusText || \"\";\n\n        if (status === 0) {\n          status = xhr.response\n            ? 200\n            : new URL(url).protocol === \"file:\"\n              ? 404\n              : 0;\n        }\n\n        completeRequest(\n          status,\n          xhr.response,\n          xhr.getAllResponseHeaders(),\n          statusText,\n          \"complete\",\n        );\n      };\n\n      xhr.onerror = () => completeRequest(-1, null, null, \"\", \"error\");\n      xhr.ontimeout = () => completeRequest(-1, null, null, \"\", \"timeout\");\n\n      xhr.onabort = () => {\n        completeRequest(\n          -1,\n          null,\n          null,\n          \"\",\n          abortedByTimeout ? \"timeout\" : \"abort\",\n        );\n      };\n\n      if (eventHandlers) {\n        for (const [key, handler] of Object.entries(eventHandlers)) {\n          xhr.addEventListener(key, handler);\n        }\n      }\n\n      if (uploadEventHandlers) {\n        for (const [key, handler] of Object.entries(uploadEventHandlers)) {\n          xhr.upload.addEventListener(key, handler);\n        }\n      }\n\n      if (withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      if (responseType) {\n        try {\n          xhr.responseType = responseType;\n        } catch (e) {\n          if (responseType !== \"json\") throw e;\n        }\n      }\n\n      xhr.send(isUndefined(post) ? null : post);\n\n      if (typeof timeout === \"number\" && timeout > 0) {\n        timeoutId = setTimeout(() => timeoutRequest(\"timeout\"), timeout);\n      } else if (isPromiseLike(timeout)) {\n        /** @type {Promise} */ (timeout).then(() => {\n          timeoutRequest(isDefined(timeout[\"$$timeoutId\"]) ? \"timeout\" : \"abort\");\n        });\n      }\n\n      /**\n       * @param {\"timeout\"|\"abort\"} reason\n       */\n      function timeoutRequest(reason) {\n        abortedByTimeout = reason === \"timeout\";\n        if (xhr) xhr.abort();\n      }\n\n      /**\n       * @param {number} status - HTTP status code or -1 for network errors.\n       * @param {*} response - The parsed or raw response from the server.\n       * @param {string|null} headersString - The raw response headers as a string.\n       * @param {string} statusText - The status text returned by the server.\n       * @param {\"complete\"|\"error\"|\"timeout\"|\"abort\"} xhrStatus - Final status of the request.\n       */\n      function completeRequest(\n        status,\n        response,\n        headersString,\n        statusText,\n        xhrStatus,\n      ) {\n        if (isDefined(timeoutId)) {\n          clearTimeout(timeoutId);\n        }\n        callback(status, response, headersString, statusText, xhrStatus);\n      }\n    };\n  }\n\n  const PATH_MATCH = /^([^?#]*)(\\?([^#]*))?(#(.*))?$/;\n  const $locationMinErr = minErr(\"$location\");\n\n  let urlUpdatedByLocation = false;\n\n  /**\n   * @ignore\n   * The pathname, beginning with \"/\"\n   * @type {string}\n   */\n  let $$path;\n\n  /**\n   * @type {Object.<string,boolean|Array>}\n   */\n  let $$search;\n\n  /**\n   * @ignore\n   * The hash string, minus the hash symbol\n   * @type {string}\n   */\n  let $$hash;\n\n  class Location {\n    /**\n     * @param {string} appBase application base URL\n     * @param {string} appBaseNoFile application base URL stripped of any filename\n     * @param {boolean} [html5] Defaults to true\n     * @param {string} [prefix] URL path prefix for html5 mode or hash prefix for hashbang mode\n     */\n    constructor(appBase, appBaseNoFile, html5 = true, prefix) {\n      /** @type {string} */\n      this.appBase = appBase;\n\n      /** @type {string} */\n      this.appBaseNoFile = appBaseNoFile;\n\n      /** @type {boolean} */\n      this.html5 = html5;\n\n      /** @type {string | undefined} */\n      this.basePrefix = html5 ? prefix || \"\" : undefined;\n\n      /** @type {string | undefined} */\n      this.hashPrefix = html5 ? undefined : prefix;\n\n      /**\n       * An absolute URL is the full URL, including protocol (http/https ), the optional subdomain (e.g. www ), domain (example.com), and path (which includes the directory and slug)\n       * with all segments encoded according to rules specified in [RFC 3986](http://www.ietf.org/rfc/rfc3986.txt).\n       * @type {string}\n       */\n      this.absUrl = \"\";\n\n      /**\n       * @ignore\n       * Current url\n       * @type {string}\n       */\n      this.$$url = undefined;\n\n      /**\n       * @ignore\n       * Callback to update browser url\n       * @type {Function}\n       */\n      this.$$updateBrowser = undefined;\n    }\n\n    /**\n     * Change path, search and hash, when called with parameter and return `$location`.\n     *\n     * @param {string} url New URL without base prefix (e.g. `/path?a=b#hash`)\n     * @return {Location} url\n     */\n    setUrl(url) {\n      const match = PATH_MATCH.exec(url);\n\n      if (match[1] !== undefined || url === \"\") {\n        this.setPath(match[1] || \"\");\n      }\n\n      if (match[2] !== undefined || match[1] !== undefined || url === \"\") {\n        this.setSearch(match[3] || \"\");\n      }\n\n      this.setHash(match[5] || \"\");\n\n      return this;\n    }\n\n    /**\n     * Return URL (e.g. `/path?a=b#hash`) when called without any parameter.\n     *\n     * @return {string} url\n     */\n    getUrl() {\n      return this.$$url;\n    }\n\n    /**\n     * Change path parameter and return `$location`.\n     *\n     * @param {(string|number)} path New path\n     * @return {Location}\n     */\n    setPath(path) {\n      let newPath = path !== null ? path.toString() : \"\";\n      $$path = newPath.charAt(0) === \"/\" ? newPath : `/${newPath}`;\n      this.$$compose();\n      return this;\n    }\n\n    /**\n     *\n     * Return path of current URL\n     *\n     * @return {string}\n     */\n    getPath() {\n      return $$path;\n    }\n\n    /**\n     * Changes the hash fragment when called with a parameter and returns `$location`.\n     * @param {(string|number)} hash New hash fragment\n     * @return {Location} hash\n     */\n    setHash(hash) {\n      $$hash = hash !== null ? hash.toString() : \"\";\n      this.$$compose();\n      return this;\n    }\n\n    /**\n     * Returns the hash fragment when called without any parameters.\n     * @return {string} hash\n     */\n    getHash() {\n      return $$hash;\n    }\n\n    /**\n     * Sets the search part (as object) of current URL\n     *\n     * @param {string|Object} search New search params - string or hash object.\n     * @param {(string|number|Array<string>|boolean)=} paramValue If search is a string or number, then paramValue will override only a single search property.\n     * @returns {Object} Search object or Location object\n     */\n    setSearch(search, paramValue) {\n      switch (arguments.length) {\n        case 1:\n          if (isString(search) || isNumber(search)) {\n            search = search.toString();\n            $$search = parseKeyValue(search);\n          } else if (isObject(search)) {\n            search = structuredClone(search, {});\n            // remove object undefined or null properties\n            Object.entries(search).forEach(([key, value]) => {\n              if (value == null) delete search[key];\n            });\n\n            $$search = search;\n          } else {\n            throw $locationMinErr(\n              \"isrcharg\",\n              \"The first argument of the `$location#search()` call must be a string or an object.\",\n            );\n          }\n          break;\n        default:\n          if (isUndefined(paramValue) || paramValue === null) {\n            delete $$search[search];\n          } else {\n            // @ts-ignore\n            $$search[search] = paramValue;\n          }\n      }\n\n      this.$$compose();\n      return this;\n    }\n\n    /**\n     * Returns the search part (as object) of current URL\n     *\n     * @returns {Object} Search object or Location object\n     */\n    getSearch() {\n      return $$search;\n    }\n\n    /**\n     * @private\n     * Compose url and update `url` and `absUrl` property\n     */\n    $$compose() {\n      this.$$url = normalizePath($$path, $$search, $$hash);\n      this.absUrl = this.html5\n        ? this.appBaseNoFile + this.$$url.substring(1)\n        : this.appBase + (this.$$url ? this.hashPrefix + this.$$url : \"\");\n      urlUpdatedByLocation = true;\n      setTimeout(() => this.$$updateBrowser && this.$$updateBrowser());\n    }\n\n    /**\n     * Change the history state object when called with one parameter and return `$location`.\n     * The state object is later passed to `pushState` or `replaceState`.\n     * See {@link https://developer.mozilla.org/en-US/docs/Web/API/History/pushState#state|History.state}\n     *\n     * NOTE: This method is supported only in HTML5 mode and only in browsers supporting\n     * the HTML5 History API (i.e. methods `pushState` and `replaceState`). If you need to support\n     * older browsers (like IE9 or Android < 4.0), don't use this method.\n     * @param {any} state\n     * @returns {Location}\n     */\n    setState(state) {\n      if (!this.html5) {\n        throw $locationMinErr(\n          \"nostate\",\n          \"History API state support is available only in HTML5 mode\",\n        );\n      }\n      // The user might modify `stateObject` after invoking `$location.setState(stateObject)`\n      // but we're changing the $$state reference to $browser.state() during the $digest\n      // so the modification window is narrow.\n      this.$$state = isUndefined(state) ? null : state;\n      urlUpdatedByLocation = true;\n      return this;\n    }\n\n    /**\n     * Return the history state object\n     * @returns {any}\n     */\n    getState() {\n      return this.$$state;\n    }\n\n    /**\n     * @param {string} url\n     * @param {string} relHref\n     * @returns {boolean}\n     */\n    parseLinkUrl(url, relHref) {\n      if (this.html5) {\n        if (relHref && relHref[0] === \"#\") {\n          // special case for links to hash fragments:\n          // keep the old url and only replace the hash fragment\n          this.setHash(relHref.slice(1));\n          return true;\n        }\n        let appUrl;\n        let prevAppUrl;\n        let rewrittenUrl;\n\n        if (isDefined((appUrl = stripBaseUrl(this.appBase, url)))) {\n          prevAppUrl = appUrl;\n          if (\n            this.basePrefix &&\n            isDefined((appUrl = stripBaseUrl(this.basePrefix, appUrl)))\n          ) {\n            rewrittenUrl =\n              this.appBaseNoFile + (stripBaseUrl(\"/\", appUrl) || appUrl);\n          } else {\n            rewrittenUrl = this.appBase + prevAppUrl;\n          }\n        } else if (isDefined((appUrl = stripBaseUrl(this.appBaseNoFile, url)))) {\n          rewrittenUrl = this.appBaseNoFile + appUrl;\n        } else if (this.appBaseNoFile === `${url}/`) {\n          rewrittenUrl = this.appBaseNoFile;\n        }\n        if (rewrittenUrl) {\n          this.parse(rewrittenUrl);\n        }\n        return !!rewrittenUrl;\n      } else {\n        if (stripHash(this.appBase) === stripHash(url)) {\n          this.parse(url);\n          return true;\n        }\n        return false;\n      }\n    }\n\n    /**\n     * Parse given HTML5 (regular) URL string into properties\n     * @param {string} url HTML5 URL\n     */\n    parse(url) {\n      if (this.html5) {\n        const pathUrl = stripBaseUrl(this.appBaseNoFile, url);\n        if (!isString(pathUrl)) {\n          throw $locationMinErr(\n            \"ipthprfx\",\n            'Invalid url \"{0}\", missing path prefix \"{1}\".',\n            url,\n            this.appBaseNoFile,\n          );\n        }\n\n        parseAppUrl(pathUrl, true);\n\n        if (!$$path) {\n          $$path = \"/\";\n        }\n\n        this.$$compose();\n      } else {\n        const withoutBaseUrl =\n          stripBaseUrl(this.appBase, url) ||\n          stripBaseUrl(this.appBaseNoFile, url);\n        let withoutHashUrl;\n\n        if (!isUndefined(withoutBaseUrl) && withoutBaseUrl.charAt(0) === \"#\") {\n          // The rest of the URL starts with a hash so we have\n          // got either a hashbang path or a plain hash fragment\n          withoutHashUrl = stripBaseUrl(this.hashPrefix, withoutBaseUrl);\n          if (isUndefined(withoutHashUrl)) {\n            // There was no hashbang prefix so we just have a hash fragment\n            withoutHashUrl = withoutBaseUrl;\n          }\n        } else {\n          // There was no hashbang path nor hash fragment:\n          // If we are in HTML5 mode we use what is left as the path;\n          // Otherwise we ignore what is left\n          if (this.html5) {\n            withoutHashUrl = withoutBaseUrl;\n          } else {\n            withoutHashUrl = \"\";\n            if (isUndefined(withoutBaseUrl)) {\n              this.appBase = url;\n            }\n          }\n        }\n\n        parseAppUrl(withoutHashUrl, false);\n\n        $$path = removeWindowsDriveName($$path, withoutHashUrl, this.appBase);\n\n        this.$$compose();\n\n        /*\n         * In Windows, on an anchor node on documents loaded from\n         * the filesystem, the browser will return a pathname\n         * prefixed with the drive name ('/C:/path') when a\n         * pathname without a drive is set:\n         *  * a.setAttribute('href', '/foo')\n         *   * a.pathname === '/C:/foo' //true\n         *\n         * Inside of AngularTS, we're always using pathnames that\n         * do not include drive names for routing.\n         */\n        function removeWindowsDriveName(path, url, base) {\n          /*\n          Matches paths for file protocol on windows,\n          such as /C:/foo/bar, and captures only /foo/bar.\n          */\n          const windowsFilePathExp = /^\\/[A-Z]:(\\/.*)/;\n\n          let firstPathSegmentMatch;\n\n          // Get the relative path from the input URL.\n          if (startsWith(url, base)) {\n            url = url.replace(base, \"\");\n          }\n\n          // The input URL intentionally contains a first path segment that ends with a colon.\n          if (windowsFilePathExp.exec(url)) {\n            return path;\n          }\n\n          firstPathSegmentMatch = windowsFilePathExp.exec(path);\n          return firstPathSegmentMatch ? firstPathSegmentMatch[1] : path;\n        }\n      }\n    }\n  }\n\n  class LocationProvider {\n    constructor() {\n      /** @type {string} */\n      this.hashPrefixConf = \"!\";\n\n      /** @type {import(\"./interface.ts\").Html5Mode} */\n      this.html5ModeConf = {\n        enabled: true,\n        requireBase: false,\n        rewriteLinks: true,\n      };\n\n      /** @type {Array<import(\"./interface.ts\").UrlChangeListener>} */\n      this.urlChangeListeners = [];\n      this.urlChangeInit = false;\n\n      /** @type {History['state']} */\n      this.cachedState = null;\n      /** @type {History['state']} */\n      this.lastHistoryState = null;\n      /** @type {string} */\n      this.lastBrowserUrl = window.location.href;\n      this.cacheState();\n    }\n\n    /// ///////////////////////////////////////////////////////////\n    // URL API\n    /// ///////////////////////////////////////////////////////////\n\n    /**\n     * Updates the browser's current URL and history state.\n     *\n     * @param {string|undefined} url - The target URL to navigate to.\n     * @param {*} [state=null] - Optional history state object to associate with the new URL.\n     * @returns {LocationProvider}\n     */\n    setUrl(url, state) {\n      if (state === undefined) {\n        state = null;\n      }\n      if (url) {\n        url = new URL(url).href;\n\n        if (this.lastBrowserUrl === url && this.lastHistoryState === state) {\n          return this;\n        }\n\n        this.lastBrowserUrl = url;\n        this.lastHistoryState = state;\n        history.pushState(state, \"\", url);\n        this.cacheState();\n      }\n    }\n\n    /**\n     * Returns the current URL with any empty hash (`#`) removed.\n     * @return {string}\n     */\n    getBrowserUrl() {\n      return trimEmptyHash(window.location.href);\n    }\n\n    /**\n     * Returns the cached state.\n     * @returns {History['state']} The cached state.\n     */\n    state() {\n      return this.cachedState;\n    }\n\n    /**\n     * Caches the current state.\n     *\n     * @private\n     */\n    cacheState() {\n      const currentState = history.state ?? null;\n      if (!equals$1(currentState, this.lastCachedState)) {\n        this.cachedState = currentState;\n        this.lastCachedState = currentState;\n        this.lastHistoryState = currentState;\n      }\n    }\n\n    /**\n     * Fires the state or URL change event.\n     */\n    #fireStateOrUrlChange() {\n      const prevLastHistoryState = this.lastHistoryState;\n      this.cacheState();\n      if (\n        this.lastBrowserUrl === this.getBrowserUrl() &&\n        prevLastHistoryState === this.cachedState\n      ) {\n        return;\n      }\n      this.lastBrowserUrl = this.getBrowserUrl();\n      this.lastHistoryState = this.cachedState;\n      this.urlChangeListeners.forEach((listener) => {\n        listener(trimEmptyHash(window.location.href), this.cachedState);\n      });\n    }\n\n    /**\n     * Registers a callback to be called when the URL changes.\n     *\n     * @param {import(\"./interface.js\").UrlChangeListener} callback - The callback function to register.\n     * @returns void\n     */\n    #onUrlChange(callback) {\n      if (!this.urlChangeInit) {\n        window.addEventListener(\n          \"popstate\",\n          this.#fireStateOrUrlChange.bind(this),\n        );\n        window.addEventListener(\n          \"hashchange\",\n          this.#fireStateOrUrlChange.bind(this),\n        );\n        this.urlChangeInit = true;\n      }\n      this.urlChangeListeners.push(callback);\n    }\n\n    $get = [\n      $injectTokens.$rootScope,\n      $injectTokens.$rootElement,\n      /**\n       *\n       * @param {import('../../core/scope/scope.js').Scope} $rootScope\n       * @param {Element} $rootElement\n       * @returns {Location}\n       */\n      ($rootScope, $rootElement) => {\n        /** @type {Location} */\n        let $location;\n        const baseHref = getBaseHref(); // if base[href] is undefined, it defaults to ''\n        const initialUrl = trimEmptyHash(window.location.href);\n        let appBase;\n\n        if (this.html5ModeConf.enabled) {\n          if (!baseHref && this.html5ModeConf.requireBase) {\n            throw $locationMinErr(\n              \"nobase\",\n              \"$location in HTML5 mode requires a <base> tag to be present!\",\n            );\n          }\n          appBase = serverBase(initialUrl) + (baseHref || \"/\");\n        } else {\n          appBase = stripHash(initialUrl);\n        }\n        const appBaseNoFile = stripFile(appBase);\n\n        $location = new Location(\n          appBase,\n          appBaseNoFile,\n          this.html5ModeConf.enabled,\n          `#${this.hashPrefixConf}`,\n        );\n        $location.parseLinkUrl(initialUrl, initialUrl);\n\n        $location.$$state = this.state();\n\n        const IGNORE_URI_REGEXP = /^\\s*(javascript|mailto):/i;\n\n        const setBrowserUrlWithFallback = (url, state) => {\n          const oldUrl = $location.getUrl();\n          const oldState = $location.$$state;\n          try {\n            this.setUrl(url, state);\n\n            // Make sure $location.getState() returns referentially identical (not just deeply equal)\n            // state object; this makes possible quick checking if the state changed in the digest\n            // loop. Checking deep equality would be too expensive.\n            $location.$$state = this.state();\n          } catch (e) {\n            // Restore old values if pushState fails\n            $location.setUrl(/** @type {string} */ (oldUrl));\n            $location.$$state = oldState;\n\n            throw e;\n          }\n        };\n\n        $rootElement.addEventListener(\n          \"click\",\n          /** @param {MouseEvent} event */\n          (event) => {\n            const rewriteLinks = this.html5ModeConf.rewriteLinks;\n            // TODO(vojta): rewrite link when opening in new tab/window (in legacy browser)\n            // currently we open nice url link and redirect then\n\n            if (\n              !rewriteLinks ||\n              event.ctrlKey ||\n              event.metaKey ||\n              event.shiftKey ||\n              event.button === 2\n            ) {\n              return;\n            }\n            let elm = /** @type {HTMLAnchorElement} */ (event.target);\n\n            // traverse the DOM up to find first A tag\n            while (elm.nodeName.toLowerCase() !== \"a\") {\n              // ignore rewriting if no A tag (reached root element, or no parent - removed from document)\n              // @ts-ignore\n              if (elm === $rootElement || !(elm = elm.parentElement)) return;\n            }\n\n            if (\n              isString(rewriteLinks) &&\n              isUndefined(elm.getAttribute(/** @type {string} */ (rewriteLinks)))\n            ) {\n              return;\n            }\n\n            let absHref = elm.href;\n            // get the actual href attribute - see\n            // http://msdn.microsoft.com/en-us/library/ie/dd347148(v=vs.85).aspx\n            const relHref =\n              elm.getAttribute(\"href\") || elm.getAttribute(\"xlink:href\");\n\n            if (\n              isObject(absHref) &&\n              absHref.toString() === \"[object SVGAnimatedString]\"\n            ) {\n              // SVGAnimatedString.animVal should be identical to SVGAnimatedString.baseVal, unless during\n              // an animation.\n\n              const scvAnimatedString = /** @type {unknown} */ (absHref);\n              absHref = new URL(\n                /** @type {SVGAnimatedString } */ (scvAnimatedString).animVal,\n              ).href;\n            }\n\n            // Ignore when url is started with javascript: or mailto:\n            if (IGNORE_URI_REGEXP.test(absHref)) return;\n\n            if (\n              absHref &&\n              !elm.getAttribute(\"target\") &&\n              !event.defaultPrevented\n            ) {\n              if ($location.parseLinkUrl(absHref, relHref)) {\n                // We do a preventDefault for all urls that are part of the AngularTS application,\n                // in html5mode and also without, so that we are able to abort navigation without\n                // getting double entries in the location history.\n                event.preventDefault();\n              }\n            }\n          },\n        );\n\n        // rewrite hashbang url <> html5 url\n        if ($location.absUrl !== initialUrl) {\n          this.setUrl($location.absUrl, true);\n        }\n\n        let initializing = true;\n\n        // update $location when $browser url changes\n        this.#onUrlChange((newUrl, newState) => {\n          if (!startsWith(newUrl, appBaseNoFile)) {\n            // If we are navigating outside of the app then force a reload\n            window.location.href = newUrl;\n            return;\n          }\n\n          Promise.resolve().then(() => {\n            const oldUrl = $location.absUrl;\n            const oldState = $location.$$state;\n            let defaultPrevented;\n            $location.parse(newUrl);\n            $location.$$state = newState;\n\n            defaultPrevented = $rootScope.$broadcast(\n              \"$locationChangeStart\",\n              newUrl,\n              oldUrl,\n              newState,\n              oldState,\n            ).defaultPrevented;\n\n            // if the location was changed by a `$locationChangeStart` handler then stop\n            // processing this location change\n            if ($location.absUrl !== newUrl) return;\n\n            if (defaultPrevented) {\n              $location.parse(oldUrl);\n              $location.$$state = oldState;\n              setBrowserUrlWithFallback(oldUrl, oldState);\n            } else {\n              initializing = false;\n              afterLocationChange(oldUrl, oldState);\n            }\n          });\n        });\n\n        // update browser\n        const updateBrowser = () => {\n          if (initializing || urlUpdatedByLocation) {\n            urlUpdatedByLocation = false;\n\n            const oldUrl = /** @type {string} */ (this.getBrowserUrl());\n            const newUrl = $location.absUrl;\n            const oldState = this.state();\n            const urlOrStateChanged =\n              !urlsEqual(oldUrl, newUrl) ||\n              ($location.html5 && oldState !== $location.$$state);\n\n            if (initializing || urlOrStateChanged) {\n              initializing = false;\n\n              setTimeout(() => {\n                const newUrl = $location.absUrl;\n                const { defaultPrevented } = $rootScope.$broadcast(\n                  \"$locationChangeStart\",\n                  newUrl,\n                  oldUrl,\n                  $location.$$state,\n                  oldState,\n                );\n\n                // if the location was changed by a `$locationChangeStart` handler then stop\n                // processing this location change\n                if ($location.absUrl !== newUrl) return;\n\n                if (defaultPrevented) {\n                  $location.parse(oldUrl);\n                  $location.$$state = oldState;\n                } else {\n                  if (urlOrStateChanged) {\n                    setBrowserUrlWithFallback(\n                      newUrl,\n                      oldState === $location.$$state ? null : $location.$$state,\n                    );\n                  }\n                  afterLocationChange(oldUrl, oldState);\n                }\n              });\n            }\n          }\n        };\n        $location.$$updateBrowser = updateBrowser;\n        updateBrowser();\n        $rootScope.$on(\"$updateBrowser\", updateBrowser);\n\n        return $location;\n\n        function afterLocationChange(oldUrl, oldState) {\n          $rootScope.$broadcast(\n            \"$locationChangeSuccess\",\n            $location.absUrl,\n            oldUrl,\n            $location.$$state,\n            oldState,\n          );\n        }\n      },\n    ];\n  }\n\n  /**\n   * ///////////////////////////\n   *     PRIVATE HELPERS\n   * ///////////////////////////\n   */\n\n  /**\n   * @ignore\n   * Encodes a URL path by encoding each path segment individually using `encodeUriSegment`,\n   * while preserving forward slashes (`/`) as segment separators.\n   *\n   * This function first decodes any existing percent-encodings (such as `%20` or `%2F`)\n   * in each segment to prevent double encoding, except for encoded forward slashes (`%2F`),\n   * which are replaced with literal slashes before decoding to keep path boundaries intact.\n   *\n   * After decoding, each segment is re-encoded with `encodeUriSegment` according to RFC 3986,\n   * encoding only characters that must be encoded in a path segment.\n   *\n   * The encoded segments are then rejoined with `/` to form the encoded path.\n   *\n   * @param {string} path - The URL path string to encode. May contain multiple segments separated by `/`.\n   * @returns {string} The encoded path, where each segment is encoded, but forward slashes are preserved.\n   *\n   * @example\n   * encodePath(\"user profile/images/pic 1.jpg\")\n   * // returns \"user%20profile/images/pic%201.jpg\"\n   *\n   * @example\n   * encodePath(\"folder1%2Fsub/folder2\")\n   * // returns \"folder1%2Fsub/folder2\"\n   */\n  function encodePath(path) {\n    const segments = path.split(\"/\");\n    let i = segments.length;\n\n    while (i--) {\n      // Decode any existing encodings (e.g. %20, %2F) to prevent double-encoding\n      // But keep slashes intact (they were split on)\n      const decodedSegment = decodeURIComponent(\n        segments[i].replace(/%2F/gi, \"/\"),\n      );\n      segments[i] = encodeUriSegment(decodedSegment);\n    }\n\n    return segments.join(\"/\");\n  }\n\n  /**\n   * @ignore\n   * Decodes each segment of a URL path.\n   *\n   * Splits the input path by \"/\", decodes each segment using decodeURIComponent,\n   * and if html5Mode is enabled, re-encodes any forward slashes inside segments\n   * as \"%2F\" to avoid confusion with path separators.\n   *\n   * @param {string} path - The URL path to decode.\n   * @param {boolean} html5Mode - If true, encodes forward slashes in segments as \"%2F\".\n   * @returns {string} The decoded path with segments optionally encoding slashes.\n   */\n  function decodePath(path, html5Mode) {\n    const segments = path.split(\"/\");\n    let i = segments.length;\n\n    while (i--) {\n      segments[i] = decodeURIComponent(segments[i]);\n      if (html5Mode) {\n        // encode forward slashes to prevent them from being mistaken for path separators\n        segments[i] = segments[i].replace(/\\//g, \"%2F\");\n      }\n    }\n\n    return segments.join(\"/\");\n  }\n\n  /**\n   * @ignore\n   * Normalizes a URL path by encoding the path segments, query parameters, and hash fragment.\n   *\n   * - Path segments are encoded using `encodePath`, which encodes each segment individually.\n   * - Query parameters (`searchValue`) are converted to a query string using `toKeyValue`.\n   * - Hash fragment (`hashValue`) is encoded using `encodeUriSegment` and prefixed with `#`.\n   *\n   * This function returns a fully constructed URL path with optional query and hash components.\n   *\n   * @param {string} pathValue - The base URL path (e.g., \"folder/item name\").\n   * @param {Object.<string, any> | string | null} searchValue - An object or string representing query parameters.\n   *   - If an object, it can contain strings, numbers, booleans, or arrays of values.\n   *   - If a string, it is assumed to be a raw query string.\n   *   - If null or undefined, no query string is added.\n   * @param {string | null} hashValue - The URL fragment (everything after `#`). If null or undefined, no hash is added.\n   *\n   * @returns {string} The normalized URL path including encoded path, optional query string, and optional hash.\n   *\n   * @example\n   * normalizePath(\"products/list\", { category: \"books\", page: 2 }, \"section1\")\n   * // returns \"products/list?category=books&page=2#section1\"\n   *\n   * @example\n   * normalizePath(\"user profile/images\", null, null)\n   * // returns \"user%20profile/images\"\n   */\n  function normalizePath(pathValue, searchValue, hashValue) {\n    const search = toKeyValue(searchValue);\n    const hash = hashValue ? `#${encodeUriSegment(hashValue)}` : \"\";\n    const path = encodePath(pathValue);\n\n    return path + (search ? `?${search}` : \"\") + hash;\n  }\n\n  /**\n   * @ignore\n   * Parses the application URL and updates the location object with path, search, and hash.\n   *\n   * @param {string} url - The URL string to parse.\n   * @param {boolean} html5Mode - Whether HTML5 mode is enabled (affects decoding).\n   * @throws Will throw an error if the URL starts with invalid slashes.\n   */\n  function parseAppUrl(url, html5Mode) {\n    if (/^\\s*[\\\\/]{2,}/.test(url)) {\n      throw $locationMinErr(\"badpath\", 'Invalid url \"{0}\".', url);\n    }\n\n    const prefixed = url.charAt(0) !== \"/\";\n    if (prefixed) {\n      url = `/${url}`;\n    }\n    const match = urlResolve(url);\n    const path =\n      prefixed && match.pathname.charAt(0) === \"/\"\n        ? match.pathname.substring(1)\n        : match.pathname;\n    $$path = decodePath(path, html5Mode);\n    $$search = parseKeyValue(match.search);\n    $$hash = decodeURIComponent(match.hash);\n\n    // make sure path starts with '/';\n    if ($$path && $$path.charAt(0) !== \"/\") {\n      $$path = `/${$$path}`;\n    }\n  }\n\n  /**\n   * @ignore\n   * Returns the substring of `url` after the `base` string if `url` starts with `base`.\n   * Returns `undefined` if `url` does not start with `base`.\n   * @param {string} base\n   * @param {string} url\n   * @returns {string} returns text from `url` after `base` or `undefined` if it does not begin with\n   *                   the expected string.\n   */\n  function stripBaseUrl(base, url) {\n    if (startsWith(url, base)) {\n      return url.substring(base.length);\n    }\n  }\n\n  /**\n   * @ignore\n   * Removes the hash fragment (including the '#') from the given URL string.\n   *\n   * @param {string} url - The URL string to process.\n   * @returns {string} The URL without the hash fragment.\n   */\n  function stripHash(url) {\n    const index = url.indexOf(\"#\");\n    return index === -1 ? url : url.substring(0, index);\n  }\n\n  /**\n   * @ignore\n   * Removes the file name (and any hash) from a URL, returning the base directory path.\n   *\n   * For example:\n   * - Input: \"https://example.com/path/to/file.js\"\n   *   Output: \"https://example.com/path/to/\"\n   *\n   * - Input: \"https://example.com/path/to/file.js#section\"\n   *   Output: \"https://example.com/path/to/\"\n   *\n   * @param {string} url - The URL from which to strip the file name and hash.\n   * @returns {string} The base path of the URL, ending with a slash.\n   */\n  function stripFile(url) {\n    return url.substring(0, stripHash(url).lastIndexOf(\"/\") + 1);\n  }\n\n  /**\n   * @ignore\n   * Extracts the base server URL (scheme, host, and optional port) from a full URL.\n   *\n   * If no path is present, returns the full URL.\n   *\n   * For example:\n   * - Input: \"https://example.com/path/to/file\"\n   *   Output: \"https://example.com\"\n   *\n   * - Input: \"http://localhost:3000/api/data\"\n   *   Output: \"http://localhost:3000\"\n   *\n   * @param {string} url - The full URL to extract the server base from.\n   * @returns {string} The server base, including scheme and host (and port if present).\n   */\n  function serverBase(url) {\n    const start = url.indexOf(\"//\") + 2;\n    const slashIndex = url.indexOf(\"/\", start);\n    return slashIndex === -1 ? url : url.substring(0, slashIndex);\n  }\n\n  /**\n   * @ignore\n   * Determine if two URLs are equal despite potential differences in encoding,\n   * trailing slashes, or empty hash fragments, such as between $location.absUrl() and $browser.url().\n   *\n   * @param {string} a - First URL to compare.\n   * @param {string} b - Second URL to compare.\n   * @returns {boolean} True if URLs are equivalent after normalization.\n   */\n  function urlsEqual(a, b) {\n    return normalizeUrl(a) === normalizeUrl(b);\n  }\n\n  /**\n   * @ignore\n   * Normalize a URL by resolving it via a DOM anchor element,\n   * removing trailing slashes (except root), and trimming empty hashes.\n   *\n   * @param {string} url - URL to normalize.\n   * @returns {string} Normalized URL string.\n   */\n  function normalizeUrl(url) {\n    const anchor = document.createElement(\"a\");\n    anchor.href = url;\n\n    let normalized = anchor.href;\n\n    // Remove trailing slash unless it's root (e.g., https://example.com/)\n    if (normalized.endsWith(\"/\") && !/^https?:\\/\\/[^/]+\\/$/.test(normalized)) {\n      normalized = normalized.slice(0, -1);\n    }\n\n    // Remove empty hash (e.g., https://example.com/foo# -> https://example.com/foo)\n    if (normalized.endsWith(\"#\")) {\n      normalized = normalized.slice(0, -1);\n    }\n\n    return normalized;\n  }\n\n  /**\n   * Configuration provider for `$log` service\n   */\n  class LogProvider {\n    /** @private */\n    constructor() {\n      /** @type {boolean} */\n      this.debug = false;\n      /** @private @type {import(\"./interface.ts\").LogServiceFactory | null} */\n      this._override = null;\n    }\n\n    /**\n     * Override the default {@link LogService} implemenation\n     * @param {import(\"./interface.ts\").LogServiceFactory} fn\n     */\n    setLogger(fn) {\n      this._override = fn;\n    }\n\n    /** @private */\n    formatError(arg) {\n      if (isError(arg)) {\n        if (arg.stack) {\n          arg =\n            arg.message && arg.stack.indexOf(arg.message) === -1\n              ? `Error: ${arg.message}\\n${arg.stack}`\n              : arg.stack;\n        } else if (arg.sourceURL) {\n          arg = `${arg.message}\\n${arg.sourceURL}:${arg.line}`;\n        }\n      }\n      return arg;\n    }\n\n    /**\n     * @private\n     * @param {string} type\n     */\n    consoleLog(type) {\n      const console = window.console || {};\n      const logFn = console[type] || console.log || (() => {});\n\n      return (...args) => {\n        const formattedArgs = args.map((arg) => this.formatError(arg));\n        return logFn.apply(console, formattedArgs);\n      };\n    }\n\n    /**\n     * @returns {import(\"./interface.ts\").LogService}\n     */\n    $get() {\n      if (this._override) {\n        return this._override();\n      }\n      return {\n        log: this.consoleLog(\"log\"),\n        info: this.consoleLog(\"info\"),\n        warn: this.consoleLog(\"warn\"),\n        error: this.consoleLog(\"error\"),\n        debug: (() => {\n          const fn = this.consoleLog(\"debug\");\n          return (...args) => {\n            if (this.debug) {\n              fn.apply(this, args);\n            }\n          };\n        })(),\n      };\n    }\n  }\n\n  /**\n   * @type {number}\n   */\n  let uid = 0;\n\n  function nextId() {\n    uid += 1;\n    return uid;\n  }\n\n  /**\n   * @type {import('../parse/interface.ts').ParseService}\n   */\n  let $parse;\n\n  /**@type {import('../../services/exception/exception-handler.js').ErrorHandler} */\n  let $exceptionHandler;\n\n  /**\n   * @typedef {Object} AsyncQueueTask\n   * @property {Scope} handler\n   * @property {Function} fn\n   * @property {Object} locals\n   */\n\n  const $postUpdateQueue = [];\n\n  class RootScopeProvider {\n    constructor() {\n      this.rootScope = createScope();\n    }\n\n    $get = [\n      \"$exceptionHandler\",\n      \"$parse\",\n      /**\n       * @param {import('../../services/exception/exception-handler.js').ErrorHandler} exceptionHandler\n       * @param {import('../parse/interface.ts').ParseService} parse\n       */\n      (exceptionHandler, parse) => {\n        $exceptionHandler = exceptionHandler;\n        $parse = parse;\n        return this.rootScope;\n      },\n    ];\n  }\n\n  /**\n   * Creates a deep proxy for the target object, intercepting property changes\n   * and recursively applying proxies to nested objects.\n   *\n   * @param {Object} target - The object to be wrapped in a proxy.\n   * @param {Scope} [context] - The context for the handler, used to track listeners.\n   * @returns {Scope} - A proxy that intercepts operations on the target object,\n   *                                     or the original value if the target is not an object.\n   */\n  function createScope(target = {}, context) {\n    if (\n      isNull(target) ||\n      target[NONSCOPE] === true ||\n      (target.constructor && target.constructor[NONSCOPE]) === true\n    ) {\n      return target;\n    }\n\n    if (typeof target === \"object\") {\n      const proxy = new Proxy(target, context || new Scope());\n      for (const key in target) {\n        if (hasOwn(target, key)) {\n          try {\n            if (\n              (target.constructor.$nonscope &&\n                Array.isArray(target.constructor.$nonscope) &&\n                target.constructor.$nonscope.includes(key)) ||\n              (target.$nonscope &&\n                Array.isArray(target.$nonscope) &&\n                target.$nonscope.includes(key))\n            ) {\n              /* empty */\n            } else {\n              target[key] = createScope(target[key], proxy.$handler);\n            }\n          } catch {\n            // convert only what we can\n          }\n        }\n      }\n\n      return proxy;\n    } else {\n      return target;\n    }\n  }\n\n  /**\n   * Listener function definition.\n   * @typedef {Object} Listener\n   * @property {Object} originalTarget - The original target object.\n   * @property {ListenerFunction} listenerFn - The function invoked when changes are detected.\n   * @property {import(\"../parse/interface.ts\").CompiledExpression} watchFn\n   * @property {number} id - Deregistration id\n   * @property {number} scopeId - The scope that created the Listener\n   * @property {string[]} property\n   * @property {string} [watchProp] - The original property to watch if different from observed key\n   * @property {Proxy} [foreignListener]\n   *\n   */\n\n  /**\n   * Listener function type.\n   * @callback ListenerFunction\n   * @param {*} newValue - The new value of the changed property.\n   * @param {Object} originalTarget - The original target object.\n   */\n\n  /**\n   * Decorator for excluding objects from scope observability\n   */\n  const NONSCOPE = \"$nonscope\";\n\n  /**\n   * Scope class for the Proxy. It intercepts operations like property access (get)\n   * and property setting (set), and adds support for deep change tracking and\n   * observer-like behavior.\n   * @extends {Record<string, any>}\n   */\n  class Scope {\n    /**\n     * Initializes the handler with the target object and a context.\n     *\n     * @param {Scope} [context] - The context containing listeners.\n     * @param {Scope} [parent] - Custom parent.\n     */\n    constructor(context, parent) {\n      this.context = context\n        ? context.context\n          ? context.context\n          : context\n        : undefined;\n\n      /** @type {Map<string, Array<Listener>>} Watch listeners */\n      this.watchers = context ? context.watchers : new Map();\n\n      /** @type {Map<String, Function[]>} Event listeners */\n      this.$$listeners = new Map();\n\n      /** @type {Map<string, Array<Listener>>} Watch listeners from other proxies */\n      this.foreignListeners = context ? context.foreignListeners : new Map();\n\n      /** @type {Set<ProxyConstructor>} */\n      this.foreignProxies = context ? context.foreignProxies : new Set();\n\n      /** @type {WeakMap<Object, Array<string>>} */\n      this.objectListeners = context ? context.objectListeners : new WeakMap();\n\n      /** @type {Map<Function, {oldValue: any, fn: Function}>} */\n      this.functionListeners = context ? context.functionListeners : new Map();\n\n      /** Current proxy being operated on */\n      this.$proxy = null;\n\n      /** @type {Scope} The actual proxy */\n      this.$handler = /** @type {Scope} */ (this);\n\n      /** @type {*} Current target being called on */\n      this.$target = null;\n\n      /** @type {*} Value wrapped by the proxy */\n      this.$value = null;\n\n      /**\n       * @type {Scope[]}\n       */\n      this.$children = [];\n\n      /**\n       * @type {number} Unique model ID (monotonically increasing) useful for debugging.\n       */\n      this.$id = nextId();\n\n      /**\n       * @type {Scope}\n       */\n      this.$root = context ? context.$root : /** @type {Scope} */ (this);\n\n      this.$parent = parent\n        ? parent\n        : /** @type {Scope} */ (this).$root === /** @type {Scope} */ (this)\n          ? null\n          : context;\n\n      /** @type {AsyncQueueTask[]} */\n      this.$$asyncQueue = [];\n\n      this.filters = [];\n\n      /** @type {boolean} */\n      this.$$destroyed = false;\n\n      this.scheduled = [];\n    }\n\n    /**\n     * Intercepts and handles property assignments on the target object. If a new value is\n     * an object, it will be recursively proxied.\n     *\n     * @param {Object} target - The target object.\n     * @param {string} property - The name of the property being set.\n     * @param {*} value - The new value being assigned to the property.\n     * @param {Proxy} proxy - The proxy intercepting property access\n     * @returns {boolean} - Returns true to indicate success of the operation.\n     */\n    set(target, property, value, proxy) {\n      if (property === \"undefined\") {\n        throw new Error(\"Attempting to set undefined property\");\n      }\n      if (\n        (target.constructor?.$nonscope &&\n          Array.isArray(target.constructor.$nonscope) &&\n          target.constructor.$nonscope.includes(property)) ||\n        (target.$nonscope &&\n          Array.isArray(target.$nonscope) &&\n          target.$nonscope.includes(property))\n      ) {\n        target[property] = value;\n        return true;\n      }\n\n      this.$proxy = proxy;\n      this.$target = target;\n      const oldValue = target[property];\n\n      // Handle NaNs\n      if (\n        oldValue !== undefined &&\n        Number.isNaN(oldValue) &&\n        Number.isNaN(value)\n      ) {\n        return true;\n      }\n      if (oldValue && oldValue[isProxySymbol]) {\n        if (Array.isArray(value)) {\n          if (oldValue !== value) {\n            const listeners = this.watchers.get(property);\n\n            if (listeners) {\n              this.#scheduleListener(listeners);\n            }\n\n            const foreignListeners = this.foreignListeners.get(property);\n\n            if (foreignListeners) {\n              this.#scheduleListener(foreignListeners);\n            }\n          }\n\n          if (this.objectListeners.get(target[property])) {\n            this.objectListeners.delete(target[property]);\n          }\n          target[property] = createScope(value, this);\n          this.objectListeners.set(target[property], [property]);\n          return true;\n        }\n\n        if (isObject(value)) {\n          if (hasOwn(target, property)) {\n            Object.keys(oldValue)\n              .filter((x) => !value[x])\n              .forEach((k) => {\n                delete oldValue[k];\n              });\n          }\n\n          if (oldValue !== value) {\n            const listeners = this.watchers.get(property);\n\n            if (listeners) {\n              this.#scheduleListener(listeners);\n            }\n\n            const foreignListeners = this.foreignListeners.get(property);\n\n            if (foreignListeners) {\n              this.#scheduleListener(foreignListeners);\n            }\n\n            this.#checkeListenersForAllKeys(value);\n          }\n          target[property] = createScope(value, this);\n          //setDeepValue(target[property], value);\n          return true;\n        }\n\n        if (isUndefined(value)) {\n          let called = false;\n          Object.keys(oldValue.$target).forEach((k) => {\n            if (oldValue.$target[k]?.[isProxySymbol]) {\n              called = true;\n            }\n            delete oldValue[k];\n          });\n\n          target[property] = undefined;\n          if (!called) {\n            let listeners = this.watchers.get(property);\n\n            if (listeners) {\n              this.#scheduleListener(listeners);\n            }\n          }\n\n          return true;\n        }\n\n        if (isDefined(value)) {\n          target[property] = value;\n          let listeners = this.watchers.get(property);\n\n          if (listeners) {\n            this.#scheduleListener(listeners);\n          }\n\n          if (Array.isArray(target)) {\n            if (this.objectListeners.has(proxy) && property !== \"length\") {\n              let keys = this.objectListeners.get(proxy);\n              keys.forEach((key) => {\n                const listeners = this.watchers.get(key);\n                if (listeners) {\n                  this.#scheduleListener(listeners);\n                }\n              });\n            }\n          }\n\n          return true;\n        }\n        return true;\n      } else {\n        if (isUndefined(target[property]) && isProxy(value)) {\n          this.foreignProxies.add(value);\n          target[property] = value;\n          if (!this.watchers.has(property)) {\n            return true;\n          }\n        }\n        if (isUndefined(value)) {\n          target[property] = value;\n        } else {\n          target[property] = createScope(value, this);\n        }\n\n        if (oldValue !== value) {\n          let expectedTarget = this.$target;\n          let listeners = [];\n          // Handle the case where we need to start observing object after a watcher has been set\n          if (isUndefined(oldValue) && isObject(target[property])) {\n            if (!this.objectListeners.has(target[property])) {\n              this.objectListeners.set(target[property], [property]);\n            }\n            for (const k of Object.keys(value)) {\n              this.watchers.get(k)?.forEach((l) => listeners.push(l));\n              // overwhrite the context so we pass the owneship test in filter\n              expectedTarget = value;\n            }\n          }\n\n          if (Array.isArray(target)) {\n            this.watchers.get(\"length\")?.forEach((l) => listeners.push(l));\n          }\n\n          this.watchers.get(property)?.forEach((l) => listeners.push(l));\n          if (listeners.length > 0) {\n            // check if the listener actually appllies to this target\n            this.#scheduleListener(listeners, (x) => {\n              return x.filter((x) => {\n                if (!x.watchProp) return true;\n                // Compute the expected target based on `watchProp`\n                const wrapperExpr = x.watchProp.split(\".\").slice(0, -1).join(\".\");\n                const expectedHandler = $parse(wrapperExpr)(\n                  x.originalTarget,\n                )?.$handler;\n                return expectedTarget === expectedHandler?.$target;\n              });\n            });\n          }\n\n          let foreignListeners = this.foreignListeners.get(property);\n\n          if (!foreignListeners && this.$parent?.foreignListeners) {\n            foreignListeners = this.$parent.foreignListeners.get(property);\n          }\n          if (foreignListeners) {\n            // filter for repeaters\n            if (this.$target.$$hashKey) {\n              foreignListeners = foreignListeners.filter((x) =>\n                x.originalTarget.$$hashKey\n                  ? x.originalTarget.$$hashKey == this.$target.$$hashKey\n                  : false,\n              );\n            }\n\n            this.#scheduleListener(foreignListeners);\n          }\n        }\n\n        if (this.objectListeners.has(proxy) && property !== \"length\") {\n          let keys = this.objectListeners.get(proxy);\n          keys.forEach((key) => {\n            const listeners = this.watchers.get(key);\n            if (listeners) {\n              if (this.scheduled !== listeners) {\n                this.#scheduleListener(listeners);\n              }\n            }\n          });\n        }\n\n        return true;\n      }\n    }\n\n    /**\n     * Intercepts property access on the target object. It checks for specific\n     * properties (`watch` and `sync`) and binds their methods. For other properties,\n     * it returns the value directly.\n     *\n     * @param {Object} target - The target object.\n     * @param {string|number|symbol} property - The name of the property being accessed.\n     * @param {Proxy} proxy - The proxy object being invoked\n     * @returns {*} - The value of the property or a method if accessing `watch` or `sync`.\n     */\n    get(target, property, proxy) {\n      if (property === \"$$watchersCount\") return calculateWatcherCount(this);\n      if (property === isProxySymbol) return true;\n\n      if (target[property] && isProxy(target[property])) {\n        this.$proxy = target[property];\n      } else {\n        this.$proxy = proxy;\n      }\n\n      this.propertyMap = {\n        $watch: this.$watch.bind(this),\n        $new: this.$new.bind(this),\n        $newIsolate: this.$newIsolate.bind(this),\n        $destroy: this.$destroy.bind(this),\n        $eval: this.$eval.bind(this),\n        $apply: this.$apply.bind(this),\n        $postUpdate: this.$postUpdate.bind(this),\n        $isRoot: this.#isRoot.bind(this),\n        $target: target,\n        $proxy: this.$proxy,\n        $on: this.$on.bind(this),\n        $emit: this.$emit.bind(this),\n        $broadcast: this.$broadcast.bind(this),\n        $transcluded: this.$transcluded.bind(this),\n        $handler: /** @type {Scope} */ (this),\n        $parent: this.$parent,\n        $root: this.$root,\n        $children: this.$children,\n        $id: this.$id,\n        $merge: this.$merge.bind(this),\n        $getById: this.$getById.bind(this),\n      };\n\n      if (\n        Array.isArray(target) &&\n        [\"pop\", \"shift\", \"unshift\"].includes(/** @type { string } */ (property))\n      ) {\n        if (this.objectListeners.has(proxy)) {\n          let keys = this.objectListeners.get(this.$proxy);\n          keys.forEach((key) => {\n            const listeners = this.watchers.get(key);\n            if (listeners) {\n              this.scheduled = listeners;\n            }\n          });\n        }\n\n        // TODO aditional testing\n        if (property === \"unshift\") {\n          this.#scheduleListener(this.scheduled);\n        }\n      }\n\n      if (hasOwn(this.propertyMap, property)) {\n        this.$target = target;\n        return this.propertyMap[property];\n      } else {\n        // we are a simple getter\n        return target[property];\n      }\n    }\n\n    deleteProperty(target, property) {\n      // Currently deletes $model\n      if (target[property] && target[property][isProxySymbol]) {\n        target[property] = undefined;\n\n        let listeners = this.watchers.get(property);\n        if (listeners) {\n          this.#scheduleListener(listeners);\n        }\n        if (this.objectListeners.has(this.$proxy)) {\n          let keys = this.objectListeners.get(this.$proxy);\n          keys.forEach((key) => {\n            listeners = this.watchers.get(key);\n            if (listeners) {\n              this.#scheduleListener(listeners);\n            }\n          });\n        }\n\n        if (this.scheduled) {\n          this.#scheduleListener(this.scheduled);\n          this.scheduled = [];\n        }\n        return true;\n      }\n\n      delete target[property];\n\n      if (this.objectListeners.has(this.$proxy)) {\n        let keys = this.objectListeners.get(this.$proxy);\n        keys.forEach((key) => {\n          const listeners = this.watchers.get(key);\n          if (listeners) {\n            this.#scheduleListener(listeners);\n          }\n        });\n      } else {\n        const listeners = this.watchers.get(property);\n        if (listeners) {\n          this.#scheduleListener(listeners, target[property]);\n        }\n      }\n\n      return true;\n    }\n\n    /** @internal **/\n    #checkeListenersForAllKeys(value) {\n      if (isUndefined(value)) {\n        return;\n      }\n      Object.keys(value).forEach((k) => {\n        const listeners = this.watchers.get(k);\n\n        if (listeners) {\n          this.#scheduleListener(listeners);\n        }\n        if (isObject(value[k])) {\n          this.#checkeListenersForAllKeys(value[k]);\n        }\n      });\n    }\n\n    /**\n     * @param {Listener[]} listeners\n     * @param {Function} filter\n     */\n    #scheduleListener(listeners, filter = (val) => val) {\n      Promise.resolve().then(() => {\n        let index = 0;\n        let filteredListeners = filter(listeners);\n        while (index < filteredListeners.length) {\n          const listener = filteredListeners[index];\n          if (listener.foreignListener) {\n            listener.foreignListener.#notifyListener(listener, this.$target);\n          } else {\n            this.#notifyListener(listener, this.$target);\n          }\n          index++;\n        }\n      });\n    }\n\n    /**\n     * Registers a watcher for a property along with a listener function. The listener\n     * function is invoked when changes to that property are detected.\n     *\n     * @param {string} watchProp - An expression to be watched in the context of this model.\n     * @param {ListenerFunction} [listenerFn] - A function to execute when changes are detected on watched context.\n     * @param {boolean} [lazy] - A flag to indicate if the listener should be invoked immediately. Defaults to false.\n     */\n    $watch(watchProp, listenerFn, lazy = false) {\n      assert(isString(watchProp), \"Watched property required\");\n      watchProp = watchProp.trim();\n      const get = $parse(watchProp);\n\n      // Constant are immediately passed to listener function\n      if (get.constant) {\n        if (listenerFn) {\n          Promise.resolve().then(() => {\n            let res = get();\n            while (isFunction(res)) {\n              res = res();\n            }\n            listenerFn(res, this.$target);\n          });\n        }\n        return () => {};\n      }\n\n      /** @type {Listener} */\n      const listener = {\n        originalTarget: this.$target,\n        listenerFn: listenerFn,\n        watchFn: get,\n        scopeId: this.$id,\n        id: nextUid(),\n        property: [],\n      };\n      // simplest case\n      let key = get.decoratedNode.body[0].expression.name;\n      let keySet = [];\n\n      let type = get.decoratedNode.body[0].expression.type;\n      switch (type) {\n        // 1\n        case ASTType.Program: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n        // 2\n        case ASTType.ExpressionStatement: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n        // 3\n        case ASTType.AssignmentExpression:\n          // assignment calls without listener functions\n          if (!listenerFn) {\n            let res = get(this.$target);\n            while (isFunction(res)) {\n              res = res(this.$target);\n            }\n            Promise.resolve().then(res);\n            return () => {};\n          }\n          key = get.decoratedNode.body[0].expression.left.name;\n          break;\n        // 4\n        case ASTType.ConditionalExpression: {\n          key = get.decoratedNode.body[0].expression.toWatch[0]?.test?.name;\n          listener.property.push(key);\n          break;\n        }\n        // 5\n        case ASTType.LogicalExpression: {\n          let keys = [];\n          keys.push(get.decoratedNode.body[0].expression.left.toWatch[0]?.name);\n          keys.push(get.decoratedNode.body[0].expression.right.toWatch[0]?.name);\n          keys.forEach((key) => {\n            this.#registerKey(key, listener);\n          });\n          return () => {\n            keys.forEach((key) => {\n              this.#deregisterKey(key, listener.id);\n            });\n          };\n        }\n        // 6\n        case ASTType.BinaryExpression: {\n          let expr = get.decoratedNode.body[0].expression.toWatch[0];\n          key = expr.property ? expr.property.name : expr.name;\n          if (!key) {\n            throw new Error(\"Unable to determine key\");\n          }\n          listener.property.push(key);\n          break;\n        }\n        // 7\n        case ASTType.UnaryExpression: {\n          let expr = get.decoratedNode.body[0].expression.toWatch[0];\n          key = expr.property ? expr.property.name : expr.name;\n          if (!key) {\n            throw new Error(\"Unable to determine key\");\n          }\n          listener.property.push(key);\n          break;\n        }\n        // 8 function\n        case ASTType.CallExpression: {\n          let keys = [];\n          get.decoratedNode.body[0].expression.toWatch.forEach((x) => {\n            if (isDefined(x)) {\n              keys.push(x.name);\n            }\n          });\n          keys.forEach((key) => {\n            this.#registerKey(key, listener);\n            this.#scheduleListener([listener]);\n          });\n\n          return () => {\n            keys.forEach((key) => {\n              this.#deregisterKey(key, listener.id);\n            });\n          };\n        }\n\n        // 9\n        case ASTType.MemberExpression: {\n          key = get.decoratedNode.body[0].expression.property.name;\n\n          // array watcher\n          if (!key) {\n            key = get.decoratedNode.body[0].expression.object.name;\n          }\n\n          listener.property.push(key);\n          if (watchProp !== key) {\n            // Handle nested expression call\n            listener.watchProp = watchProp;\n\n            let potentialProxy = $parse(\n              watchProp.split(\".\").slice(0, -1).join(\".\"),\n            )(listener.originalTarget);\n            if (potentialProxy && this.foreignProxies.has(potentialProxy)) {\n              potentialProxy.$handler.#registerForeignKey(key, listener);\n              potentialProxy.$handler.#scheduleListener([listener]);\n              return () => {\n                return potentialProxy.$handler.#deregisterKey(key, listener.id);\n              };\n            }\n          }\n          break;\n        }\n\n        // 10\n        case ASTType.Identifier: {\n          listener.property.push(get.decoratedNode.body[0].expression.name);\n          break;\n        }\n\n        // 11\n        case ASTType.Literal: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n\n        // 12\n        case ASTType.ArrayExpression: {\n          let keys = get.decoratedNode.body[0].expression.elements\n            .map((x) => {\n              switch (x.type) {\n                case 11:\n                  return x.value;\n                default:\n                  return x.toWatch[0].name;\n              }\n            })\n            .filter((x) => !!x);\n          keys.forEach((key) => {\n            this.#registerKey(key, listener);\n            this.#scheduleListener([listener]);\n          });\n          return () => {\n            keys.forEach((key) => {\n              this.#deregisterKey(key, listener.id);\n            });\n          };\n        }\n\n        // 13\n        case ASTType.Property: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n\n        // 14\n        case ASTType.ObjectExpression: {\n          get.decoratedNode.body[0].expression.properties.forEach((prop) => {\n            if (prop.key.isPure === false) {\n              keySet.push(prop.key.name);\n              listener.property.push(key);\n            } else {\n              if (prop.value.name) {\n                keySet.push(prop.value.name);\n                listener.property.push(key);\n              } else {\n                const target = get.decoratedNode.body[0].expression.toWatch[0];\n                key = target.property ? target.property.name : target.name;\n                listener.property.push(key);\n              }\n            }\n          });\n\n          // key = get.decoratedNode.body[0].expression.toWatch[0].name;\n          // listener.property.push(key);\n          break;\n        }\n\n        // 15\n        case ASTType.ThisExpression: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n\n        // 16\n        case ASTType.LocalsExpression: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n\n        // 17\n        case ASTType.NGValueParameter: {\n          throw new Error(\"Unsupported type \" + type);\n        }\n      }\n\n      // if the target is an object, then start observing it\n      let listenerObject = listener.watchFn(this.$target);\n      if (isObject(listenerObject)) {\n        this.objectListeners.set(listenerObject, [key]);\n      }\n\n      if (keySet.length > 0) {\n        keySet.forEach((key) => {\n          this.#registerKey(key, listener);\n        });\n      } else {\n        this.#registerKey(key, listener);\n      }\n\n      if (!lazy) {\n        this.#scheduleListener([listener]);\n      }\n      return () => {\n        if (keySet.length > 0) {\n          let res = true;\n          keySet.forEach((key) => {\n            let success = this.#deregisterKey(key, listener.id);\n            if (!success) {\n              res = false;\n            }\n          });\n          return res;\n        } else {\n          return this.#deregisterKey(key, listener.id);\n        }\n      };\n    }\n\n    $new(childInstance) {\n      let child;\n      if (childInstance) {\n        if (Object.getPrototypeOf(childInstance) === Object.prototype) {\n          Object.setPrototypeOf(childInstance, this.$target);\n        } else {\n          if (Object.getPrototypeOf(childInstance) == this.$target) {\n            Object.setPrototypeOf(childInstance, this.$target);\n          } else {\n            Object.setPrototypeOf(\n              Object.getPrototypeOf(childInstance) || childInstance,\n              this.$target,\n            );\n          }\n        }\n\n        child = childInstance;\n      } else {\n        child = Object.create(this.$target);\n        // child.$parent = this.$parent;\n      }\n\n      const proxy = new Proxy(child, new Scope(this));\n      this.$children.push(proxy);\n      return proxy;\n    }\n\n    $newIsolate(instance) {\n      let child = instance ? Object.create(instance) : Object.create(null);\n      const proxy = new Proxy(child, new Scope(this, this.$root));\n      this.$children.push(proxy);\n      return proxy;\n    }\n\n    $transcluded(parentInstance) {\n      let child = Object.create(this.$target);\n      const proxy = new Proxy(child, new Scope(this, parentInstance));\n      this.$children.push(proxy);\n      return proxy;\n    }\n\n    /** @internal **/\n    #registerKey(key, listener) {\n      if (this.watchers.has(key)) {\n        this.watchers.get(key).push(listener);\n      } else {\n        this.watchers.set(key, [listener]);\n      }\n    }\n\n    /** @internal **/\n    #registerForeignKey(key, listener) {\n      if (this.foreignListeners.has(key)) {\n        this.foreignListeners.get(key).push(listener);\n      } else {\n        this.foreignListeners.set(key, [listener]);\n      }\n    }\n\n    #deregisterKey(key, id) {\n      const listenerList = this.watchers.get(key);\n      if (!listenerList) return false;\n\n      const index = listenerList.findIndex((x) => x.id === id);\n      if (index === -1) return false;\n\n      listenerList.splice(index, 1);\n      if (listenerList.length) {\n        this.watchers.set(key, listenerList);\n      } else {\n        this.watchers.delete(key);\n      }\n      return true;\n    }\n\n    // deregisterForeignKey(key, id) {\n    //   const listenerList = this.foreignListeners.get(key);\n    //   if (!listenerList) return false;\n\n    //   const index = listenerList.findIndex((x) => x.id === id);\n    //   if (index === -1) return false;\n\n    //   listenerList.splice(index, 1);\n    //   if (listenerList.length) {\n    //     this.foreignListeners.set(key, listenerList);\n    //   } else {\n    //     this.foreignListeners.delete(key);\n    //   }\n    //   return true;\n    // }\n\n    $eval(expr, locals) {\n      const fn = $parse(expr);\n      const res = fn(this, locals);\n      if (isUndefined(res) || res === null) {\n        return res;\n      }\n\n      if (res[\"name\"] === Object.hasOwnProperty[\"name\"]) {\n        return res;\n      }\n      if (isFunction(res)) {\n        return res();\n      }\n\n      if (Number.isNaN(res)) {\n        return 0;\n      }\n\n      return res;\n    }\n\n    /**\n     * @param {Object} newTarget\n     */\n    $merge(newTarget) {\n      Object.entries(newTarget).forEach(([key, value]) => {\n        this.set(this.$target, key, value, this.$proxy);\n      });\n    }\n\n    /**\n     * @param {import('../../interface.js').Expression} expr\n     * @returns {any}\n     */\n    $apply(expr) {\n      try {\n        return $parse(expr)(this.$proxy);\n      } catch (e) {\n        $exceptionHandler(e);\n      }\n    }\n\n    /**\n     * @param {string} name\n     * @param {Function} listener\n     * @returns {(function(): void)|*}\n     */\n    $on(name, listener) {\n      let namedListeners = this.$$listeners.get(name);\n      if (!namedListeners) {\n        namedListeners = [];\n        this.$$listeners.set(name, namedListeners);\n      }\n      namedListeners.push(listener);\n\n      return () => {\n        const indexOfListener = namedListeners.indexOf(listener);\n        if (indexOfListener !== -1) {\n          namedListeners.splice(indexOfListener, 1);\n          if (namedListeners.length == 0) {\n            this.$$listeners.delete(name);\n          }\n        }\n      };\n    }\n\n    /**\n     * @param {string} name\n     * @param  {...any} args\n     * @returns {void}\n     */\n    $emit(name, ...args) {\n      return this.#eventHelper(\n        { name: name, event: undefined, broadcast: false },\n        ...args,\n      );\n    }\n\n    /**\n     * @param {string} name\n     * @param  {...any} args\n     * @returns {any}\n     */\n    $broadcast(name, ...args) {\n      return this.#eventHelper(\n        { name: name, event: undefined, broadcast: true },\n        ...args,\n      );\n    }\n\n    /**\n     * @internal\n     * @returns {any}\n     */\n    #eventHelper({ name, event, broadcast }, ...args) {\n      if (!broadcast) {\n        if (!this.$$listeners.has(name)) {\n          if (this.$parent) {\n            return this.$parent.$handler.#eventHelper(\n              { name: name, event: event, broadcast: broadcast },\n              ...args,\n            );\n          }\n          return;\n        }\n      }\n      if (event) {\n        event.currentScope = this.$target;\n      } else {\n        event = event || {\n          name,\n          targetScope: this.$target,\n          currentScope: this.$target,\n          stopped: false,\n          stopPropagation() {\n            event.stopped = true;\n          },\n          preventDefault() {\n            event.defaultPrevented = true;\n          },\n          defaultPrevented: false,\n        };\n      }\n\n      const listenerArgs = concat([event], [event].concat(args), 1);\n      let listeners = this.$$listeners.get(name);\n      if (listeners) {\n        let length = listeners.length;\n        for (let i = 0; i < length; i++) {\n          try {\n            let cb = listeners[i];\n            cb.apply(null, listenerArgs);\n            if (listeners.length !== length) {\n              if (listeners.length < length) {\n                i--;\n              }\n              length = listeners.length;\n            }\n          } catch (e) {\n            $exceptionHandler(e);\n          }\n        }\n      }\n\n      event.currentScope = null;\n\n      if (event.stopped) {\n        return event;\n      }\n\n      if (broadcast) {\n        if (this.$children.length > 0) {\n          this.$children.forEach((child) => {\n            event = child[\"$handler\"].#eventHelper(\n              { name: name, event: event, broadcast: broadcast },\n              ...args,\n            );\n          });\n        }\n        return event;\n      } else {\n        if (this.$parent) {\n          return this.$parent.#eventHelper(\n            { name: name, event: event, broadcast: broadcast },\n            ...args,\n          );\n        } else {\n          return event;\n        }\n      }\n    }\n\n    /**\n     * @internal\n     * @returns {boolean}\n     */\n    #isRoot() {\n      return this.$root == /** @type {Scope} */ (this);\n    }\n\n    $postUpdate(fn) {\n      $postUpdateQueue.push(fn);\n    }\n\n    $destroy() {\n      if (this.$$destroyed) return;\n\n      this.$broadcast(\"$destroy\");\n      Array.from(this.watchers.entries()).forEach(([key, val]) => {\n        this.watchers.set(\n          key,\n          val.filter((x) => x.scopeId !== this.$id),\n        );\n      });\n\n      if (this.#isRoot()) {\n        this.watchers.clear();\n      } else {\n        let i = this.$parent.$children.filter((x) => x.$id == this.$id)[0];\n        this.$parent.$children.splice(this.$parent.$children.indexOf(i), 1);\n      }\n\n      this.$$listeners.clear();\n\n      this.$$destroyed = true;\n    }\n\n    /**\n     * @internal\n     * @param {Listener} listener - The property path that was changed.\n     */\n    #notifyListener(listener, target) {\n      const { originalTarget, listenerFn, watchFn } = listener;\n      try {\n        let newVal = watchFn(originalTarget);\n        if (isUndefined(newVal)) {\n          newVal = watchFn(target);\n        }\n        if (isFunction(newVal)) {\n          newVal = newVal(originalTarget);\n        }\n\n        if (Array.isArray(newVal)) {\n          newVal.forEach((x, index) => {\n            if (isFunction(x)) {\n              newVal[index] = x(originalTarget);\n            }\n          });\n        }\n        listenerFn(newVal, originalTarget);\n        this.$$asyncQueue.forEach((x) => {\n          if (x.handler.$id == this.$id) {\n            Promise.resolve().then(x.fn(x.handler, x.locals));\n          }\n        });\n\n        while ($postUpdateQueue.length) {\n          $postUpdateQueue.shift()();\n        }\n      } catch (e) {\n        $exceptionHandler(e);\n      }\n    }\n\n    /**\n     * Searches the scope instance\n     *\n     * @param {string|number}id\n     * @returns {Scope|undefined}\n     */\n    $getById(id) {\n      if (isString(id)) {\n        id = parseInt(/** @type {string} */ (id), 10);\n      }\n      if (this.$id === id) {\n        return this;\n      } else {\n        let res = undefined;\n        for (const child of this.$children) {\n          let found = child.$getById(id);\n          if (found) {\n            res = found;\n            break;\n          }\n        }\n        return res;\n      }\n    }\n  }\n\n  /*------------- Private helpers -------------*/\n\n  /**\n   * @param {Scope} model\n   * @returns {number}\n   */\n  function calculateWatcherCount(model) {\n    const childIds = collectChildIds(model).add(model.$id);\n\n    return Array.from(model.watchers.values()).reduce(\n      (count, watcherArray) =>\n        count +\n        watcherArray.reduce(\n          (subCount, watcher) =>\n            subCount + (childIds.has(watcher.scopeId) ? 1 : 0),\n          0,\n        ),\n      0,\n    );\n  }\n\n  /**\n   * @param {Scope} child\n   * @returns {Set<number>}\n   */\n  function collectChildIds(child) {\n    const ids = new Set([child.$id]);\n    child.$children?.forEach((c) => {\n      collectChildIds(c).forEach((id) => ids.add(id));\n    });\n    return ids;\n  }\n\n  const $templateRequestMinErr = minErr(\"$templateRequest\");\n\n  /**\n   * Used to configure the options passed to the {@link $http} service when making a template request.\n   *\n   * For example, it can be used for specifying the \"Accept\" header that is sent to the server, when\n   * requesting a template.\n   */\n  function TemplateRequestProvider() {\n    let httpOptions;\n\n    /**\n     * The options to be passed to the {@link $http} service when making the request.\n     * You can use this to override options such as the \"Accept\" header for template requests.\n     * The {@link $templateRequest} will set the `cache` and the `transformResponse` properties of the\n     * options if not overridden here.\n     *\n     * @param {string=} val new value for the {@link $http} options.\n     * @returns {string|TemplateRequestProvider} Returns the {@link $http} options when used as getter and self if used as setter.\n     */\n    this.httpOptions = function (val) {\n      if (val) {\n        httpOptions = val;\n        return this;\n      }\n      return httpOptions;\n    };\n\n    /**\n     * The `$templateRequest` service runs security checks then downloads the provided template using\n     * `$http` and, upon success, stores the contents inside of `$templateCache`. If the HTTP request\n     * fails or the response data of the HTTP request is empty, a `$compile` error will be thrown (the\n     * exception can be thwarted by setting the 2nd parameter of the function to true). Note that the\n     * contents of `$templateCache` are trusted, so the call to `$sce.getTrustedUrl(tpl)` is omitted\n     * when `tpl` is of type string and `$templateCache` has the matching entry.\n     *\n     * If you want to pass custom options to the `$http` service, such as setting the Accept header you\n     * can configure this via {@link $templateRequestProvider#httpOptions}.\n     *\n     * `$templateRequest` is used internally by {@link $compile}, {@link ngRoute.$route}, and directives such\n     * as {@link ngInclude} to download and cache templates.\n     *\n     * 3rd party modules should use `$templateRequest` if their services or directives are loading\n     * templates.\n     *\n     * @param {string} tpl The HTTP request template URL\n     * @param {boolean=} ignoreRequestError Whether or not to ignore the exception when the request fails or the template is empty\n     *\n     * @return {Promise} a promise for the HTTP response data of the given URL.\n     *\n     * @property {number} totalPendingRequests total amount of pending template requests being downloaded.\n     */\n    this.$get = [\n      \"$exceptionHandler\",\n      \"$templateCache\",\n      \"$http\",\n      \"$sce\",\n      /**\n       *\n       * @param {import('./exception/exception-handler.js').ErrorHandler} $exceptionHandler\n       * @param {import('../services/template-cache/interface.ts').TemplateCache} $templateCache\n       * @param {import(\"interface.ts\").HttpService} $http\n       * @param {*} $sce\n       * @returns\n       */\n      function ($exceptionHandler, $templateCache, $http, $sce) {\n        function handleRequestFn(tpl, ignoreRequestError) {\n          handleRequestFn.totalPendingRequests++;\n\n          // We consider the template cache holds only trusted templates, so\n          // there's no need to go through adding the template again to the trusted\n          // resources for keys that already are included in there. This also makes\n          // AngularTS accept any script directive, no matter its name. However, we\n          // still need to unwrap trusted types.\n\n          if (!isString(tpl) || !$templateCache.has(tpl)) {\n            try {\n              tpl = $sce.getTrustedResourceUrl(tpl);\n              if (!tpl) {\n                return Promise.reject(\"Template not found\");\n              }\n            } catch (e) {\n              return Promise.reject(e.message);\n            }\n          }\n\n          let transformResponse =\n            $http.defaults && $http.defaults.transformResponse;\n\n          if (Array.isArray(transformResponse)) {\n            transformResponse = transformResponse.filter(function (transformer) {\n              return transformer !== defaultHttpResponseTransform;\n            });\n          } else if (transformResponse === defaultHttpResponseTransform) {\n            transformResponse = null;\n          }\n\n          return $http\n            .get(\n              tpl,\n              extend(\n                {\n                  cache: $templateCache,\n                  transformResponse: transformResponse,\n                },\n                httpOptions,\n              ),\n            )\n            .finally(function () {\n              handleRequestFn.totalPendingRequests--;\n            })\n            .then(function (response) {\n              $templateCache.set(tpl, response.data);\n              return response.data;\n            }, handleError);\n\n          function handleError(resp) {\n            if (!ignoreRequestError) {\n              resp = $templateRequestMinErr(\n                \"tpload\",\n                \"Failed to load template: {0} (HTTP status: {1} {2})\",\n                tpl,\n                resp.status,\n                resp.statusText,\n              );\n\n              $exceptionHandler(resp);\n            }\n\n            return Promise.reject(resp);\n          }\n        }\n\n        handleRequestFn.totalPendingRequests = 0;\n\n        return handleRequestFn;\n      },\n    ];\n  }\n\n  /** @typedef {import('../../interface.ts').ServiceProvider} ServiceProvider */\n\n  /**\n   * Private service to sanitize uris for links and images. Used by $compile.\n   * @implements {ServiceProvider}\n   */\n  class SanitizeUriProvider {\n    constructor() {\n      /**\n       * @private\n       * @type {RegExp}\n       */\n      this._aHrefSanitizationTrustedUrlList =\n        /^\\s*(https?|s?ftp|mailto|tel|file):/;\n\n      /**\n       * @private\n       * @type {RegExp}\n       */\n      this._imgSrcSanitizationTrustedUrlList =\n        /^\\s*((https?|ftp|file|blob):|data:image\\/)/;\n    }\n\n    /**\n     * Retrieves or overrides the regexp used to trust URLs for a[href] sanitization.\n     *\n     * @param {RegExp=} regexp New regexp to trust URLs with.\n     * @returns {RegExp|SanitizeUriProvider} Current regexp if no param, or self for chaining.\n     */\n    aHrefSanitizationTrustedUrlList(regexp) {\n      if (isDefined(regexp)) {\n        this._aHrefSanitizationTrustedUrlList = regexp;\n        return this;\n      }\n      return this._aHrefSanitizationTrustedUrlList;\n    }\n\n    /**\n     * Retrieves or overrides the regexp used to trust URLs for img[src] sanitization.\n     *\n     * @param {RegExp=} regexp New regexp to trust URLs with.\n     * @returns {RegExp|SanitizeUriProvider} Current regexp if no param, or self for chaining.\n     */\n    imgSrcSanitizationTrustedUrlList(regexp) {\n      if (isDefined(regexp)) {\n        this._imgSrcSanitizationTrustedUrlList = regexp;\n        return this;\n      }\n      return this._imgSrcSanitizationTrustedUrlList;\n    }\n\n    /**\n     * @returns {import(\"./interface\").SanitizerFn}\n     */\n    $get() {\n      return (uri, isMediaUrl) => {\n        if (!uri) return uri;\n\n        /** @type {RegExp} */\n        const regex = isMediaUrl\n          ? this._imgSrcSanitizationTrustedUrlList\n          : this._aHrefSanitizationTrustedUrlList;\n\n        const normalizedVal = urlResolve(uri.trim()).href;\n\n        if (normalizedVal !== \"\" && !normalizedVal.match(regex)) {\n          return `unsafe:${normalizedVal}`;\n        }\n        return uri;\n      };\n    }\n  }\n\n  const ACTIVE_CLASS = \"ng-active\";\n  const INACTIVE_CLASS = \"ng-inactive\";\n\n  class NgMessageCtrl {\n    /**\n     * @param {Element} $element\n     * @param {import('../../core/scope/scope.js').Scope} $scope\n     * @param {import('../../core/compile/attributes').Attributes} $attrs\n     * @param {*} $animate\n     */\n    constructor($element, $scope, $attrs, $animate) {\n      this.$element = $element;\n      this.$scope = $scope;\n      this.$attrs = $attrs;\n      this.$animate = $animate;\n\n      this.latestKey = 0;\n      this.nextAttachId = 0;\n      this.messages = {};\n      this.renderLater = false;\n      this.cachedCollection = null;\n\n      this.head = undefined;\n      this.default = undefined;\n\n      this.$scope.$watch(\n        this.$attrs[\"ngMessages\"] || this.$attrs[\"for\"],\n        this.render.bind(this),\n      );\n    }\n\n    getAttachId() {\n      return this.nextAttachId++;\n    }\n\n    render(collection = {}) {\n      this.renderLater = false;\n      this.cachedCollection = collection;\n\n      const multiple =\n        isAttrTruthy(this.$scope, this.$attrs[\"ngMessagesMultiple\"]) ||\n        isAttrTruthy(this.$scope, this.$attrs[\"multiple\"]);\n\n      const unmatchedMessages = [];\n      const matchedKeys = {};\n      let truthyKeys = 0;\n      let messageItem = this.head;\n      let messageFound = false;\n      let totalMessages = 0;\n\n      while (messageItem) {\n        totalMessages++;\n        const messageCtrl = messageItem.message;\n        let messageUsed = false;\n\n        if (!messageFound) {\n          Object.entries(collection).forEach(([key, value]) => {\n            if (truthy(value) && !messageUsed) {\n              truthyKeys++;\n\n              if (messageCtrl.test(key)) {\n                if (matchedKeys[key]) return;\n                matchedKeys[key] = true;\n\n                messageUsed = true;\n                messageCtrl.attach();\n              }\n            }\n          });\n        }\n\n        if (messageUsed) {\n          messageFound = !multiple;\n        } else {\n          unmatchedMessages.push(messageCtrl);\n        }\n\n        messageItem = messageItem.next;\n      }\n\n      unmatchedMessages.forEach((messageCtrl) => {\n        messageCtrl.detach();\n      });\n\n      const messageMatched = unmatchedMessages.length !== totalMessages;\n      const attachDefault = this.default && !messageMatched && truthyKeys > 0;\n\n      if (attachDefault) {\n        this.default.attach();\n      } else if (this.default) {\n        this.default.detach();\n      }\n\n      if (messageMatched || attachDefault) {\n        this.$animate.setClass(this.$element, ACTIVE_CLASS, INACTIVE_CLASS);\n      } else {\n        this.$animate.setClass(this.$element, INACTIVE_CLASS, ACTIVE_CLASS);\n      }\n    }\n\n    reRender() {\n      if (!this.renderLater) {\n        this.renderLater = true;\n        Promise.resolve().then(() => {\n          if (this.renderLater && this.cachedCollection) {\n            this.render(this.cachedCollection);\n          }\n        });\n      }\n    }\n\n    register(comment, messageCtrl, isDefault) {\n      if (isDefault) {\n        this.default = messageCtrl;\n      } else {\n        const nextKey = this.latestKey.toString();\n        this.messages[nextKey] = {\n          message: messageCtrl,\n        };\n        this.insertMessageNode(this.$element, comment, nextKey);\n        comment.$$ngMessageNode = nextKey;\n        this.latestKey++;\n      }\n\n      this.reRender();\n    }\n\n    deregister(comment, isDefault) {\n      if (isDefault) {\n        delete this.default;\n      } else {\n        const key = comment.$$ngMessageNode;\n        delete comment.$$ngMessageNode;\n        this.removeMessageNode(this.$element, comment, key);\n        delete this.messages[key];\n      }\n      this.reRender();\n    }\n\n    findPreviousMessage(parent, comment) {\n      let prevNode = comment;\n      const parentLookup = [];\n\n      while (prevNode && prevNode !== parent) {\n        const prevKey = prevNode.$$ngMessageNode;\n        if (prevKey && prevKey.length) {\n          return this.messages[prevKey];\n        }\n\n        if (prevNode.childNodes.length && parentLookup.indexOf(prevNode) === -1) {\n          parentLookup.push(prevNode);\n          prevNode = prevNode.childNodes[prevNode.childNodes.length - 1];\n        } else if (prevNode.previousSibling) {\n          prevNode = prevNode.previousSibling;\n        } else {\n          prevNode = prevNode.parentNode;\n          parentLookup.push(prevNode);\n        }\n      }\n    }\n\n    insertMessageNode(parent, comment, key) {\n      const messageNode = this.messages[key];\n      if (!this.head) {\n        this.head = messageNode;\n      } else {\n        const match = this.findPreviousMessage(parent, comment);\n        if (match) {\n          messageNode.next = match.next;\n          match.next = messageNode;\n        } else {\n          messageNode.next = this.head;\n          this.head = messageNode;\n        }\n      }\n    }\n\n    removeMessageNode(parent, comment, key) {\n      const messageNode = this.messages[key];\n\n      if (!messageNode) return;\n\n      const match = this.findPreviousMessage(parent, comment);\n      if (match) {\n        match.next = messageNode.next;\n      } else {\n        this.head = messageNode.next;\n      }\n    }\n  }\n\n  ngMessagesDirective.$inject = [\"$animate\"];\n  function ngMessagesDirective($animate) {\n    return {\n      require: \"ngMessages\",\n      restrict: \"AE\",\n      controller: ($element, $scope, $attrs) =>\n        new NgMessageCtrl($element, $scope, $attrs, $animate),\n    };\n  }\n\n  function isAttrTruthy(scope, attr) {\n    return (\n      (isString(attr) && attr.length === 0) || // empty attribute\n      truthy(scope.$eval(attr))\n    );\n  }\n\n  function truthy(val) {\n    return isString(val) ? val.length : !!val;\n  }\n\n  ngMessagesIncludeDirective.$inject = [\"$templateRequest\", \"$compile\"];\n  function ngMessagesIncludeDirective($templateRequest, $compile) {\n    return {\n      restrict: \"AE\",\n      require: \"^^ngMessages\", // we only require this for validation sake\n      link($scope, element, attrs) {\n        const src = attrs.ngMessagesInclude || attrs.src;\n        $templateRequest(src).then((html) => {\n          if ($scope.$$destroyed) return;\n          if (isString(html) && !html.trim()) ; else {\n            // Non-empty template - compile and link\n            $compile(html)($scope, (contents) => {\n              element.after(contents);\n            });\n          }\n        });\n      },\n    };\n  }\n\n  const ngMessageDirective = ngMessageDirectiveFactory(false);\n  const ngMessageExpDirective = ngMessageDirectiveFactory(false);\n  const ngMessageDefaultDirective = ngMessageDirectiveFactory(true);\n\n  /**\n   * @param {boolean} isDefault\n   * @returns {(any) => import(\"../../interface.js\").Directive}\n   */\n  function ngMessageDirectiveFactory(isDefault) {\n    ngMessageDirective.$inject = [\"$animate\"];\n    function ngMessageDirective($animate) {\n      return {\n        restrict: \"AE\",\n        transclude: \"element\",\n        priority: 1, // must run before ngBind, otherwise the text is set on the comment\n        terminal: true,\n        require: \"^^ngMessages\",\n        link(scope, element, attrs, ngMessagesCtrl, $transclude) {\n          let commentNode;\n          let records;\n          let staticExp;\n          let dynamicExp;\n\n          if (!isDefault) {\n            commentNode = element;\n            staticExp = attrs.ngMessage || attrs.when;\n            dynamicExp = attrs.ngMessageExp || attrs.whenExp;\n\n            const assignRecords = function (items) {\n              records = items\n                ? Array.isArray(items)\n                  ? items\n                  : items.split(/[\\s,]+/)\n                : null;\n              ngMessagesCtrl.reRender();\n            };\n\n            if (dynamicExp) {\n              assignRecords(scope.$eval(dynamicExp));\n              scope.$watch(dynamicExp, assignRecords);\n            } else {\n              assignRecords(staticExp);\n            }\n          }\n\n          let currentElement;\n          let messageCtrl;\n          ngMessagesCtrl.register(\n            commentNode,\n            (messageCtrl = {\n              test(name) {\n                return contains(records, name);\n              },\n              attach() {\n                if (!currentElement) {\n                  $transclude((elm, newScope) => {\n                    $animate.enter(elm, null, element);\n                    currentElement = elm;\n\n                    // Each time we attach this node to a message we get a new id that we can match\n                    // when we are destroying the node later.\n                    const $$attachId = (currentElement.$$attachId =\n                      ngMessagesCtrl.getAttachId());\n\n                    // in the event that the element or a parent element is destroyed\n                    // by another structural directive then it's time\n                    // to deregister the message from the controller\n                    currentElement.addEventListener(\"$destroy\", () => {\n                      // If the message element was removed via a call to `detach` then `currentElement` will be null\n                      // So this handler only handles cases where something else removed the message element.\n                      if (\n                        currentElement &&\n                        currentElement.$$attachId === $$attachId\n                      ) {\n                        ngMessagesCtrl.deregister(commentNode, isDefault);\n                        messageCtrl.detach();\n                      }\n                      newScope.$destroy();\n                    });\n                  });\n                }\n              },\n              detach() {\n                if (currentElement) {\n                  const elm = currentElement;\n                  currentElement = null;\n                  $animate.leave(elm);\n                }\n              },\n            }),\n            isDefault,\n          );\n\n          // We need to ensure that this directive deregisters itself when it no longer exists\n          // Normally this is done when the attached element is destroyed; but if this directive\n          // gets removed before we attach the message to the DOM there is nothing to watch\n          // in which case we must deregister when the containing scope is destroyed.\n          scope.$on(\"$destroy\", () => {\n            ngMessagesCtrl.deregister(commentNode, isDefault);\n          });\n        },\n      };\n    }\n    return ngMessageDirective;\n  }\n\n  function contains(collection, key) {\n    if (collection) {\n      return Array.isArray(collection)\n        ? collection.indexOf(key) >= 0\n        : hasOwn(collection, key);\n    }\n  }\n\n  const ARIA_DISABLE_ATTR = \"ngAriaDisable\";\n\n  /**\n   * Internal Utilities\n   */\n  const nativeAriaNodeNames = [\n    \"BUTTON\",\n    \"A\",\n    \"INPUT\",\n    \"TEXTAREA\",\n    \"SELECT\",\n    \"DETAILS\",\n    \"SUMMARY\",\n  ];\n\n  const isNodeOneOf = function (elem, nodeTypeArray) {\n    if (nodeTypeArray.indexOf(elem.nodeName) !== -1) {\n      return true;\n    }\n  };\n\n  /**\n   * Used for configuring the ARIA attributes injected and managed by ngAria.\n   *\n   * ```js\n   * angular.module('myApp', ['ngAria'], function config($ariaProvider) {\n   *   $ariaProvider.config({\n   *     ariaValue: true,\n   *     tabindex: false\n   *   });\n   * });\n   *```\n   *\n   * ## Dependencies\n   * Requires the {@link ngAria} module to be installed.\n   *\n   */\n  function AriaProvider() {\n    let config = {\n      ariaHidden: true,\n      ariaChecked: true,\n      ariaReadonly: true,\n      ariaDisabled: true,\n      ariaRequired: true,\n      ariaInvalid: true,\n      ariaValue: true,\n      tabindex: true,\n      bindKeydown: true,\n      bindRoleForClick: true,\n    };\n\n    this.config = function (newConfig) {\n      config = extend(config, newConfig);\n    };\n\n    function watchExpr(attrName, ariaAttr, nativeAriaNodeNames, negate) {\n      return function (scope, elem, attr) {\n        if (hasOwn(attr, ARIA_DISABLE_ATTR)) return;\n\n        const ariaCamelName = attr.$normalize(ariaAttr);\n        if (\n          config[ariaCamelName] &&\n          !isNodeOneOf(elem, nativeAriaNodeNames) &&\n          !attr[ariaCamelName]\n        ) {\n          scope.$watch(attr[attrName], (boolVal) => {\n            // ensure boolean value\n            boolVal = negate ? !boolVal : !!boolVal;\n            elem.setAttribute(ariaAttr, boolVal);\n          });\n        }\n      };\n    }\n\n    this.$get = function () {\n      return {\n        config(key) {\n          return config[key];\n        },\n        $$watchExpr: watchExpr,\n      };\n    };\n  }\n\n  ngDisabledAriaDirective.$inject = [$injectTokens.$aria];\n  function ngDisabledAriaDirective($aria) {\n    return $aria.$$watchExpr(\n      \"ngDisabled\",\n      \"aria-disabled\",\n      nativeAriaNodeNames,\n      false,\n    );\n  }\n\n  ngShowAriaDirective.$inject = [$injectTokens.$aria];\n  function ngShowAriaDirective($aria) {\n    return $aria.$$watchExpr(\"ngShow\", \"aria-hidden\", [], true);\n  }\n\n  function ngMessagesAriaDirective() {\n    return {\n      restrict: \"A\",\n      require: \"?ngMessages\",\n      link(_scope, elem, attr) {\n        if (hasOwn(attr, ARIA_DISABLE_ATTR)) return;\n\n        if (!elem.hasAttribute(\"aria-live\")) {\n          elem.setAttribute(\"aria-live\", \"assertive\");\n        }\n      },\n    };\n  }\n\n  ngClickAriaDirective.$inject = [$injectTokens.$aria, $injectTokens.$parse];\n  function ngClickAriaDirective($aria, $parse) {\n    return {\n      restrict: \"A\",\n      compile(_elem, attr) {\n        if (hasOwn(attr, ARIA_DISABLE_ATTR)) return;\n\n        const fn = $parse(attr.ngClick);\n\n        /**\n         * @param {Element} elem\n         */\n        return function (scope, elem, attr) {\n          if (!isNodeOneOf(elem, nativeAriaNodeNames)) {\n            if ($aria.config(\"bindRoleForClick\") && !elem.hasAttribute(\"role\")) {\n              elem.setAttribute(\"role\", \"button\");\n            }\n\n            if ($aria.config(\"tabindex\") && !elem.hasAttribute(\"tabindex\")) {\n              elem.setAttribute(\"tabindex\", \"0\");\n            }\n\n            if (\n              $aria.config(\"bindKeydown\") &&\n              !attr.ngKeydown &&\n              !attr.ngKeypress &&\n              !attr.ngKeyup\n            ) {\n              elem.addEventListener(\n                \"keydown\",\n                /** @param {KeyboardEvent} event */\n                (event) => {\n                  const keyCode = parseInt(event.key, 10);\n\n                  if (keyCode === 13 || keyCode === 32) {\n                    // If the event is triggered on a non-interactive element ...\n                    if (\n                      nativeAriaNodeNames.indexOf(\n                        /** @type {Node} */ (event.target).nodeName,\n                      ) === -1 &&\n                      !(\n                        /** @type {HTMLElement} */ (event.target)\n                          .isContentEditable\n                      )\n                    ) {\n                      // ... prevent the default browser behavior (e.g. scrolling when pressing spacebar)\n                      // See https://github.com/angular/angular.js/issues/16664\n                      event.preventDefault();\n                    }\n                    scope.$apply(callback);\n                  }\n\n                  function callback() {\n                    fn(scope, { $event: event });\n                  }\n                },\n              );\n            }\n          }\n        };\n      },\n    };\n  }\n\n  ngRequiredAriaDirective.$inject = [$injectTokens.$aria];\n  function ngRequiredAriaDirective($aria) {\n    return $aria.$$watchExpr(\n      \"ngRequired\",\n      \"aria-required\",\n      nativeAriaNodeNames,\n      false,\n    );\n  }\n\n  ngCheckedAriaDirective.$inject = [\"$aria\"];\n  function ngCheckedAriaDirective($aria) {\n    return $aria.$$watchExpr(\n      \"ngChecked\",\n      \"aria-checked\",\n      nativeAriaNodeNames,\n      false,\n    );\n  }\n\n  ngValueAriaDirective.$inject = [$injectTokens.$aria];\n  function ngValueAriaDirective($aria) {\n    return $aria.$$watchExpr(\n      \"ngValue\",\n      \"aria-checked\",\n      nativeAriaNodeNames,\n      false,\n    );\n  }\n\n  ngHideAriaDirective.$inject = [$injectTokens.$aria];\n  function ngHideAriaDirective($aria) {\n    return $aria.$$watchExpr(\"ngHide\", \"aria-hidden\", [], false);\n  }\n\n  ngReadonlyAriaDirective.$inject = [$injectTokens.$aria];\n  function ngReadonlyAriaDirective($aria) {\n    return $aria.$$watchExpr(\n      \"ngReadonly\",\n      \"aria-readonly\",\n      nativeAriaNodeNames,\n      false,\n    );\n  }\n\n  ngModelAriaDirective.$inject = [$injectTokens.$aria];\n  function ngModelAriaDirective($aria) {\n    function shouldAttachAttr(attr, normalizedAttr, elem, allowNonAriaNodes) {\n      return (\n        $aria.config(normalizedAttr) &&\n        !elem.getAttribute(attr) &&\n        (allowNonAriaNodes || !isNodeOneOf(elem, nativeAriaNodeNames)) &&\n        (elem.getAttribute(\"type\") !== \"hidden\" || elem.nodeName !== \"INPUT\")\n      );\n    }\n\n    function shouldAttachRole(role, elem) {\n      // if element does not have role attribute\n      // AND element type is equal to role (if custom element has a type equaling shape) <-- remove?\n      // AND element is not in nativeAriaNodeNames\n      return (\n        !elem.getAttribute(\"role\") &&\n        elem.getAttribute(\"type\") === role &&\n        !isNodeOneOf(elem, nativeAriaNodeNames)\n      );\n    }\n\n    function getShape(attr) {\n      const { type } = attr;\n      const { role } = attr;\n\n      return (type || role) === \"checkbox\" || role === \"menuitemcheckbox\"\n        ? \"checkbox\"\n        : (type || role) === \"radio\" || role === \"menuitemradio\"\n          ? \"radio\"\n          : type === \"range\" || role === \"progressbar\" || role === \"slider\"\n            ? \"range\"\n            : \"\";\n    }\n\n    return {\n      restrict: \"A\",\n      require: \"ngModel\",\n      priority: 200, // Make sure watches are fired after any other directives that affect the ngModel value\n      compile(elem, attr) {\n        if (hasOwn(attr, ARIA_DISABLE_ATTR)) return;\n\n        const shape = getShape(attr);\n\n        return {\n          post(scope, elem, attr, ngModel) {\n            const needsTabIndex = shouldAttachAttr(\n              \"tabindex\",\n              \"tabindex\",\n              elem,\n              false,\n            );\n\n            function getRadioReaction() {\n              // Strict comparison would cause a BC\n              elem.setAttribute(\n                \"aria-checked\",\n                (attr.value == ngModel.$viewValue).toString(),\n              );\n            }\n\n            function getCheckboxReaction() {\n              elem.setAttribute(\n                \"aria-checked\",\n                (!ngModel.$isEmpty(ngModel.$viewValue)).toString(),\n              );\n            }\n\n            switch (shape) {\n              case \"radio\":\n              case \"checkbox\":\n                if (shouldAttachRole(shape, elem)) {\n                  elem.setAttribute(\"role\", shape);\n                }\n                if (\n                  shouldAttachAttr(\"aria-checked\", \"ariaChecked\", elem, false)\n                ) {\n                  ngModel.$watch(\n                    \"$modelValue\",\n                    shape === \"radio\" ? getRadioReaction : getCheckboxReaction,\n                  );\n                }\n                if (needsTabIndex) {\n                  elem.setAttribute(\"tabindex\", 0);\n                }\n                break;\n              case \"range\":\n                if (shouldAttachRole(shape, elem)) {\n                  elem.setAttribute(\"role\", \"slider\");\n                }\n                if ($aria.config(\"ariaValue\")) {\n                  const needsAriaValuemin =\n                    !elem.hasAttribute(\"aria-valuemin\") &&\n                    (hasOwn(attr, \"min\") || hasOwn(attr, \"ngMin\"));\n                  const needsAriaValuemax =\n                    !elem.hasAttribute(\"aria-valuemax\") &&\n                    (hasOwn(attr, \"max\") || hasOwn(attr, \"ngMax\"));\n                  const needsAriaValuenow = !elem.hasAttribute(\"aria-valuenow\");\n\n                  if (needsAriaValuemin) {\n                    attr.$observe(\"min\", (newVal) => {\n                      elem.setAttribute(\"aria-valuemin\", newVal);\n                    });\n                  }\n                  if (needsAriaValuemax) {\n                    attr.$observe(\"max\", (newVal) => {\n                      elem.setAttribute(\"aria-valuemax\", newVal);\n                    });\n                  }\n                  if (needsAriaValuenow) {\n                    ngModel.$watch(\"$modelValue\", (newVal) => {\n                      elem.setAttribute(\"aria-valuenow\", newVal);\n                    });\n                  }\n                }\n                if (needsTabIndex) {\n                  elem.setAttribute(\"tabindex\", 0);\n                }\n                break;\n            }\n\n            if (\n              !hasOwn(attr, \"ngRequired\") &&\n              ngModel.$validators.required &&\n              shouldAttachAttr(\"aria-required\", \"ariaRequired\", elem, false)\n            ) {\n              // ngModel.$error.required is undefined on custom controls\n              attr.$observe(\"required\", () => {\n                elem.setAttribute(\"aria-required\", (!!attr.required).toString());\n              });\n            }\n\n            if (shouldAttachAttr(\"aria-invalid\", \"ariaInvalid\", elem, true)) {\n              ngModel.$watch(\"$invalid\", (newVal) => {\n                elem.setAttribute(\"aria-invalid\", (!!newVal).toString());\n              });\n            }\n          },\n        };\n      },\n    };\n  }\n\n  ngDblclickAriaDirective.$inject = [$injectTokens.$aria];\n  function ngDblclickAriaDirective($aria) {\n    return function (scope, elem, attr) {\n      if (hasOwn(attr, ARIA_DISABLE_ATTR)) return;\n\n      if (\n        $aria.config(\"tabindex\") &&\n        !elem.hasAttribute(\"tabindex\") &&\n        !isNodeOneOf(elem, nativeAriaNodeNames)\n      ) {\n        elem.setAttribute(\"tabindex\", 0);\n      }\n    };\n  }\n\n  const ANIMATE_TIMER_KEY = \"$$animateCss\";\n\n  const ONE_SECOND = 1000;\n\n  const ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;\n  const CLOSING_TIME_BUFFER = 1.5;\n\n  const DETECT_CSS_PROPERTIES = {\n    transitionDuration: TRANSITION_DURATION_PROP,\n    transitionDelay: TRANSITION_DELAY_PROP,\n    transitionProperty: TRANSITION_PROP + PROPERTY_KEY,\n    animationDuration: ANIMATION_DURATION_PROP,\n    animationDelay: ANIMATION_DELAY_PROP,\n    animationIterationCount: ANIMATION_PROP + ANIMATION_ITERATION_COUNT_KEY,\n  };\n\n  const DETECT_STAGGER_CSS_PROPERTIES = {\n    transitionDuration: TRANSITION_DURATION_PROP,\n    transitionDelay: TRANSITION_DELAY_PROP,\n    animationDuration: ANIMATION_DURATION_PROP,\n    animationDelay: ANIMATION_DELAY_PROP,\n  };\n\n  function getCssKeyframeDurationStyle(duration) {\n    return [ANIMATION_DURATION_PROP, `${duration}s`];\n  }\n\n  function getCssDelayStyle(delay, isKeyframeAnimation) {\n    const prop = isKeyframeAnimation\n      ? ANIMATION_DELAY_PROP\n      : TRANSITION_DELAY_PROP;\n    return [prop, `${delay}s`];\n  }\n\n  function computeCssStyles(element, properties) {\n    const styles = Object.create(null);\n    const detectedStyles = window.getComputedStyle(element) || {};\n    Object.entries(properties).forEach(([actualStyleName, formalStyleName]) => {\n      let val = detectedStyles[formalStyleName];\n      if (val) {\n        const c = val.charAt(0);\n\n        // only numerical-based values have a negative sign or digit as the first value\n        if (c === \"-\" || c === \"+\" || c >= 0) {\n          val = parseMaxTime(val);\n        }\n\n        // by setting this to null in the event that the delay is not set or is set directly as 0\n        // then we can still allow for negative values to be used later on and not mistake this\n        // value for being greater than any other negative value.\n        if (val === 0) {\n          val = null;\n        }\n        styles[actualStyleName] = val;\n      }\n    });\n\n    return styles;\n  }\n\n  function parseMaxTime(str) {\n    let maxValue = 0;\n    str.split(/\\s*,\\s*/).forEach((value) => {\n      // it's always safe to consider only second values and omit `ms` values since\n      // getComputedStyle will always handle the conversion for us\n      if (value.charAt(value.length - 1) === \"s\") {\n        value = value.substring(0, value.length - 1);\n      }\n      value = parseFloat(value) || 0;\n      maxValue = maxValue ? Math.max(value, maxValue) : value;\n    });\n    return maxValue;\n  }\n\n  function truthyTimingValue(val) {\n    return val === 0 || val != null;\n  }\n\n  function getCssTransitionDurationStyle(duration, applyOnlyDuration) {\n    let style = TRANSITION_PROP;\n    let value = `${duration}s`;\n    if (applyOnlyDuration) {\n      style += DURATION_KEY;\n    } else {\n      value += \" linear all\";\n    }\n    return [style, value];\n  }\n\n  // we do not reassign an already present style value since\n  // if we detect the style property value again we may be\n  // detecting styles that were added via the `from` styles.\n  // We make use of `isDefined` here since an empty string\n  // or null value (which is what getPropertyValue will return\n  // for a non-existing style) will still be marked as a valid\n  // value for the style (a falsy value implies that the style\n  // is to be removed at the end of the animation). If we had a simple\n  // \"OR\" statement then it would not be enough to catch that.\n  function registerRestorableStyles(backup, node, properties) {\n    properties.forEach((prop) => {\n      backup[prop] = isDefined(backup[prop])\n        ? backup[prop]\n        : node.style.getPropertyValue(prop);\n    });\n  }\n\n  function AnimateCssProvider() {\n    this.$get = [\n      \"$$AnimateRunner\",\n      \"$$animateCache\",\n      \"$$rAFScheduler\",\n\n      /**\n       *\n       * @param {*} $$AnimateRunner\n       * @param {*} $$animateCache\n       * @param {import(\"./raf-scheduler\").RafScheduler} $$rAFScheduler\n       * @returns\n       */\n      function ($$AnimateRunner, $$animateCache, $$rAFScheduler) {\n        const applyAnimationClasses = applyAnimationClassesFactory();\n\n        function computeCachedCssStyles(\n          node,\n          cacheKey,\n          allowNoDuration,\n          properties,\n        ) {\n          let timings = $$animateCache.get(cacheKey);\n\n          if (!timings) {\n            timings = computeCssStyles(node, properties);\n            if (timings.animationIterationCount === \"infinite\") {\n              timings.animationIterationCount = 1;\n            }\n          }\n\n          // if a css animation has no duration we\n          // should mark that so that repeated addClass/removeClass calls are skipped\n          const hasDuration =\n            allowNoDuration ||\n            timings.transitionDuration > 0 ||\n            timings.animationDuration > 0;\n\n          // we keep putting this in multiple times even though the value and the cacheKey are the same\n          // because we're keeping an internal tally of how many duplicate animations are detected.\n          $$animateCache.put(cacheKey, timings, hasDuration);\n\n          return timings;\n        }\n\n        function computeCachedCssStaggerStyles(\n          node,\n          className,\n          cacheKey,\n          properties,\n        ) {\n          let stagger;\n          const staggerCacheKey = `stagger-${cacheKey}`;\n\n          // if we have one or more existing matches of matching elements\n          // containing the same parent + CSS styles (which is how cacheKey works)\n          // then staggering is possible\n          if ($$animateCache.count(cacheKey) > 0) {\n            stagger = $$animateCache.get(staggerCacheKey);\n\n            if (!stagger) {\n              const staggerClassName = pendClasses(className, \"-stagger\");\n\n              node.className += ` ${staggerClassName}`;\n              stagger = computeCssStyles(node, properties);\n\n              // force the conversion of a null value to zero incase not set\n              stagger.animationDuration = Math.max(stagger.animationDuration, 0);\n              stagger.transitionDuration = Math.max(\n                stagger.transitionDuration,\n                0,\n              );\n\n              node.classList.remove(staggerClassName);\n\n              $$animateCache.put(staggerCacheKey, stagger, true);\n            }\n          }\n\n          return stagger || {};\n        }\n\n        const rafWaitQueue = [];\n        function waitUntilQuiet(callback) {\n          rafWaitQueue.push(callback);\n          $$rAFScheduler.waitUntilQuiet(() => {\n            $$animateCache.flush();\n\n            // DO NOT REMOVE THIS LINE OR REFACTOR OUT THE `pageWidth` variable.\n            // the line below will force the browser to perform a repaint so\n            // that all the animated elements within the animation frame will\n            // be properly updated and drawn on screen. This is required to\n            // ensure that the preparation animation is properly flushed so that\n            // the active state picks up from there. DO NOT REMOVE THIS LINE.\n            // DO NOT OPTIMIZE THIS LINE. THE MINIFIER WILL REMOVE IT OTHERWISE WHICH\n            // WILL RESULT IN AN UNPREDICTABLE BUG THAT IS VERY HARD TO TRACK DOWN AND\n            // WILL TAKE YEARS AWAY FROM YOUR LIFE.\n\n            const pageWidth = document.body.offsetWidth + 1;\n\n            // we use a for loop to ensure that if the queue is changed\n            // during this looping then it will consider new requests\n            for (let i = 0; i < rafWaitQueue.length; i++) {\n              rafWaitQueue[i](pageWidth);\n            }\n            rafWaitQueue.length = 0;\n          });\n        }\n\n        function computeTimings(node, cacheKey, allowNoDuration) {\n          const timings = computeCachedCssStyles(\n            node,\n            cacheKey,\n            allowNoDuration,\n            DETECT_CSS_PROPERTIES,\n          );\n          const aD = timings.animationDelay;\n          const tD = timings.transitionDelay;\n          timings.maxDelay = aD && tD ? Math.max(aD, tD) : aD || tD;\n          timings.maxDuration = Math.max(\n            timings.animationDuration * timings.animationIterationCount,\n            timings.transitionDuration,\n          );\n\n          return timings;\n        }\n\n        return function init(element, initialOptions) {\n          // all of the animation functions should create\n          // a copy of the options data, however, if a\n          // parent service has already created a copy then\n          let delayStyle;\n          // we should stick to using that\n          let options = initialOptions || {};\n          if (!options.$$prepared) {\n            options = prepareAnimationOptions(structuredClone(options));\n          }\n\n          const restoreStyles = {};\n          const node = /** @type {HTMLElement} */ (element);\n          // Note: this had an additional  !$$animateQueue.enabled() check\n          if (!node || !node.parentNode) {\n            return closeAndReturnNoopAnimator();\n          }\n\n          const temporaryStyles = [];\n          const styles = packageStyles(options);\n          let animationClosed;\n          let animationPaused;\n          let animationCompleted;\n          let runner;\n          let runnerHost;\n          let maxDelay;\n          let maxDelayTime;\n          let maxDuration;\n          let maxDurationTime;\n          let startTime;\n          const events = [];\n\n          if (options.duration === 0) {\n            return closeAndReturnNoopAnimator();\n          }\n\n          const method =\n            options.event && Array.isArray(options.event)\n              ? options.event.join(\" \")\n              : options.event;\n\n          const isStructural = method && options.structural;\n          let structuralClassName = \"\";\n          let addRemoveClassName = \"\";\n\n          if (isStructural) {\n            structuralClassName = pendClasses(method, EVENT_CLASS_PREFIX, true);\n          } else if (method) {\n            structuralClassName = method;\n          }\n\n          if (options.addClass) {\n            addRemoveClassName += pendClasses(options.addClass, ADD_CLASS_SUFFIX);\n          }\n\n          if (options.removeClass) {\n            if (addRemoveClassName.length) {\n              addRemoveClassName += \" \";\n            }\n            addRemoveClassName += pendClasses(\n              options.removeClass,\n              REMOVE_CLASS_SUFFIX,\n            );\n          }\n\n          // there may be a situation where a structural animation is combined together\n          // with CSS classes that need to resolve before the animation is computed.\n          // However this means that there is no explicit CSS code to block the animation\n          // from happening (by setting 0s none in the class name). If this is the case\n          // we need to apply the classes before the first rAF so we know to continue if\n          // there actually is a detected transition or keyframe animation\n          if (options.applyClassesEarly && addRemoveClassName.length) {\n            applyAnimationClasses(element, options);\n          }\n\n          let preparationClasses = [structuralClassName, addRemoveClassName]\n            .join(\" \")\n            .trim();\n          const hasToStyles = styles.to && Object.keys(styles.to).length > 0;\n          const containsKeyframeAnimation =\n            (options.keyframeStyle || \"\").length > 0;\n\n          // there is no way we can trigger an animation if no styles and\n          // no classes are being applied which would then trigger a transition,\n          // unless there a is raw keyframe value that is applied to the element.\n          if (!containsKeyframeAnimation && !hasToStyles && !preparationClasses) {\n            return closeAndReturnNoopAnimator();\n          }\n\n          let stagger;\n          let cacheKey = $$animateCache.cacheKey(\n            node,\n            method,\n            options.addClass,\n            options.removeClass,\n          );\n          if ($$animateCache.containsCachedAnimationWithoutDuration(cacheKey)) {\n            preparationClasses = null;\n            return closeAndReturnNoopAnimator();\n          }\n\n          if (options.stagger > 0) {\n            const staggerVal = parseFloat(options.stagger);\n            stagger = {\n              transitionDelay: staggerVal,\n              animationDelay: staggerVal,\n              transitionDuration: 0,\n              animationDuration: 0,\n            };\n          } else {\n            stagger = computeCachedCssStaggerStyles(\n              node,\n              preparationClasses,\n              cacheKey,\n              DETECT_STAGGER_CSS_PROPERTIES,\n            );\n          }\n\n          if (!options.$$skipPreparationClasses) {\n            element.classList.add(\n              ...preparationClasses.split(\" \").filter((x) => x !== \"\"),\n            );\n          }\n\n          let applyOnlyDuration;\n\n          if (options.transitionStyle) {\n            const transitionStyle = [TRANSITION_PROP, options.transitionStyle];\n            applyInlineStyle(node, transitionStyle);\n            temporaryStyles.push(transitionStyle);\n          }\n\n          if (options.duration >= 0) {\n            applyOnlyDuration = node.style[TRANSITION_PROP].length > 0;\n            const durationStyle = getCssTransitionDurationStyle(\n              options.duration,\n              applyOnlyDuration,\n            );\n\n            // we set the duration so that it will be picked up by getComputedStyle later\n            applyInlineStyle(node, durationStyle);\n\n            temporaryStyles.push(durationStyle);\n          }\n\n          if (options.keyframeStyle) {\n            const keyframeStyle = [ANIMATION_PROP, options.keyframeStyle];\n            applyInlineStyle(node, keyframeStyle);\n            temporaryStyles.push(keyframeStyle);\n          }\n\n          const itemIndex = stagger\n            ? options.staggerIndex >= 0\n              ? options.staggerIndex\n              : $$animateCache.count(cacheKey)\n            : 0;\n\n          const isFirst = itemIndex === 0;\n\n          // this is a pre-emptive way of forcing the setup classes to be added and applied INSTANTLY\n          // without causing any combination of transitions to kick in. By adding a negative delay value\n          // it forces the setup class' transition to end immediately. We later then remove the negative\n          // transition delay to allow for the transition to naturally do it's thing. The beauty here is\n          // that if there is no transition defined then nothing will happen and this will also allow\n          // other transitions to be stacked on top of each other without any chopping them out.\n          if (isFirst && !options.skipBlocking) {\n            blockTransitions(node, SAFE_FAST_FORWARD_DURATION_VALUE);\n          }\n\n          let timings = computeTimings(node, cacheKey, !isStructural);\n          let relativeDelay = timings.maxDelay;\n          maxDelay = Math.max(relativeDelay, 0);\n          maxDuration = timings.maxDuration;\n\n          const flags = {};\n          flags.hasTransitions = timings.transitionDuration > 0;\n          flags.hasAnimations = timings.animationDuration > 0;\n          flags.hasTransitionAll =\n            flags.hasTransitions && timings.transitionProperty === \"all\";\n          flags.applyTransitionDuration =\n            hasToStyles &&\n            ((flags.hasTransitions && !flags.hasTransitionAll) ||\n              (flags.hasAnimations && !flags.hasTransitions));\n          flags.applyAnimationDuration = options.duration && flags.hasAnimations;\n          flags.applyTransitionDelay =\n            truthyTimingValue(options.delay) &&\n            (flags.applyTransitionDuration || flags.hasTransitions);\n          flags.applyAnimationDelay =\n            truthyTimingValue(options.delay) && flags.hasAnimations;\n          flags.recalculateTimingStyles = addRemoveClassName.length > 0;\n\n          if (flags.applyTransitionDuration || flags.applyAnimationDuration) {\n            maxDuration = options.duration\n              ? parseFloat(options.duration)\n              : maxDuration;\n\n            if (flags.applyTransitionDuration) {\n              flags.hasTransitions = true;\n              timings.transitionDuration = maxDuration;\n              applyOnlyDuration =\n                node.style[TRANSITION_PROP + PROPERTY_KEY].length > 0;\n              temporaryStyles.push(\n                getCssTransitionDurationStyle(maxDuration, applyOnlyDuration),\n              );\n            }\n\n            if (flags.applyAnimationDuration) {\n              flags.hasAnimations = true;\n              timings.animationDuration = maxDuration;\n              temporaryStyles.push(getCssKeyframeDurationStyle(maxDuration));\n            }\n          }\n\n          if (maxDuration === 0 && !flags.recalculateTimingStyles) {\n            return closeAndReturnNoopAnimator();\n          }\n\n          let activeClasses = pendClasses(\n            preparationClasses,\n            ACTIVE_CLASS_SUFFIX,\n          );\n\n          if (options.delay != null) {\n            if (typeof options.delay !== \"boolean\") {\n              delayStyle = parseFloat(options.delay);\n              // number in options.delay means we have to recalculate the delay for the closing timeout\n              maxDelay = Math.max(delayStyle, 0);\n            }\n\n            if (flags.applyTransitionDelay) {\n              temporaryStyles.push(getCssDelayStyle(delayStyle));\n            }\n\n            if (flags.applyAnimationDelay) {\n              temporaryStyles.push(getCssDelayStyle(delayStyle, true));\n            }\n          }\n\n          // we need to recalculate the delay value since we used a pre-emptive negative\n          // delay value and the delay value is required for the final event checking. This\n          // property will ensure that this will happen after the RAF phase has passed.\n          if (options.duration == null && timings.transitionDuration > 0) {\n            flags.recalculateTimingStyles =\n              flags.recalculateTimingStyles || isFirst;\n          }\n\n          maxDelayTime = maxDelay * ONE_SECOND;\n          maxDurationTime = maxDuration * ONE_SECOND;\n          if (!options.skipBlocking) {\n            flags.blockTransition = timings.transitionDuration > 0;\n            flags.blockKeyframeAnimation =\n              timings.animationDuration > 0 &&\n              stagger.animationDelay > 0 &&\n              stagger.animationDuration === 0;\n          }\n\n          if (options.from) {\n            if (options.cleanupStyles) {\n              registerRestorableStyles(\n                restoreStyles,\n                node,\n                Object.keys(options.from),\n              );\n            }\n            applyAnimationFromStyles(element, options);\n          }\n\n          if (flags.blockTransition || flags.blockKeyframeAnimation) {\n            applyBlocking(maxDuration);\n          } else if (!options.skipBlocking) {\n            blockTransitions(node, false);\n          }\n\n          // TODO(matsko): for 1.5 change this code to have an animator object for better debugging\n          return {\n            $$willAnimate: true,\n            end: endFn,\n            start() {\n              if (animationClosed) return;\n\n              runnerHost = {\n                end: endFn,\n                cancel: cancelFn,\n                resume: null, // this will be set during the start() phase\n                pause: null,\n              };\n\n              runner = new $$AnimateRunner(runnerHost);\n\n              waitUntilQuiet(start);\n\n              // we don't have access to pause/resume the animation\n              // since it hasn't run yet. AnimateRunner will therefore\n              // set noop functions for resume and pause and they will\n              // later be overridden once the animation is triggered\n              return runner;\n            },\n          };\n\n          function endFn() {\n            close();\n          }\n\n          function cancelFn() {\n            close(true);\n          }\n\n          function close(rejected) {\n            // if the promise has been called already then we shouldn't close\n            // the animation again\n            if (animationClosed || (animationCompleted && animationPaused))\n              return;\n            animationClosed = true;\n            animationPaused = false;\n\n            if (preparationClasses && !options.$$skipPreparationClasses) {\n              element.classList.remove(...preparationClasses.split(\" \"));\n            }\n            activeClasses = pendClasses(preparationClasses, ACTIVE_CLASS_SUFFIX);\n            if (activeClasses) {\n              element.classList.remove(...activeClasses.split(\" \"));\n            }\n\n            blockKeyframeAnimations(node, false);\n            blockTransitions(node, false);\n\n            temporaryStyles.forEach((entry) => {\n              // There is only one way to remove inline style properties entirely from elements.\n              // By using `removeProperty` this works, but we need to convert camel-cased CSS\n              // styles down to hyphenated values.\n              node.style[entry[0]] = \"\";\n            });\n\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n\n            if (Object.keys(restoreStyles).length) {\n              Object.entries(restoreStyles).forEach(([prop, value]) => {\n                if (value) {\n                  node.style.setProperty(prop, value);\n                } else {\n                  node.style.removeProperty(prop);\n                }\n              });\n            }\n\n            // the reason why we have this option is to allow a synchronous closing callback\n            // that is fired as SOON as the animation ends (when the CSS is removed) or if\n            // the animation never takes off at all. A good example is a leave animation since\n            // the element must be removed just after the animation is over or else the element\n            // will appear on screen for one animation frame causing an overbearing flicker.\n            if (options.onDone) {\n              options.onDone();\n            }\n\n            if (events && events.length) {\n              // Remove the transitionend / animationend listener(s)\n              element.off(events.join(\" \"), onAnimationProgress);\n            }\n\n            // Cancel the fallback closing timeout and remove the timer data\n            const animationTimerData = getCacheData(element, ANIMATE_TIMER_KEY);\n            if (animationTimerData) {\n              clearTimeout(animationTimerData[0].timer);\n              removeElementData(element, ANIMATE_TIMER_KEY);\n            }\n\n            // if the preparation function fails then the promise is not setup\n            if (runner) {\n              runner.complete(!rejected);\n            }\n          }\n\n          function applyBlocking(duration) {\n            if (flags.blockTransition) {\n              blockTransitions(node, duration);\n            }\n\n            if (flags.blockKeyframeAnimation) {\n              blockKeyframeAnimations(node, !!duration);\n            }\n          }\n\n          function closeAndReturnNoopAnimator() {\n            runner = new $$AnimateRunner({\n              end: endFn,\n              cancel: cancelFn,\n            });\n\n            // should flush the cache animation\n            waitUntilQuiet(() => {});\n            close();\n\n            return {\n              $$willAnimate: false,\n              start() {\n                return runner;\n              },\n              end: endFn,\n            };\n          }\n\n          function onAnimationProgress(event) {\n            event.stopPropagation();\n            const ev = event.originalEvent || event;\n\n            if (ev.target !== node) {\n              // Since TransitionEvent / AnimationEvent bubble up,\n              // we have to ignore events by finished child animations\n              return;\n            }\n\n            // we now always use `Date.now()` due to the recent changes with\n            // event.timeStamp in Firefox, Webkit and Chrome (see #13494 for more info)\n            const timeStamp = ev.$manualTimeStamp || Date.now();\n\n            /* Firefox (or possibly just Gecko) likes to not round values up\n             * when a ms measurement is used for the animation */\n            const elapsedTime = parseFloat(\n              ev.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES),\n            );\n\n            /* $manualTimeStamp is a mocked timeStamp value which is set\n             * within browserTrigger(). This is only here so that tests can\n             * mock animations properly. Real events fallback to event.timeStamp,\n             * or, if they don't, then a timeStamp is automatically created for them.\n             * We're checking to see if the timeStamp surpasses the expected delay,\n             * but we're using elapsedTime instead of the timeStamp on the 2nd\n             * pre-condition since animationPauseds sometimes close off early */\n            if (\n              Math.max(timeStamp - startTime, 0) >= maxDelayTime &&\n              elapsedTime >= maxDuration\n            ) {\n              // we set this flag to ensure that if the transition is paused then, when resumed,\n              // the animation will automatically close itself since transitions cannot be paused.\n              animationCompleted = true;\n              close();\n            }\n          }\n\n          function start() {\n            if (animationClosed) return;\n            if (!node.parentNode) {\n              close();\n              return;\n            }\n\n            // even though we only pause keyframe animations here the pause flag\n            // will still happen when transitions are used. Only the transition will\n            // not be paused since that is not possible. If the animation ends when\n            // paused then it will not complete until unpaused or cancelled.\n            const playPause = function (playAnimation) {\n              if (!animationCompleted) {\n                animationPaused = !playAnimation;\n                if (timings.animationDuration) {\n                  const value = blockKeyframeAnimations(node, animationPaused);\n                  if (animationPaused) {\n                    temporaryStyles.push(value);\n                  } else {\n                    removeFromArray(temporaryStyles, value);\n                  }\n                }\n              } else if (animationPaused && playAnimation) {\n                animationPaused = false;\n                close();\n              }\n            };\n\n            // checking the stagger duration prevents an accidentally cascade of the CSS delay style\n            // being inherited from the parent. If the transition duration is zero then we can safely\n            // rely that the delay value is an intentional stagger delay style.\n            const maxStagger =\n              itemIndex > 0 &&\n              ((timings.transitionDuration && stagger.transitionDuration === 0) ||\n                (timings.animationDuration && stagger.animationDuration === 0)) &&\n              Math.max(stagger.animationDelay, stagger.transitionDelay);\n            if (maxStagger) {\n              setTimeout(\n                triggerAnimationStart,\n                Math.floor(maxStagger * itemIndex * ONE_SECOND),\n                false,\n              );\n            } else {\n              triggerAnimationStart();\n            }\n\n            // this will decorate the existing promise runner with pause/resume methods\n            runnerHost.resume = function () {\n              playPause(true);\n            };\n\n            runnerHost.pause = function () {\n              playPause(false);\n            };\n\n            function triggerAnimationStart() {\n              // just incase a stagger animation kicks in when the animation\n              // itself was cancelled entirely\n              if (animationClosed) return;\n\n              applyBlocking(false);\n\n              temporaryStyles.forEach((entry) => {\n                const key = entry[0];\n                node.style[key] = entry[1];\n              });\n\n              applyAnimationClasses(element, options);\n              element.classList.add(\n                ...activeClasses.split(\" \").filter((x) => x !== \"\"),\n              );\n              if (flags.recalculateTimingStyles) {\n                cacheKey = $$animateCache.cacheKey(\n                  node,\n                  method,\n                  options.addClass,\n                  options.removeClass,\n                );\n\n                timings = computeTimings(node, cacheKey, false);\n                relativeDelay = timings.maxDelay;\n                maxDelay = Math.max(relativeDelay, 0);\n                maxDuration = timings.maxDuration;\n\n                if (maxDuration === 0) {\n                  close();\n                  return;\n                }\n\n                flags.hasTransitions = timings.transitionDuration > 0;\n                flags.hasAnimations = timings.animationDuration > 0;\n              }\n\n              if (flags.applyAnimationDelay) {\n                relativeDelay =\n                  typeof options.delay !== \"boolean\" &&\n                  truthyTimingValue(options.delay)\n                    ? parseFloat(options.delay)\n                    : relativeDelay;\n\n                maxDelay = Math.max(relativeDelay, 0);\n                timings.animationDelay = relativeDelay;\n                delayStyle = getCssDelayStyle(relativeDelay, true);\n                temporaryStyles.push(delayStyle);\n                node.style[delayStyle[0]] = delayStyle[1];\n              }\n\n              maxDelayTime = maxDelay * ONE_SECOND;\n              maxDurationTime = maxDuration * ONE_SECOND;\n\n              if (options.easing) {\n                let easeProp;\n                const easeVal = options.easing;\n                if (flags.hasTransitions) {\n                  easeProp = TRANSITION_PROP + TIMING_KEY;\n                  temporaryStyles.push([easeProp, easeVal]);\n                  node.style[easeProp] = easeVal;\n                }\n                if (flags.hasAnimations) {\n                  easeProp = ANIMATION_PROP + TIMING_KEY;\n                  temporaryStyles.push([easeProp, easeVal]);\n                  node.style[easeProp] = easeVal;\n                }\n              }\n\n              if (timings.transitionDuration) {\n                events.push(TRANSITIONEND_EVENT);\n              }\n\n              if (timings.animationDuration) {\n                events.push(ANIMATIONEND_EVENT);\n              }\n\n              startTime = Date.now();\n              const timerTime =\n                maxDelayTime + CLOSING_TIME_BUFFER * maxDurationTime;\n              const endTime = startTime + timerTime;\n\n              const animationsData =\n                getCacheData(element, ANIMATE_TIMER_KEY) || [];\n              let setupFallbackTimer = true;\n              if (animationsData.length) {\n                const currentTimerData = animationsData[0];\n                setupFallbackTimer = endTime > currentTimerData.expectedEndTime;\n                if (setupFallbackTimer) {\n                  clearTimeout(currentTimerData.timer);\n                } else {\n                  animationsData.push(close);\n                }\n              }\n\n              if (setupFallbackTimer) {\n                const timer = setTimeout(onAnimationExpired, timerTime, false);\n                animationsData[0] = {\n                  timer,\n                  expectedEndTime: endTime,\n                };\n                animationsData.push(close);\n                setCacheData(element, ANIMATE_TIMER_KEY, animationsData);\n              }\n\n              if (events.length) {\n                events.forEach((x) => {\n                  element.addEventListener(x, onAnimationProgress);\n                });\n              }\n\n              if (options.to) {\n                if (options.cleanupStyles) {\n                  registerRestorableStyles(\n                    restoreStyles,\n                    node,\n                    Object.keys(options.to),\n                  );\n                }\n                applyAnimationToStyles(element, options);\n              }\n            }\n\n            function onAnimationExpired() {\n              const animationsData = getCacheData(element, ANIMATE_TIMER_KEY);\n\n              // this will be false in the event that the element was\n              // removed from the DOM (via a leave animation or something\n              // similar)\n              if (animationsData) {\n                for (let i = 1; i < animationsData.length; i++) {\n                  animationsData[i]();\n                }\n                removeElementData(element, ANIMATE_TIMER_KEY);\n              }\n            }\n          }\n        };\n      },\n    ];\n  }\n\n  function blockTransitions(node, duration) {\n    // we use a negative delay value since it performs blocking\n    // yet it doesn't kill any existing transitions running on the\n    // same element which makes this safe for class-based animations\n    const value = duration ? `-${duration}s` : \"\";\n    applyInlineStyle(node, [TRANSITION_DELAY_PROP, value]);\n    return [TRANSITION_DELAY_PROP, value];\n  }\n\n  const NG_ANIMATE_ATTR_NAME = \"data-ng-animate\";\n  const NG_ANIMATE_PIN_DATA = \"$ngAnimatePin\";\n  AnimateQueueProvider.$inject = [\"$animateProvider\"];\n  function AnimateQueueProvider($animateProvider) {\n    const PRE_DIGEST_STATE = 1;\n    const RUNNING_STATE = 2;\n    const ONE_SPACE = \" \";\n\n    const rules = (this.rules = {\n      skip: [],\n      cancel: [],\n      join: [],\n    });\n\n    function getEventData(options) {\n      return {\n        addClass: options.addClass,\n        removeClass: options.removeClass,\n        from: options.from,\n        to: options.to,\n      };\n    }\n\n    function makeTruthyCssClassMap(classString) {\n      if (!classString) {\n        return null;\n      }\n\n      const keys = classString.split(ONE_SPACE);\n      const map = Object.create(null);\n\n      keys.forEach((key) => {\n        map[key] = true;\n      });\n      return map;\n    }\n\n    function hasMatchingClasses(newClassString, currentClassString) {\n      if (newClassString && currentClassString) {\n        const currentClassMap = makeTruthyCssClassMap(currentClassString);\n        return newClassString\n          .split(ONE_SPACE)\n          .some((className) => currentClassMap[className]);\n      }\n    }\n\n    function isAllowed(ruleType, currentAnimation, previousAnimation) {\n      return rules[ruleType].some((fn) =>\n        fn(currentAnimation, previousAnimation),\n      );\n    }\n\n    function hasAnimationClasses(animation, and) {\n      const a = (animation.addClass || \"\").length > 0;\n      const b = (animation.removeClass || \"\").length > 0;\n      return and ? a && b : a || b;\n    }\n\n    rules.join.push(\n      (newAnimation) =>\n        // if the new animation is class-based then we can just tack that on\n        !newAnimation.structural && hasAnimationClasses(newAnimation),\n    );\n\n    rules.skip.push(\n      (newAnimation) =>\n        // there is no need to animate anything if no classes are being added and\n        // there is no structural animation that will be triggered\n        !newAnimation.structural && !hasAnimationClasses(newAnimation),\n    );\n\n    rules.skip.push(\n      (newAnimation, currentAnimation) =>\n        // why should we trigger a new structural animation if the element will\n        // be removed from the DOM anyway?\n        currentAnimation.event === \"leave\" && newAnimation.structural,\n    );\n\n    rules.skip.push(\n      (newAnimation, currentAnimation) =>\n        // if there is an ongoing current animation then don't even bother running the class-based animation\n        currentAnimation.structural &&\n        currentAnimation.state === RUNNING_STATE &&\n        !newAnimation.structural,\n    );\n\n    rules.cancel.push(\n      (newAnimation, currentAnimation) =>\n        // there can never be two structural animations running at the same time\n        currentAnimation.structural && newAnimation.structural,\n    );\n\n    rules.cancel.push(\n      (newAnimation, currentAnimation) =>\n        // if the previous animation is already running, but the new animation will\n        // be triggered, but the new animation is structural\n        currentAnimation.state === RUNNING_STATE && newAnimation.structural,\n    );\n\n    rules.cancel.push((newAnimation, currentAnimation) => {\n      // cancel the animation if classes added / removed in both animation cancel each other out,\n      // but only if the current animation isn't structural\n\n      if (currentAnimation.structural) return false;\n\n      const nA = newAnimation.addClass;\n      const nR = newAnimation.removeClass;\n      const cA = currentAnimation.addClass;\n      const cR = currentAnimation.removeClass;\n\n      // early detection to save the global CPU shortage :)\n      if (\n        (isUndefined(nA) && isUndefined(nR)) ||\n        (isUndefined(cA) && isUndefined(cR))\n      ) {\n        return false;\n      }\n\n      return hasMatchingClasses(nA, cR) || hasMatchingClasses(nR, cA);\n    });\n\n    this.$get = [\n      $injectTokens.$rootScope,\n      $injectTokens.$injector,\n      $injectTokens.$$animation,\n      $injectTokens.$$AnimateRunner,\n      $injectTokens.$templateRequest,\n      /**\n       *\n       * @param {import('../core/scope/scope.js').Scope} $rootScope\n       * @param {import('../core/di/internal-injector.js').InjectorService} $injector\n       * @param {*} $$animation\n       * @param {*} $$AnimateRunner\n       * @param {*} $templateRequest\n       * @returns\n       */\n      function (\n        $rootScope,\n        $injector,\n        $$animation,\n        $$AnimateRunner,\n        $templateRequest,\n      ) {\n        const activeAnimationsLookup = new Map();\n        const disabledElementsLookup = new Map();\n        let animationsEnabled = null;\n\n        function removeFromDisabledElementsLookup(evt) {\n          disabledElementsLookup.delete(evt.target);\n        }\n\n        function postDigestTaskFactory() {\n          let postDigestCalled = false;\n          return function (fn) {\n            // we only issue a call to postDigest before\n            // it has first passed. This prevents any callbacks\n            // from not firing once the animation has completed\n            // since it will be out of the digest cycle.\n            if (postDigestCalled) {\n              fn();\n            } else {\n              $rootScope.$postUpdate(() => {\n                postDigestCalled = true;\n                fn();\n              });\n            }\n          };\n        }\n\n        // Wait until all directive and route-related templates are downloaded and\n        // compiled. The $templateRequest.totalPendingRequests variable keeps track of\n        // all of the remote templates being currently downloaded. If there are no\n        // templates currently downloading then the watcher will still fire anyway.\n        $rootScope[\"templateRequest\"] = $templateRequest;\n        const deregisterWatch = $rootScope.$watch(\n          \"$templateRequest.totalPendingRequests\",\n          (val) => {\n            if (val === 0) {\n              deregisterWatch();\n              $rootScope[\"$templateRequest\"] = undefined;\n              // Now that all templates have been downloaded, $animate will wait until\n              // the post digest queue is empty before enabling animations. By having two\n              // calls to $postDigest calls we can ensure that the flag is enabled at the\n              // very end of the post digest queue. Since all of the animations in $animate\n              // use $postDigest, it's important that the code below executes at the end.\n              // This basically means that the page is fully downloaded and compiled before\n              // any animations are triggered.\n              $rootScope.$postUpdate(() => {\n                $rootScope.$postUpdate(() => {\n                  // we check for null directly in the event that the application already called\n                  // .enabled() with whatever arguments that it provided it with\n                  if (animationsEnabled === null) {\n                    animationsEnabled = true;\n                  }\n                });\n              });\n            }\n          },\n          true,\n        );\n\n        const callbackRegistry = Object.create(null);\n\n        // remember that the `customFilter`/`classNameFilter` are set during the\n        // provider/config stage therefore we can optimize here and setup helper functions\n        const customFilter = $animateProvider.customFilter();\n        const classNameFilter = $animateProvider.classNameFilter();\n        const returnTrue = function () {\n          return true;\n        };\n\n        const isAnimatableByFilter = customFilter || returnTrue;\n        const isAnimatableClassName = !classNameFilter\n          ? returnTrue\n          : function (node, options) {\n              const className = [\n                node.getAttribute(\"class\"),\n                options.addClass,\n                options.removeClass,\n              ].join(\" \");\n              return classNameFilter.test(className);\n            };\n\n        const applyAnimationClasses = applyAnimationClassesFactory();\n\n        function normalizeAnimationDetails(element, animation) {\n          return mergeAnimationDetails(element, animation, {});\n        }\n\n        // IE9-11 has no method \"contains\" in SVG element and in Node.prototype. Bug #10259.\n        const contains =\n          window.Node.prototype.contains ||\n          function (arg) {\n            return this === arg || !!(this.compareDocumentPosition(arg) & 16);\n          };\n\n        function findCallbacks(targetParentNode, targetNode, event) {\n          const matches = [];\n          const entries = callbackRegistry[event];\n          if (entries) {\n            entries.forEach((entry) => {\n              if (contains.call(entry.node, targetNode)) {\n                matches.push(entry.callback);\n              } else if (\n                event === \"leave\" &&\n                contains.call(entry.node, targetParentNode)\n              ) {\n                matches.push(entry.callback);\n              }\n            });\n          }\n\n          return matches;\n        }\n\n        function filterFromRegistry(list, matchContainer, matchCallback) {\n          const containerNode = extractElementNode(matchContainer);\n          return list.filter((entry) => {\n            const isMatch =\n              entry.node === containerNode &&\n              (!matchCallback || entry.callback === matchCallback);\n            return !isMatch;\n          });\n        }\n\n        function cleanupEventListeners(phase, node) {\n          if (phase === \"close\" && !node.parentNode) {\n            // If the element is not attached to a parentNode, it has been removed by\n            // the domOperation, and we can safely remove the event callbacks\n            $animate.off(node);\n          }\n        }\n\n        let $animate = {\n          on(event, container, callback) {\n            const node = extractElementNode(container);\n            callbackRegistry[event] = callbackRegistry[event] || [];\n            callbackRegistry[event].push({\n              node,\n              callback,\n            });\n\n            // Remove the callback when the element is removed from the DOM\n            container.addEventListener(\"$destroy\", () => {\n              const animationDetails = activeAnimationsLookup.get(node);\n\n              if (!animationDetails) {\n                // If there's an animation ongoing, the callback calling code will remove\n                // the event listeners. If we'd remove here, the callbacks would be removed\n                // before the animation ends\n                $animate.off(event, container, callback);\n              }\n            });\n          },\n\n          off(event, container, callback) {\n            if (arguments.length === 1 && !isString(arguments[0])) {\n              container = arguments[0];\n              for (const eventType in callbackRegistry) {\n                callbackRegistry[eventType] = filterFromRegistry(\n                  callbackRegistry[eventType],\n                  container,\n                );\n              }\n\n              return;\n            }\n\n            const entries = callbackRegistry[event];\n            if (!entries) return;\n\n            callbackRegistry[event] =\n              arguments.length === 1\n                ? null\n                : filterFromRegistry(entries, container, callback);\n          },\n\n          pin(element, parentElement) {\n            assertArg(isElement(element), \"element\", \"not an element\");\n            assertArg(\n              isElement(parentElement),\n              \"parentElement\",\n              \"not an element\",\n            );\n            setCacheData(element, NG_ANIMATE_PIN_DATA, parentElement);\n          },\n\n          push(element, event, options, domOperation) {\n            options = options || {};\n            options.domOperation = domOperation;\n            return queueAnimation(element, event, options);\n          },\n\n          // this method has four signatures:\n          //  () - global getter\n          //  (bool) - global setter\n          //  (element) - element getter\n          //  (element, bool) - element setter<F37>\n          enabled(element, bool) {\n            const argCount = arguments.length;\n\n            if (argCount === 0) {\n              // () - Global getter\n              bool = !!animationsEnabled;\n            } else {\n              const hasElement = isElement(element);\n\n              if (!hasElement) {\n                // (bool) - Global setter\n                bool = animationsEnabled = !!element;\n              } else {\n                const node = element;\n\n                if (argCount === 1) {\n                  // (element) - Element getter\n                  bool = !disabledElementsLookup.get(node);\n                } else {\n                  // (element, bool) - Element setter\n                  if (!disabledElementsLookup.has(node)) {\n                    // The element is added to the map for the first time.\n                    // Create a listener to remove it on `$destroy` (to avoid memory leak).\n                    element.addEventListener(\n                      \"$destroy\",\n                      removeFromDisabledElementsLookup,\n                    );\n                  }\n                  disabledElementsLookup.set(node, !bool);\n                }\n              }\n            }\n\n            return bool;\n          },\n        };\n\n        return $animate;\n\n        /**\n         * @param {Element} originalElement\n         * @param {string} event\n         * @param {*} initialOptions\n         * @returns void\n         */\n        function queueAnimation(originalElement, event, initialOptions) {\n          // we always make a copy of the options since\n          // there should never be any side effects on\n          // the input data when running `$animateCss`.\n          let options = initialOptions;\n\n          // strip comments\n\n          let element = Array.isArray(originalElement)\n            ? originalElement.filter((x) => x.nodeName !== \"#comment\")[0]\n            : originalElement;\n          const node = element;\n          const parentNode = node && node.parentNode;\n\n          options = prepareAnimationOptions(options);\n\n          // we create a fake runner with a working promise.\n          // These methods will become available after the digest has passed\n          const runner = new $$AnimateRunner();\n\n          // this is used to trigger callbacks in postDigest mode\n          const runInNextPostDigestOrNow = postDigestTaskFactory();\n\n          if (Array.isArray(options.addClass)) {\n            options.addClass = options.addClass.join(\" \");\n          }\n\n          if (options.addClass && !isString(options.addClass)) {\n            options.addClass = null;\n          }\n\n          if (Array.isArray(options.removeClass)) {\n            options.removeClass = options.removeClass.join(\" \");\n          }\n\n          if (options.removeClass && !isString(options.removeClass)) {\n            options.removeClass = null;\n          }\n\n          if (options.from && !isObject(options.from)) {\n            options.from = null;\n          }\n\n          if (options.to && !isObject(options.to)) {\n            options.to = null;\n          }\n          // If animations are hard-disabled for the whole application there is no need to continue.\n          // There are also situations where a directive issues an animation for a JQLite wrapper that\n          // contains only comment nodes. In this case, there is no way we can perform an animation.\n          if (\n            // !animationsEnabled ||\n            !node ||\n            !isAnimatableByFilter(node, event, initialOptions) ||\n            !isAnimatableClassName(node, options)\n          ) {\n            close();\n            return runner;\n          }\n\n          const isStructural = [\"enter\", \"move\", \"leave\"].indexOf(event) >= 0;\n\n          // This is a hard disable of all animations the element itself, therefore  there is no need to\n          // continue further past this point if not enabled\n          // Animations are also disabled if the document is currently hidden (page is not visible\n          // to the user), because browsers slow down or do not flush calls to requestAnimationFrame\n          let skipAnimations =\n            document.hidden || disabledElementsLookup.get(node);\n          const existingAnimation =\n            (!skipAnimations && activeAnimationsLookup.get(node)) || {};\n          const hasExistingAnimation = !!existingAnimation.state;\n          // there is no point in traversing the same collection of parent ancestors if a followup\n          // animation will be run on the same element that already did all that checking work\n          if (\n            !skipAnimations &&\n            (!hasExistingAnimation ||\n              existingAnimation.state !== PRE_DIGEST_STATE)\n          ) {\n            skipAnimations = !areAnimationsAllowed(node, parentNode);\n          }\n\n          if (skipAnimations) {\n            // Callbacks should fire even if the document is hidden (regression fix for issue #14120)\n            if (document.hidden)\n              notifyProgress(runner, event, \"start\", getEventData(options));\n            close();\n            if (document.hidden)\n              notifyProgress(runner, event, \"close\", getEventData(options));\n            return runner;\n          }\n\n          if (isStructural) {\n            closeChildAnimations(node);\n          }\n\n          const newAnimation = {\n            structural: isStructural,\n            element,\n            event,\n            addClass: options.addClass,\n            removeClass: options.removeClass,\n            close,\n            options,\n            runner,\n          };\n\n          if (hasExistingAnimation) {\n            const skipAnimationFlag = isAllowed(\n              \"skip\",\n              newAnimation,\n              existingAnimation,\n            );\n            if (skipAnimationFlag) {\n              if (existingAnimation.state === RUNNING_STATE) {\n                close();\n                return runner;\n              }\n              mergeAnimationDetails(element, existingAnimation, newAnimation);\n              return existingAnimation.runner;\n            }\n            const cancelAnimationFlag = isAllowed(\n              \"cancel\",\n              newAnimation,\n              existingAnimation,\n            );\n            if (cancelAnimationFlag) {\n              if (existingAnimation.state === RUNNING_STATE) {\n                // this will end the animation right away and it is safe\n                // to do so since the animation is already running and the\n                // runner callback code will run in async\n                existingAnimation.runner.end();\n              } else if (existingAnimation.structural) {\n                // this means that the animation is queued into a digest, but\n                // hasn't started yet. Therefore it is safe to run the close\n                // method which will call the runner methods in async.\n                existingAnimation.close();\n              } else {\n                // this will merge the new animation options into existing animation options\n                mergeAnimationDetails(element, existingAnimation, newAnimation);\n\n                return existingAnimation.runner;\n              }\n            } else {\n              // a joined animation means that this animation will take over the existing one\n              // so an example would involve a leave animation taking over an enter. Then when\n              // the postDigest kicks in the enter will be ignored.\n              const joinAnimationFlag = isAllowed(\n                \"join\",\n                newAnimation,\n                existingAnimation,\n              );\n              if (joinAnimationFlag) {\n                if (existingAnimation.state === RUNNING_STATE) {\n                  normalizeAnimationDetails(element, newAnimation);\n                } else {\n                  applyGeneratedPreparationClasses(\n                    element,\n                    isStructural ? event : null,\n                    options,\n                  );\n\n                  event = newAnimation.event = existingAnimation.event;\n                  options = mergeAnimationDetails(\n                    element,\n                    existingAnimation,\n                    newAnimation,\n                  );\n\n                  // we return the same runner since only the option values of this animation will\n                  // be fed into the `existingAnimation`.\n                  return existingAnimation.runner;\n                }\n              }\n            }\n          } else {\n            // normalization in this case means that it removes redundant CSS classes that\n            // already exist (addClass) or do not exist (removeClass) on the element\n            normalizeAnimationDetails(element, newAnimation);\n          }\n\n          // when the options are merged and cleaned up we may end up not having to do\n          // an animation at all, therefore we should check this before issuing a post\n          // digest callback. Structural animations will always run no matter what.\n          let isValidAnimation = newAnimation.structural;\n          if (!isValidAnimation) {\n            // animate (from/to) can be quickly checked first, otherwise we check if any classes are present\n            isValidAnimation =\n              (newAnimation.event === \"animate\" &&\n                Object.keys(newAnimation.options.to || {}).length > 0) ||\n              hasAnimationClasses(newAnimation);\n          }\n\n          if (!isValidAnimation) {\n            close();\n            clearElementAnimationState(node);\n            return runner;\n          }\n\n          // the counter keeps track of cancelled animations\n          const counter = (existingAnimation.counter || 0) + 1;\n          newAnimation.counter = counter;\n\n          markElementAnimationState(node, PRE_DIGEST_STATE, newAnimation);\n          $rootScope.$postUpdate(() => {\n            // It is possible that the DOM nodes inside `originalElement` have been replaced. This can\n            // happen if the animated element is a transcluded clone and also has a `templateUrl`\n            // directive on it. Therefore, we must recreate `element` in order to interact with the\n            // actual DOM nodes.\n            // Note: We still need to use the old `node` for certain things, such as looking up in\n            //       HashMaps where it was used as the key.\n\n            element = stripCommentsFromElement(originalElement);\n\n            let animationDetails = activeAnimationsLookup.get(node);\n            const animationCancelled = !animationDetails;\n            animationDetails = animationDetails || {};\n\n            // if addClass/removeClass is called before something like enter then the\n            // registered parent element may not be present. The code below will ensure\n            // that a final value for parent element is obtained\n            const parentElement = element.parentElement || [];\n\n            // animate/structural/class-based animations all have requirements. Otherwise there\n            // is no point in performing an animation. The parent node must also be set.\n            const isValidAnimation =\n              parentElement &&\n              (animationDetails.event === \"animate\" ||\n                animationDetails.structural ||\n                hasAnimationClasses(animationDetails));\n\n            // this means that the previous animation was cancelled\n            // even if the follow-up animation is the same event\n            if (\n              animationCancelled ||\n              animationDetails.counter !== counter ||\n              !isValidAnimation\n            ) {\n              // if another animation did not take over then we need\n              // to make sure that the domOperation and options are\n              // handled accordingly\n              if (animationCancelled) {\n                applyAnimationClasses(element, options);\n                applyAnimationStyles(element, options);\n              }\n\n              // if the event changed from something like enter to leave then we do\n              // it, otherwise if it's the same then the end result will be the same too\n              if (\n                animationCancelled ||\n                (isStructural && animationDetails.event !== event)\n              ) {\n                options.domOperation();\n                runner.end();\n              }\n\n              // in the event that the element animation was not cancelled or a follow-up animation\n              // isn't allowed to animate from here then we need to clear the state of the element\n              // so that any future animations won't read the expired animation data.\n              if (!isValidAnimation) {\n                clearElementAnimationState(node);\n              }\n\n              return;\n            }\n\n            // this combined multiple class to addClass / removeClass into a setClass event\n            // so long as a structural event did not take over the animation\n            event =\n              !animationDetails.structural &&\n              hasAnimationClasses(animationDetails, true)\n                ? \"setClass\"\n                : animationDetails.event;\n\n            markElementAnimationState(node, RUNNING_STATE);\n            const realRunner = $$animation(\n              element,\n              event,\n              animationDetails.options,\n            );\n\n            // this will update the runner's flow-control events based on\n            // the `realRunner` object.\n            runner.setHost(realRunner);\n            notifyProgress(runner, event, \"start\", getEventData(options));\n\n            realRunner.done((status) => {\n              close(!status);\n              const animationDetails = activeAnimationsLookup.get(node);\n              if (animationDetails && animationDetails.counter === counter) {\n                clearElementAnimationState(node);\n              }\n              notifyProgress(runner, event, \"close\", getEventData(options));\n            });\n          });\n\n          return runner;\n\n          function notifyProgress(runner, event, phase, data) {\n            runInNextPostDigestOrNow(() => {\n              const callbacks = findCallbacks(parentNode, node, event);\n              if (callbacks.length) {\n                callbacks.forEach((callback) => {\n                  callback(element, phase, data);\n                });\n                cleanupEventListeners(phase, node);\n              } else {\n                cleanupEventListeners(phase, node);\n              }\n            });\n            runner.progress(event, phase, data);\n          }\n\n          function close(reject) {\n            clearGeneratedClasses(element, options);\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n            options.domOperation();\n            runner.complete(!reject);\n          }\n        }\n\n        function closeChildAnimations(node) {\n          const children = node.querySelectorAll(`[${NG_ANIMATE_ATTR_NAME}]`);\n          children.forEach((child) => {\n            const state = parseInt(child.getAttribute(NG_ANIMATE_ATTR_NAME), 10);\n            const animationDetails = activeAnimationsLookup.get(child);\n            if (animationDetails) {\n              switch (state) {\n                case RUNNING_STATE:\n                  animationDetails.runner.end();\n                /* falls through */\n                case PRE_DIGEST_STATE:\n                  activeAnimationsLookup.delete(child);\n                  break;\n              }\n            }\n          });\n        }\n\n        function clearElementAnimationState(node) {\n          node.removeAttribute(NG_ANIMATE_ATTR_NAME);\n          activeAnimationsLookup.delete(node);\n        }\n\n        /**\n         * This fn returns false if any of the following is true:\n         * a) animations on any parent element are disabled, and animations on the element aren't explicitly allowed\n         * b) a parent element has an ongoing structural animation, and animateChildren is false\n         * c) the element is not a child of the body\n         * d) the element is not a child of the $rootElement\n         */\n        function areAnimationsAllowed(node, parentNode) {\n          const bodyNode = document.body;\n          const rootNode = $injector.get(\"$rootElement\");\n\n          let bodyNodeDetected = node === bodyNode || node.nodeName === \"HTML\";\n          let rootNodeDetected = node === rootNode;\n          let parentAnimationDetected = false;\n          let elementDisabled = disabledElementsLookup.get(node);\n          let animateChildren;\n\n          let parentHost = getOrSetCacheData(node, NG_ANIMATE_PIN_DATA);\n          if (parentHost) {\n            parentNode = parentHost;\n          }\n\n          while (parentNode) {\n            if (!rootNodeDetected) {\n              // AngularTS doesn't want to attempt to animate elements outside of the application\n              // therefore we need to ensure that the rootElement is an ancestor of the current element\n              rootNodeDetected = parentNode === rootNode;\n            }\n\n            if (parentNode.nodeType !== Node.ELEMENT_NODE) {\n              // no point in inspecting the #document element\n              break;\n            }\n\n            const details = activeAnimationsLookup.get(parentNode) || {};\n            // either an enter, leave or move animation will commence\n            // therefore we can't allow any animations to take place\n            // but if a parent animation is class-based then that's ok\n            if (!parentAnimationDetected) {\n              const parentNodeDisabled = disabledElementsLookup.get(parentNode);\n\n              if (parentNodeDisabled === true && elementDisabled !== false) {\n                // disable animations if the user hasn't explicitly enabled animations on the\n                // current element\n                elementDisabled = true;\n                // element is disabled via parent element, no need to check anything else\n                break;\n              } else if (parentNodeDisabled === false) {\n                elementDisabled = false;\n              }\n              parentAnimationDetected = details.structural;\n            }\n\n            if (isUndefined(animateChildren) || animateChildren === true) {\n              const value = getOrSetCacheData(\n                parentNode,\n                NG_ANIMATE_CHILDREN_DATA,\n              );\n              if (isDefined(value)) {\n                animateChildren = value;\n              }\n            }\n\n            // there is no need to continue traversing at this point\n            if (parentAnimationDetected && animateChildren === false) break;\n\n            if (!bodyNodeDetected) {\n              // we also need to ensure that the element is or will be a part of the body element\n              // otherwise it is pointless to even issue an animation to be rendered\n              bodyNodeDetected = parentNode === bodyNode;\n            }\n\n            if (bodyNodeDetected && rootNodeDetected) {\n              // If both body and root have been found, any other checks are pointless,\n              // as no animation data should live outside the application\n              break;\n            }\n\n            if (!rootNodeDetected) {\n              // If `rootNode` is not detected, check if `parentNode` is pinned to another element\n              parentHost = getOrSetCacheData(parentNode, NG_ANIMATE_PIN_DATA);\n              if (parentHost) {\n                // The pin target element becomes the next parent element\n                parentNode = parentHost;\n                continue;\n              }\n            }\n\n            parentNode = parentNode.parentNode;\n          }\n\n          const allowAnimation =\n            (!parentAnimationDetected || animateChildren) &&\n            elementDisabled !== true;\n          return allowAnimation && rootNodeDetected && bodyNodeDetected;\n        }\n\n        function markElementAnimationState(node, state, details) {\n          details = details || {};\n          details.state = state;\n\n          node.setAttribute(NG_ANIMATE_ATTR_NAME, state);\n\n          const oldValue = activeAnimationsLookup.get(node);\n          const newValue = oldValue ? extend(oldValue, details) : details;\n          activeAnimationsLookup.set(node, newValue);\n        }\n      },\n    ];\n  }\n\n  // TODO: use caching here to speed things up for detection\n  // TODO: add documentation\n\n  AnimateJsProvider.$inject = [\"$animateProvider\"];\n  function AnimateJsProvider($animateProvider) {\n    this.$get = [\n      $injectTokens.$injector,\n      \"$$AnimateRunner\",\n      /**\n       *\n       * @param {import(\"../core/di/internal-injector\").InjectorService} $injector\n       * @param {*} $$AnimateRunner\n       * @returns\n       */\n      function ($injector, $$AnimateRunner) {\n        const applyAnimationClasses = applyAnimationClassesFactory();\n        // $animateJs(element, 'enter');\n        return function (element, event, classes, options) {\n          let animationClosed = false;\n\n          // the `classes` argument is optional and if it is not used\n          // then the classes will be resolved from the element's className\n          // property as well as options.addClass/options.removeClass.\n          if (arguments.length === 3 && isObject(classes)) {\n            options = classes;\n            classes = null;\n          }\n\n          options = prepareAnimationOptions(options);\n          if (!classes) {\n            classes = element.getAttribute(\"class\") || \"\";\n            if (options.addClass) {\n              classes += ` ${options.addClass}`;\n            }\n            if (options.removeClass) {\n              classes += ` ${options.removeClass}`;\n            }\n          }\n\n          const classesToAdd = options.addClass;\n          const classesToRemove = options.removeClass;\n\n          // the lookupAnimations function returns a series of animation objects that are\n          // matched up with one or more of the CSS classes. These animation objects are\n          // defined via the module.animation factory function. If nothing is detected then\n          // we don't return anything which then makes $animation query the next driver.\n          const animations = lookupAnimations(classes);\n          let before;\n          let after;\n          if (animations.length) {\n            let afterFn;\n            let beforeFn;\n            if (event === \"leave\") {\n              beforeFn = \"leave\";\n              afterFn = \"afterLeave\"; // TODO(matsko): get rid of this\n            } else {\n              beforeFn = `before${event.charAt(0).toUpperCase()}${event.substring(1)}`;\n              afterFn = event;\n            }\n\n            if (event !== \"enter\" && event !== \"move\") {\n              before = packageAnimations(\n                element,\n                event,\n                options,\n                animations,\n                beforeFn,\n              );\n            }\n            after = packageAnimations(\n              element,\n              event,\n              options,\n              animations,\n              afterFn,\n            );\n          }\n\n          // no matching animations\n          if (!before && !after) return;\n\n          function applyOptions() {\n            options.domOperation();\n            applyAnimationClasses(element, options);\n          }\n\n          function close() {\n            animationClosed = true;\n            applyOptions();\n            applyAnimationStyles(element, options);\n          }\n\n          let runner;\n\n          return {\n            $$willAnimate: true,\n            end() {\n              if (runner) {\n                runner.end();\n              } else {\n                close();\n                runner = new $$AnimateRunner();\n                runner.complete(true);\n              }\n              return runner;\n            },\n            start() {\n              if (runner) {\n                return runner;\n              }\n\n              runner = new $$AnimateRunner();\n              let closeActiveAnimations;\n              const chain = [];\n\n              if (before) {\n                chain.push((fn) => {\n                  closeActiveAnimations = before(fn);\n                });\n              }\n\n              if (chain.length) {\n                chain.push((fn) => {\n                  applyOptions();\n                  fn(true);\n                });\n              } else {\n                applyOptions();\n              }\n\n              if (after) {\n                chain.push((fn) => {\n                  closeActiveAnimations = after(fn);\n                });\n              }\n\n              runner.setHost({\n                end() {\n                  endAnimations();\n                },\n                cancel() {\n                  endAnimations(true);\n                },\n              });\n\n              $$AnimateRunner.chain(chain, onComplete);\n              return runner;\n\n              function onComplete(success) {\n                close();\n                runner.complete(success);\n              }\n\n              function endAnimations(cancelled) {\n                if (!animationClosed) {\n                  (closeActiveAnimations || (() => {}))(cancelled);\n                  onComplete(cancelled);\n                }\n              }\n            },\n          };\n\n          function executeAnimationFn(fn, element, event, options, onDone) {\n            let args;\n            switch (event) {\n              case \"animate\":\n                args = [element, options.from, options.to, onDone];\n                break;\n\n              case \"setClass\":\n                args = [element, classesToAdd, classesToRemove, onDone];\n                break;\n\n              case \"addClass\":\n                args = [element, classesToAdd, onDone];\n                break;\n\n              case \"removeClass\":\n                args = [element, classesToRemove, onDone];\n                break;\n\n              default:\n                args = [element, onDone];\n                break;\n            }\n\n            args.push(options);\n\n            let value = fn.apply(fn, args);\n            if (value) {\n              if (isFunction(value.start)) {\n                value = value.start();\n              }\n\n              if (value instanceof $$AnimateRunner) {\n                value.done(onDone);\n              } else if (isFunction(value)) {\n                // optional onEnd / onCancel callback\n                return value;\n              }\n            }\n\n            return () => {};\n          }\n\n          function groupEventedAnimations(\n            element,\n            event,\n            options,\n            animations,\n            fnName,\n          ) {\n            const operations = [];\n            animations.forEach((ani) => {\n              const animation = ani[fnName];\n              if (!animation) return;\n\n              // note that all of these animations will run in parallel\n              operations.push(() => {\n                let runner;\n                let endProgressCb;\n\n                let resolved = false;\n                const onAnimationComplete = function (rejected) {\n                  if (!resolved) {\n                    resolved = true;\n                    (endProgressCb || (() => {}))(rejected);\n                    runner.complete(!rejected);\n                  }\n                };\n\n                runner = new $$AnimateRunner({\n                  end() {\n                    onAnimationComplete();\n                  },\n                  cancel() {\n                    onAnimationComplete(true);\n                  },\n                });\n\n                endProgressCb = executeAnimationFn(\n                  animation,\n                  element,\n                  event,\n                  options,\n                  (result) => {\n                    const cancelled = result === false;\n                    onAnimationComplete(cancelled);\n                  },\n                );\n\n                return runner;\n              });\n            });\n\n            return operations;\n          }\n\n          function packageAnimations(\n            element,\n            event,\n            options,\n            animations,\n            fnName,\n          ) {\n            let operations = groupEventedAnimations(\n              element,\n              event,\n              options,\n              animations,\n              fnName,\n            );\n            if (operations.length === 0) {\n              let a;\n              let b;\n              if (fnName === \"beforeSetClass\") {\n                a = groupEventedAnimations(\n                  element,\n                  \"removeClass\",\n                  options,\n                  animations,\n                  \"beforeRemoveClass\",\n                );\n                b = groupEventedAnimations(\n                  element,\n                  \"addClass\",\n                  options,\n                  animations,\n                  \"beforeAddClass\",\n                );\n              } else if (fnName === \"setClass\") {\n                a = groupEventedAnimations(\n                  element,\n                  \"removeClass\",\n                  options,\n                  animations,\n                  \"removeClass\",\n                );\n                b = groupEventedAnimations(\n                  element,\n                  \"addClass\",\n                  options,\n                  animations,\n                  \"addClass\",\n                );\n              }\n\n              if (a) {\n                operations = operations.concat(a);\n              }\n              if (b) {\n                operations = operations.concat(b);\n              }\n            }\n\n            if (operations.length === 0) return;\n\n            // TODO(matsko): add documentation\n            return function startAnimation(callback) {\n              const runners = [];\n              if (operations.length) {\n                operations.forEach((animateFn) => {\n                  runners.push(animateFn());\n                });\n              }\n\n              if (runners.length) {\n                $$AnimateRunner.all(runners, callback);\n              } else {\n                callback();\n              }\n\n              return function endFn(reject) {\n                runners.forEach((runner) => {\n                  if (reject) {\n                    runner.cancel();\n                  } else {\n                    runner.end();\n                  }\n                });\n              };\n            };\n          }\n        };\n\n        function lookupAnimations(classes) {\n          classes = Array.isArray(classes) ? classes : classes.split(\" \");\n          const matches = [];\n          const flagMap = {};\n          for (let i = 0; i < classes.length; i++) {\n            const klass = classes[i];\n            const animationFactory =\n              $animateProvider.$$registeredAnimations[klass];\n            if (animationFactory && !flagMap[klass]) {\n              matches.push($injector.get(animationFactory));\n              flagMap[klass] = true;\n            }\n          }\n          return matches;\n        }\n      },\n    ];\n  }\n\n  const RUNNER_STORAGE_KEY = \"$$animationRunner\";\n  const PREPARE_CLASSES_KEY = \"$$animatePrepareClasses\";\n\n  function AnimationProvider() {\n    const NG_ANIMATE_REF_ATTR = \"ng-animate-ref\";\n\n    const drivers = (this.drivers = []);\n\n    function setRunner(element, runner) {\n      setCacheData(element, RUNNER_STORAGE_KEY, runner);\n    }\n\n    function removeRunner(element) {\n      deleteCacheData(element, RUNNER_STORAGE_KEY);\n    }\n\n    function getRunner(element) {\n      return getCacheData(element, RUNNER_STORAGE_KEY);\n    }\n\n    this.$get = [\n      \"$rootScope\",\n      \"$injector\",\n      \"$$AnimateRunner\",\n      \"$$rAFScheduler\",\n      \"$$animateCache\",\n      /**\n       *\n       * @param {*} $rootScope\n       * @param {import(\"../core/di/internal-injector\").InjectorService} $injector\n       * @param {*} $$AnimateRunner\n       * @param {import(\"./raf-scheduler\").RafScheduler} $$rAFScheduler\n       * @param {*} $$animateCache\n       * @returns\n       */\n      function (\n        $rootScope,\n        $injector,\n        $$AnimateRunner,\n        $$rAFScheduler,\n        $$animateCache,\n      ) {\n        const animationQueue = [];\n        const applyAnimationClasses = applyAnimationClassesFactory();\n\n        function sortAnimations(animations) {\n          const tree = { children: [] };\n          let i;\n          const lookup = new Map();\n\n          // this is done first beforehand so that the map\n          // is filled with a list of the elements that will be animated\n\n          for (i = 0; i < animations.length; i++) {\n            const animation = animations[i];\n            lookup.set(\n              animation.domNode,\n              (animations[i] = {\n                domNode: animation.domNode,\n                element: animation.element,\n                fn: animation.fn,\n                children: [],\n              }),\n            );\n          }\n\n          for (i = 0; i < animations.length; i++) {\n            processNode(animations[i]);\n          }\n\n          return flatten(tree);\n\n          function processNode(entry) {\n            if (entry.processed) return entry;\n            entry.processed = true;\n\n            const elementNode = entry.domNode;\n            let { parentNode } = elementNode;\n            lookup.set(elementNode, entry);\n\n            let parentEntry;\n            while (parentNode) {\n              parentEntry = lookup.get(parentNode);\n              if (parentEntry) {\n                if (!parentEntry.processed) {\n                  parentEntry = processNode(parentEntry);\n                }\n                break;\n              }\n              parentNode = parentNode.parentNode;\n            }\n\n            (parentEntry || tree).children.push(entry);\n            return entry;\n          }\n\n          function flatten(tree) {\n            const result = [];\n            const queue = [];\n            let i;\n\n            for (i = 0; i < tree.children.length; i++) {\n              queue.push(tree.children[i]);\n            }\n\n            let remainingLevelEntries = queue.length;\n            let nextLevelEntries = 0;\n            let row = [];\n\n            for (i = 0; i < queue.length; i++) {\n              const entry = queue[i];\n              if (remainingLevelEntries <= 0) {\n                remainingLevelEntries = nextLevelEntries;\n                nextLevelEntries = 0;\n                result.push(row);\n                row = [];\n              }\n              row.push(entry);\n              entry.children.forEach((childEntry) => {\n                nextLevelEntries++;\n                queue.push(childEntry);\n              });\n              remainingLevelEntries--;\n            }\n\n            if (row.length) {\n              result.push(row);\n            }\n\n            return result;\n          }\n        }\n\n        // TODO(matsko): document the signature in a better way\n        return function (element, event, options) {\n          options = prepareAnimationOptions(options);\n          const isStructural = [\"enter\", \"move\", \"leave\"].indexOf(event) >= 0;\n\n          // there is no animation at the current moment, however\n          // these runner methods will get later updated with the\n          // methods leading into the driver's end/cancel methods\n          // for now they just stop the animation from starting\n          const runner = new $$AnimateRunner({\n            end() {\n              close();\n            },\n            cancel() {\n              close(true);\n            },\n          });\n\n          if (!drivers.length) {\n            close();\n            return runner;\n          }\n\n          let classes = mergeClasses$1(\n            element.getAttribute(\"class\"),\n            mergeClasses$1(options.addClass, options.removeClass),\n          );\n          let { tempClasses } = options;\n          if (tempClasses) {\n            classes += ` ${tempClasses}`;\n            options.tempClasses = null;\n          }\n\n          if (isStructural) {\n            setCacheData(\n              element,\n              PREPARE_CLASSES_KEY,\n              `ng-${event}${PREPARE_CLASS_SUFFIX}`,\n            );\n          }\n\n          setRunner(element, runner);\n\n          animationQueue.push({\n            // this data is used by the postDigest code and passed into\n            // the driver step function\n            element,\n            classes,\n            event,\n            structural: isStructural,\n            options,\n            beforeStart,\n            close,\n          });\n\n          element.addEventListener(\"$destroy\", handleDestroyedElement);\n\n          // we only want there to be one function called within the post digest\n          // block. This way we can group animations for all the animations that\n          // were apart of the same postDigest flush call.\n          if (animationQueue.length > 1) return runner;\n\n          $rootScope.$postUpdate(() => {\n            const animations = [];\n            animationQueue.forEach((entry) => {\n              // the element was destroyed early on which removed the runner\n              // form its storage. This means we can't animate this element\n              // at all and it already has been closed due to destruction.\n              if (getRunner(entry.element)) {\n                animations.push(entry);\n              } else {\n                entry.close();\n              }\n            });\n\n            // now any future animations will be in another postDigest\n            animationQueue.length = 0;\n\n            const groupedAnimations = groupAnimations(animations);\n            const toBeSortedAnimations = [];\n\n            groupedAnimations.forEach((animationEntry) => {\n              const element = animationEntry.from\n                ? animationEntry.from.element\n                : animationEntry.element;\n              let extraClasses = options.addClass;\n\n              extraClasses =\n                (extraClasses ? `${extraClasses} ` : \"\") + NG_ANIMATE_CLASSNAME;\n              const cacheKey = $$animateCache.cacheKey(\n                element,\n                animationEntry.event,\n                extraClasses,\n                options.removeClass,\n              );\n\n              toBeSortedAnimations.push({\n                element,\n                domNode: element,\n                fn: function triggerAnimationStart() {\n                  let startAnimationFn;\n                  const closeFn = animationEntry.close;\n\n                  // in the event that we've cached the animation status for this element\n                  // and it's in fact an invalid animation (something that has duration = 0)\n                  // then we should skip all the heavy work from here on\n                  if (\n                    $$animateCache.containsCachedAnimationWithoutDuration(\n                      cacheKey,\n                    )\n                  ) {\n                    closeFn();\n                    return;\n                  }\n\n                  // it's important that we apply the `ng-animate` CSS class and the\n                  // temporary classes before we do any driver invoking since these\n                  // CSS classes may be required for proper CSS detection.\n                  animationEntry.beforeStart();\n\n                  // in the event that the element was removed before the digest runs or\n                  // during the RAF sequencing then we should not trigger the animation.\n                  const targetElement = animationEntry.anchors\n                    ? animationEntry.from.element || animationEntry.to.element\n                    : animationEntry.element;\n\n                  if (getRunner(targetElement)) {\n                    const operation = invokeFirstDriver(animationEntry);\n                    if (operation) {\n                      startAnimationFn = operation.start;\n                    }\n                  }\n\n                  if (!startAnimationFn) {\n                    closeFn();\n                  } else {\n                    const animationRunner = startAnimationFn();\n                    animationRunner.done((status) => {\n                      closeFn(!status);\n                    });\n                    updateAnimationRunners(animationEntry, animationRunner);\n                  }\n                },\n              });\n            });\n\n            // we need to sort each of the animations in order of parent to child\n            // relationships. This ensures that the child classes are applied at the\n            // right time.\n            const finalAnimations = sortAnimations(toBeSortedAnimations);\n            for (let i = 0; i < finalAnimations.length; i++) {\n              const innerArray = finalAnimations[i];\n              for (let j = 0; j < innerArray.length; j++) {\n                const entry = innerArray[j];\n                const { element } = entry;\n\n                // the RAFScheduler code only uses functions\n                finalAnimations[i][j] = entry.fn;\n\n                // the first row of elements shouldn't have a prepare-class added to them\n                // since the elements are at the top of the animation hierarchy and they\n                // will be applied without a RAF having to pass...\n                if (i === 0) {\n                  removeElementData(element, PREPARE_CLASSES_KEY);\n                  continue;\n                }\n\n                const prepareClassName = getCacheData(\n                  element,\n                  PREPARE_CLASSES_KEY,\n                );\n                if (prepareClassName) {\n                  element.classList.add(prepareClassName);\n                }\n              }\n            }\n            // @ts-ignore\n            $$rAFScheduler(finalAnimations);\n          });\n\n          return runner;\n\n          // TODO(matsko): change to reference nodes\n          function getAnchorNodes(node) {\n            const SELECTOR = `[${NG_ANIMATE_REF_ATTR}]`;\n            const items = node.hasAttribute(NG_ANIMATE_REF_ATTR)\n              ? [node]\n              : node.querySelectorAll(SELECTOR);\n            const anchors = [];\n            items.forEach((node) => {\n              const attr = node.getAttribute(NG_ANIMATE_REF_ATTR);\n              if (attr && attr.length) {\n                anchors.push(node);\n              }\n            });\n            return anchors;\n          }\n\n          function groupAnimations(animations) {\n            const preparedAnimations = [];\n            const refLookup = {};\n            animations.forEach((animation, index) => {\n              const { element } = animation;\n              const node = element;\n              const { event } = animation;\n              const enterOrMove = [\"enter\", \"move\"].indexOf(event) >= 0;\n              const anchorNodes = animation.structural\n                ? getAnchorNodes(node)\n                : [];\n\n              if (anchorNodes.length) {\n                const direction = enterOrMove ? \"to\" : \"from\";\n\n                anchorNodes.forEach((anchor) => {\n                  const key = anchor.getAttribute(NG_ANIMATE_REF_ATTR);\n                  refLookup[key] = refLookup[key] || {};\n                  refLookup[key][direction] = {\n                    animationID: index,\n                    element: anchor,\n                  };\n                });\n              } else {\n                preparedAnimations.push(animation);\n              }\n            });\n\n            const usedIndicesLookup = {};\n            const anchorGroups = {};\n            Object.values(refLookup).forEach((operations) => {\n              const { from } = operations;\n              const { to } = operations;\n\n              if (!from || !to) {\n                // only one of these is set therefore we can't have an\n                // anchor animation since all three pieces are required\n                const index = from ? from.animationID : to.animationID;\n                const indexKey = index.toString();\n                if (!usedIndicesLookup[indexKey]) {\n                  usedIndicesLookup[indexKey] = true;\n                  preparedAnimations.push(animations[index]);\n                }\n                return;\n              }\n\n              const fromAnimation = animations[from.animationID];\n              const toAnimation = animations[to.animationID];\n              const lookupKey = from.animationID.toString();\n              if (!anchorGroups[lookupKey]) {\n                const group = (anchorGroups[lookupKey] = {\n                  structural: true,\n                  beforeStart() {\n                    fromAnimation.beforeStart();\n                    toAnimation.beforeStart();\n                  },\n                  close() {\n                    fromAnimation.close();\n                    toAnimation.close();\n                  },\n                  classes: cssClassesIntersection(\n                    fromAnimation.classes,\n                    toAnimation.classes,\n                  ),\n                  from: fromAnimation,\n                  to: toAnimation,\n                  anchors: [], // TODO(matsko): change to reference nodes\n                });\n\n                // the anchor animations require that the from and to elements both have at least\n                // one shared CSS class which effectively marries the two elements together to use\n                // the same animation driver and to properly sequence the anchor animation.\n                if (group.classes.length) {\n                  preparedAnimations.push(group);\n                } else {\n                  preparedAnimations.push(fromAnimation);\n                  preparedAnimations.push(toAnimation);\n                }\n              }\n\n              anchorGroups[lookupKey].anchors.push({\n                out: from.element,\n                in: to.element,\n              });\n            });\n\n            return preparedAnimations;\n          }\n\n          function cssClassesIntersection(a, b) {\n            a = a.split(\" \");\n            b = b.split(\" \");\n            const matches = [];\n\n            for (let i = 0; i < a.length; i++) {\n              const aa = a[i];\n              if (aa.substring(0, 3) === \"ng-\") continue;\n\n              for (let j = 0; j < b.length; j++) {\n                if (aa === b[j]) {\n                  matches.push(aa);\n                  break;\n                }\n              }\n            }\n\n            return matches.join(\" \");\n          }\n\n          function invokeFirstDriver(animationDetails) {\n            // we loop in reverse order since the more general drivers (like CSS and JS)\n            // may attempt more elements, but custom drivers are more particular\n            for (let i = drivers.length - 1; i >= 0; i--) {\n              const driverName = drivers[i];\n              const factory = $injector.get(driverName);\n              const driver = factory(animationDetails);\n              if (driver) {\n                return driver;\n              }\n            }\n          }\n\n          function beforeStart() {\n            tempClasses =\n              (tempClasses ? `${tempClasses} ` : \"\") + NG_ANIMATE_CLASSNAME;\n            element.className += ` ${tempClasses}`;\n            let prepareClassName = getCacheData(element, PREPARE_CLASSES_KEY);\n            if (prepareClassName) {\n              element.classList.remove(prepareClassName);\n              prepareClassName = null;\n            }\n          }\n\n          function updateAnimationRunners(animation, newRunner) {\n            if (animation.from && animation.to) {\n              update(animation.from.element);\n              update(animation.to.element);\n            } else {\n              update(animation.element);\n            }\n\n            function update(element) {\n              const runner = getRunner(element);\n              if (runner) runner.setHost(newRunner);\n            }\n          }\n\n          function handleDestroyedElement() {\n            const runner = getRunner(element);\n            if (runner && (event !== \"leave\" || !options.$$domOperationFired)) {\n              runner.end();\n            }\n          }\n\n          function close(rejected) {\n            removeRunner(element);\n\n            applyAnimationClasses(element, options);\n            applyAnimationStyles(element, options);\n            options.domOperation();\n\n            if (tempClasses) {\n              tempClasses\n                .split(\" \")\n                .forEach((cls) => element.classList.remove(cls));\n            }\n\n            runner.complete(!rejected);\n          }\n        };\n      },\n    ];\n  }\n\n  /**\n   * @typedef {import('./interface.js').RafScheduler} RafScheduler\n   * @typedef {import('../interface.js').ServiceProvider} ServiceProvider\n   */\n\n  /**\n   * Service provider that creates a requestAnimationFrame-based scheduler.\n   * @type {ServiceProvider}\n   */\n  class RafSchedulerProvider {\n    constructor() {\n      /**\n       * Internal task queue, where each item is an array of functions to run.\n       * @type {Array<Array<() => void>>}\n       */\n      this.queue = [];\n\n      /**\n       * ID of the currently scheduled animation frame (if any).\n       * Used for cancellation and tracking.\n       * @type {number|null}\n       */\n      this.cancelFn = null;\n    }\n\n    /**\n     * Processes the next batch of tasks in the animation frame.\n     * Executes the first group of functions in the queue, then\n     * schedules the next frame if needed.\n     */\n    nextTick() {\n      if (!this.queue.length) return;\n\n      const items = this.queue.shift();\n      items.forEach((fn) => fn());\n\n      if (!this.cancelFn) {\n        this.cancelFn = window.requestAnimationFrame(() => {\n          this.cancelFn = null;\n          this.nextTick();\n        });\n      }\n    }\n\n    /**\n     * Returns the scheduler function.\n     * This function allows tasks to be queued for execution on future animation frames.\n     * It also has helper methods and state attached.\n     *\n     * @returns {RafScheduler} The scheduler function with `queue` and `waitUntilQuiet`.\n     */\n    $get() {\n      /**\n       * The main scheduler function.\n       * Accepts an array of functions and schedules them to run in the next available frame(s).\n       *\n       * @type {RafScheduler}\n       */\n      const scheduler = (tasks) => {\n        // Clone the input array to avoid mutating the original.\n        this.queue = this.queue.concat(tasks);\n        this.nextTick();\n      };\n\n      /**\n       * Exposes the internal queue to consumers (read-only use preferred).\n       * This matches the type signature for RafScheduler.\n       */\n      scheduler.queue = this.queue;\n\n      /**\n       * Cancels any pending frame and runs the given function once the frame is idle.\n       * Useful for debounced updates.\n       *\n       * @param {Function} fn - Function to run when the animation frame is quiet.\n       */\n      scheduler.waitUntilQuiet = (fn) => {\n        if (this.cancelFn !== null) {\n          window.cancelAnimationFrame(this.cancelFn);\n          this.cancelFn = null;\n        }\n\n        this.cancelFn = window.requestAnimationFrame(() => {\n          this.cancelFn = null;\n          fn();\n          this.nextTick();\n        });\n      };\n\n      return scheduler;\n    }\n  }\n\n  const KEY = \"$animId\";\n  let parentCounter = 0;\n  const cache = new Map();\n\n  function animateCache() {\n    return {\n      /**\n       * Generates a unique cache key based on the node's parent and other parameters.\n       * @param {HTMLElement} node - The DOM node to generate the cache key for.\n       * @param {string} method - The animation method being applied.\n       * @param {string} [addClass] - Class to add during the animation.\n       * @param {string} [removeClass] - Class to remove during the animation.\n       * @returns {string} - The generated cache key.\n       */\n      cacheKey(node, method, addClass, removeClass) {\n        const { parentNode } = node;\n        const parentID = parentNode[KEY] ?? (parentNode[KEY] = ++parentCounter);\n        const parts = [parentID, method, node.getAttribute(\"class\")];\n        if (addClass) parts.push(addClass);\n        if (removeClass) parts.push(removeClass);\n        return parts.join(\" \");\n      },\n\n      /**\n       * Checks if a cached animation without a duration exists.\n       * @param {string} key - The cache key to check.\n       * @returns {boolean} - True if an invalid animation is cached, false otherwise.\n       */\n      containsCachedAnimationWithoutDuration(key) {\n        const entry = cache.get(key);\n        return entry ? !entry.isValid : false;\n      },\n\n      /**\n       * Clears the cache.\n       * @returns {void}\n       */\n      flush() {\n        cache.clear();\n      },\n\n      /**\n       * Gets the count of a specific cache entry.\n       * @param {string} key - The cache key to count.\n       * @returns {number} - The count of the cache entry.\n       */\n      count(key) {\n        return cache.get(key)?.total ?? 0;\n      },\n\n      /**\n       * Retrieves a value associated with a specific cache key.\n       * @param {string} key - The cache key to retrieve.\n       * @returns {any} - The value associated with the cache key.\n       */\n      get(key) {\n        return cache.get(key)?.value;\n      },\n\n      /**\n       * Adds or updates a cache entry.\n       * @param {string} key - The cache key to add or update.\n       * @param {any} value - The value to store.\n       * @param {boolean} isValid - Whether the cache entry is valid.\n       */\n      put(key, value, isValid) {\n        const entry = cache.get(key);\n        if (entry) {\n          entry.total++;\n          entry.value = value;\n        } else {\n          cache.set(key, { total: 1, value, isValid });\n        }\n      },\n    };\n  }\n\n  function AnimateCacheProvider() {\n    this.$get = [animateCache];\n  }\n\n  const NG_ANIMATE_SHIM_CLASS_NAME = \"ng-animate-shim\";\n  const NG_ANIMATE_ANCHOR_CLASS_NAME = \"ng-anchor\";\n\n  const NG_OUT_ANCHOR_CLASS_NAME = \"ng-anchor-out\";\n  const NG_IN_ANCHOR_CLASS_NAME = \"ng-anchor-in\";\n\n  AnimateCssDriverProvider.$inject = [\"$$animationProvider\"];\n  function AnimateCssDriverProvider($$animationProvider) {\n    $$animationProvider.drivers.push(\"$$animateCssDriver\");\n\n    function isDocumentFragment(node) {\n      return node.parentNode && node.parentNode.nodeType === 11;\n    }\n\n    /**\n     * @returns {Function}\n     */\n    this.$get = [\n      \"$animateCss\",\n      \"$$AnimateRunner\",\n      \"$rootElement\",\n      /**\n       *\n       * @param {*} $animateCss\n       * @param {typeof import('./animate-runner.js').AnimateRunner} $$AnimateRunner\n       * @param {Element} $rootElement\n       * @returns\n       */\n      function ($animateCss, $$AnimateRunner, $rootElement) {\n        const bodyNode = document.body;\n        const rootNode = $rootElement;\n\n        const rootBodyElement =\n          // this is to avoid using something that exists outside of the body\n          // we also special case the doc fragment case because our unit test code\n          // appends the $rootElement to the body after the app has been bootstrapped\n          isDocumentFragment(rootNode) || bodyNode.contains(rootNode)\n            ? rootNode\n            : bodyNode;\n\n        return function initDriverFn(animationDetails) {\n          return animationDetails.from && animationDetails.to\n            ? prepareFromToAnchorAnimation(\n                animationDetails.from,\n                animationDetails.to,\n                animationDetails.anchors,\n              )\n            : prepareRegularAnimation(animationDetails);\n        };\n\n        function prepareAnchoredAnimation(outAnchor, inAnchor) {\n          const clone = outAnchor.cloneNode(true);\n          const startingClasses = filterCssClasses(getClassVal(clone));\n\n          outAnchor[0].classList.add(NG_ANIMATE_SHIM_CLASS_NAME);\n          inAnchor[0].classList.add(NG_ANIMATE_SHIM_CLASS_NAME);\n\n          clone.classList.add(NG_ANIMATE_ANCHOR_CLASS_NAME);\n\n          rootBodyElement.append(clone);\n\n          let animatorIn;\n          const animatorOut = prepareOutAnimation();\n\n          // the user may not end up using the `out` animation and\n          // only making use of the `in` animation or vice-versa.\n          // In either case we should allow this and not assume the\n          // animation is over unless both animations are not used.\n          if (!animatorOut) {\n            animatorIn = prepareInAnimation();\n            if (!animatorIn) {\n              return end();\n            }\n          }\n\n          const startingAnimator = animatorOut || animatorIn;\n\n          return {\n            start() {\n              let runner;\n\n              let currentAnimation = startingAnimator.start();\n              currentAnimation.done(() => {\n                currentAnimation = null;\n                if (!animatorIn) {\n                  animatorIn = prepareInAnimation();\n                  if (animatorIn) {\n                    currentAnimation = animatorIn.start();\n                    currentAnimation.done(() => {\n                      currentAnimation = null;\n                      end();\n                      runner.complete();\n                    });\n                    return currentAnimation;\n                  }\n                }\n                // in the event that there is no `in` animation\n                end();\n                runner.complete();\n              });\n\n              runner = new $$AnimateRunner({\n                end: endFn,\n                cancel: endFn,\n              });\n\n              return runner;\n\n              function endFn() {\n                if (currentAnimation) {\n                  currentAnimation.end();\n                }\n              }\n            },\n          };\n\n          function calculateAnchorStyles(anchor) {\n            const styles = {};\n\n            const coords = anchor.getBoundingClientRect();\n\n            // we iterate directly since safari messes up and doesn't return\n            // all the keys for the coords object when iterated\n            [\"width\", \"height\", \"top\", \"left\"].forEach((key) => {\n              let value = coords[key];\n              switch (key) {\n                case \"top\":\n                  value += bodyNode.scrollTop;\n                  break;\n                case \"left\":\n                  value += bodyNode.scrollLeft;\n                  break;\n              }\n              styles[key] = `${Math.floor(value)}px`;\n            });\n            return styles;\n          }\n\n          function prepareOutAnimation() {\n            const animator = $animateCss(clone, {\n              addClass: NG_OUT_ANCHOR_CLASS_NAME,\n              delay: true,\n              from: calculateAnchorStyles(outAnchor),\n            });\n\n            // read the comment within `prepareRegularAnimation` to understand\n            // why this check is necessary\n            return animator.$$willAnimate ? animator : null;\n          }\n\n          function getClassVal(element) {\n            return element.getAttribute(\"class\") || \"\";\n          }\n\n          function prepareInAnimation() {\n            const endingClasses = filterCssClasses(getClassVal(inAnchor));\n            const toAdd = getUniqueValues(endingClasses, startingClasses);\n            const toRemove = getUniqueValues(startingClasses, endingClasses);\n\n            const animator = $animateCss(clone, {\n              to: calculateAnchorStyles(inAnchor),\n              addClass: `${NG_IN_ANCHOR_CLASS_NAME} ${toAdd}`,\n              removeClass: `${NG_OUT_ANCHOR_CLASS_NAME} ${toRemove}`,\n              delay: true,\n            });\n\n            // read the comment within `prepareRegularAnimation` to understand\n            // why this check is necessary\n            return animator.$$willAnimate ? animator : null;\n          }\n\n          function end() {\n            clone.remove();\n            outAnchor[0].classList.remove(NG_ANIMATE_SHIM_CLASS_NAME);\n            inAnchor[0].classList.remove(NG_ANIMATE_SHIM_CLASS_NAME);\n          }\n        }\n\n        function prepareFromToAnchorAnimation(from, to, anchors) {\n          const fromAnimation = prepareRegularAnimation(from);\n          const toAnimation = prepareRegularAnimation(to);\n\n          const anchorAnimations = [];\n          anchors.forEach((anchor) => {\n            const outElement = anchor.out;\n            const inElement = anchor.in;\n            const animator = prepareAnchoredAnimation(outElement, inElement);\n            if (animator) {\n              anchorAnimations.push(animator);\n            }\n          });\n\n          // no point in doing anything when there are no elements to animate\n          if (!fromAnimation && !toAnimation && anchorAnimations.length === 0)\n            return;\n\n          return {\n            start() {\n              const animationRunners = [];\n\n              if (fromAnimation) {\n                animationRunners.push(fromAnimation.start());\n              }\n\n              if (toAnimation) {\n                animationRunners.push(toAnimation.start());\n              }\n\n              anchorAnimations.forEach((animation) => {\n                animationRunners.push(animation.start());\n              });\n\n              const runner = new $$AnimateRunner({\n                end: endFn,\n                cancel: endFn, // CSS-driven animations cannot be cancelled, only ended\n              });\n\n              $$AnimateRunner.all(animationRunners, (status) => {\n                runner.complete(status);\n              });\n\n              return runner;\n\n              function endFn() {\n                animationRunners.forEach((runner) => {\n                  runner.end();\n                });\n              }\n            },\n          };\n        }\n\n        function prepareRegularAnimation(animationDetails) {\n          const options = animationDetails.options || {};\n\n          if (animationDetails.structural) {\n            options.event = animationDetails.event;\n            options.structural = true;\n            options.applyClassesEarly = true;\n\n            // we special case the leave animation since we want to ensure that\n            // the element is removed as soon as the animation is over. Otherwise\n            // a flicker might appear or the element may not be removed at all\n            if (animationDetails.event === \"leave\") {\n              options.onDone = options.domOperation;\n            }\n          }\n\n          // We assign the preparationClasses as the actual animation event since\n          // the internals of $animateCss will just suffix the event token values\n          // with `-active` to trigger the animation.\n          if (options.preparationClasses) {\n            options.event = concatWithSpace(\n              options.event,\n              options.preparationClasses,\n            );\n          }\n\n          const animator = $animateCss(animationDetails.element, options);\n\n          // the driver lookup code inside of $$animation attempts to spawn a\n          // driver one by one until a driver returns a.$$willAnimate animator object.\n          // $animateCss will always return an object, however, it will pass in\n          // a flag as a hint as to whether an animation was detected or not\n\n          return animator.$$willAnimate ? animator : null;\n        }\n      },\n    ];\n  }\n\n  function filterCssClasses(classes) {\n    // remove all the `ng-` stuff\n    return classes.replace(/\\bng-\\S+\\b/g, \"\");\n  }\n\n  function getUniqueValues(a, b) {\n    if (isString(a)) a = a.split(\" \");\n    if (isString(b)) b = b.split(\" \");\n    return a.filter((val) => b.indexOf(val) === -1).join(\" \");\n  }\n\n  AnimateJsDriverProvider.$inject = [\"$$animationProvider\"];\n  function AnimateJsDriverProvider($$animationProvider) {\n    $$animationProvider.drivers.push(\"$$animateJsDriver\");\n    this.$get = [\n      \"$$animateJs\",\n      \"$$AnimateRunner\",\n      function ($$animateJs, $$AnimateRunner) {\n        return function initDriverFn(animationDetails) {\n          if (animationDetails.from && animationDetails.to) {\n            const fromAnimation = prepareAnimation(animationDetails.from);\n            const toAnimation = prepareAnimation(animationDetails.to);\n            if (!fromAnimation && !toAnimation) return;\n\n            return {\n              start() {\n                const animationRunners = [];\n\n                if (fromAnimation) {\n                  animationRunners.push(fromAnimation.start());\n                }\n\n                if (toAnimation) {\n                  animationRunners.push(toAnimation.start());\n                }\n\n                $$AnimateRunner.all(animationRunners, done);\n\n                const runner = new $$AnimateRunner({\n                  end: endFnFactory(),\n                  cancel: endFnFactory(),\n                });\n\n                return runner;\n\n                function endFnFactory() {\n                  return function () {\n                    animationRunners.forEach((runner) => {\n                      // at this point we cannot cancel animations for groups just yet. 1.5+\n                      runner.end();\n                    });\n                  };\n                }\n\n                function done(status) {\n                  runner.complete(status);\n                }\n              },\n            };\n          }\n          return prepareAnimation(animationDetails);\n        };\n\n        function prepareAnimation(animationDetails) {\n          // TODO(matsko): make sure to check for grouped animations and delegate down to normal animations\n          const { element, event, options, classes } = animationDetails;\n          return $$animateJs(element, event, classes, options);\n        }\n      },\n    ];\n  }\n\n  ngAnimateSwapDirective.$inject = [\"$animate\"];\n  /**\n   * @returns {import('../interface.ts').Directive}\n   */\n  function ngAnimateSwapDirective($animate) {\n    return {\n      restrict: \"A\",\n      transclude: \"element\",\n      terminal: true,\n      priority: 550, // We use 550 here to ensure that the directive is caught before others,\n      // but after `ngIf` (at priority 600).\n      link(scope, $element, attrs, ctrl, $transclude) {\n        let previousElement;\n        let previousScope;\n        scope.$watch(attrs[\"ngAnimateSwap\"] || attrs[\"for\"], (value) => {\n          if (previousElement) {\n            $animate.leave(previousElement);\n          }\n          if (previousScope) {\n            previousScope.$destroy();\n            previousScope = null;\n          }\n          if (value) {\n            $transclude((clone, childScope) => {\n              previousElement = clone;\n              previousScope = childScope;\n              $animate.enter(clone, null, $element);\n            });\n          }\n        });\n      },\n    };\n  }\n\n  $$AnimateChildrenDirective.$inject = [$injectTokens.$interpolate];\n\n  /**\n   * @param {*} $interpolate\n   * @returns {import(\"../interface.ts\").Directive}\n   */\n  function $$AnimateChildrenDirective($interpolate) {\n    return {\n      link(scope, element, attrs) {\n        const val = attrs[\"ngAnimateChildren\"];\n        if (isString(val) && val.length === 0) {\n          // empty attribute\n          setCacheData(element, NG_ANIMATE_CHILDREN_DATA, true);\n        } else {\n          // Interpolate and set the value, so that it is available to\n          // animations that run right after compilation\n          setData($interpolate(val)(scope));\n          attrs.$observe(\"ngAnimateChildren\", setData);\n        }\n\n        function setData(value) {\n          value = value === \"on\" || value === \"true\";\n          setCacheData(element, NG_ANIMATE_CHILDREN_DATA, value);\n        }\n      },\n    };\n  }\n\n  /**\n   * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n   *\n   * Given a function with N parameters, returns a new function that supports partial application.\n   * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n   * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n   * accept more parameters until all N parameters have been supplied.\n   *\n   *\n   * This contrived example uses a partially applied function as an predicate, which returns true\n   * if an object is found in both arrays.\n   * @example\n   * ```\n   * // returns true if an object is in both of the two arrays\n   * function inBoth(array1, array2, object) {\n   *   return array1.indexOf(object) !== -1 &&\n   *          array2.indexOf(object) !== 1;\n   * }\n   * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n   * let foos = [obj1, obj3]\n   * let bars = [obj3, obj4, obj5]\n   *\n   * // A curried \"copy\" of inBoth\n   * let curriedInBoth = curry(inBoth);\n   * // Partially apply both the array1 and array2\n   * let inFoosAndBars = curriedInBoth(foos, bars);\n   *\n   * // Supply the final argument; since all arguments are\n   * // supplied, the original inBoth function is then called.\n   * let obj1InBoth = inFoosAndBars(obj1); // false\n   *\n   * // Use the inFoosAndBars as a predicate.\n   * // Filter, on each iteration, supplies the final argument\n   * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n   * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n   *\n   * ```\n   *\n   * @param fn\n   * @returns {*|function(): (*|any)}\n   */\n  function curry(fn) {\n    return function curried() {\n      if (arguments.length >= fn.length) {\n        return fn.apply(this, arguments);\n      }\n      const args = Array.prototype.slice.call(arguments);\n      return curried.bind(this, ...args);\n    };\n  }\n  /**\n   * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n   * given: f(x), g(x), h(x)\n   * let composed = compose(f,g,h)\n   * then, composed is: f(g(h(x)))\n   */\n  function compose() {\n    const args = arguments;\n    const start = args.length - 1;\n    return function () {\n      let i = start,\n        result = args[start].apply(this, arguments);\n      while (i--) result = args[i].call(this, result);\n      return result;\n    };\n  }\n  /**\n   * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n   * given: f(x), g(x), h(x)\n   * let piped = pipe(f,g,h);\n   * then, piped is: h(g(f(x)))\n   */\n  function pipe() {\n    return compose.apply(null, [].slice.call(arguments).reverse());\n  }\n\n  /**\n   * Given a property name and a value, returns a function that returns a boolean based on whether\n   * the passed object has a property that matches the value\n   * let obj = { foo: 1, name: \"blarg\" };\n   * let getName = propEq(\"name\", \"blarg\");\n   * getName(obj) === true\n   */\n  const propEq = curry((name, _val, obj) => obj && obj[name] === _val);\n  /**\n   * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n   * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n   * let getName = prop(\"nestedObj.name\");\n   * getName(obj) === \"blarg\"\n   * let propNotFound = prop(\"this.property.doesnt.exist\");\n   * propNotFound(obj) === undefined\n   */\n  const parse = (name) =>\n    pipe.apply(\n      null,\n      name.split(\".\").map((name) => (obj) => obj && obj[name]),\n    );\n\n  /** Given a class, returns a Predicate function that returns true if the object is of that class */\n  const is = (ctor) => (obj) =>\n    (obj != null && obj.constructor === ctor) || obj instanceof ctor;\n\n  /** Given a value, returns a function which returns the value */\n  const val = (v) => () => v;\n  /**\n   * Sorta like Pattern Matching (a functional programming conditional construct)\n   *\n   * See http://c2.com/cgi/wiki?PatternMatching\n   *\n   * This is a conditional construct which allows a series of predicates and output functions\n   * to be checked and then applied.  Each predicate receives the input.  If the predicate\n   * returns truthy, then its matching output function (mapping function) is provided with\n   * the input and, then the result is returned.\n   *\n   * Each combination (2-tuple) of predicate + output function should be placed in an array\n   * of size 2: [ predicate, mapFn ]\n   *\n   * These 2-tuples should be put in an outer array.\n   *\n   * @example\n   * ```\n   *\n   * // Here's a 2-tuple where the first element is the isString predicate\n   * // and the second element is a function that returns a description of the input\n   * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n   *\n   * // Second tuple: predicate \"isNumber\", mapfn returns a description\n   * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n   *\n   * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n   *\n   * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n   *\n   * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n   *\n   * console.log(descriptionOf(undefined)); // 'notdefined'\n   * console.log(descriptionOf(55)); // '(55) That's a number!'\n   * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n   * ```\n   *\n   * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n   * with a Predicate and a mapping/output function\n   * @returns {function(any): *}\n   */\n  function pattern(struct) {\n    return function (x) {\n      for (let i = 0; i < struct.length; i++) {\n        if (struct[i][0](x)) return struct[i][1](x);\n      }\n    };\n  }\n\n  function equals(o1, o2) {\n    if (o1 === o2) return true;\n    if (o1 === null || o2 === null) return false;\n    if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n    const t1 = typeof o1,\n      t2 = typeof o2;\n    if (t1 !== t2 || t1 !== \"object\") return false;\n    const tup = [o1, o2];\n    if (tup.every(Array.isArray)) return _arraysEq(o1, o2);\n    if (tup.every(isDate)) return o1.getTime() === o2.getTime();\n    if (tup.every(isRegExp)) return o1.toString() === o2.toString();\n    if (tup.every(isFunction)) return true; // meh\n    if ([isFunction, Array.isArray, isDate, isRegExp].some((fn) => !!fn(tup))) {\n      return false;\n    }\n    const keys = {};\n\n    for (const key in o1) {\n      if (!equals(o1[key], o2[key])) return false;\n      keys[key] = true;\n    }\n    for (const key in o2) {\n      if (!keys[key]) return false;\n    }\n    return true;\n  }\n  /**\n   * Builds proxy functions on the `to` object which pass through to the `from` object.\n   *\n   * For each key in `fnNames`, creates a proxy function on the `to` object.\n   * The proxy function calls the real function on the `from` object.\n   *\n   *\n   * #### Example:\n   * This example creates an new class instance whose functions are prebound to the new'd object.\n   * ```js\n   * class Foo {\n   *   constructor(data) {\n   *     // Binds all functions from Foo.prototype to 'this',\n   *     // then copies them to 'this'\n   *     bindFunctions(Foo.prototype, this, this);\n   *     this.data = data;\n   *   }\n   *\n   *   log() {\n   *     console.log(this.data);\n   *   }\n   * }\n   *\n   * let myFoo = new Foo([1,2,3]);\n   * var logit = myFoo.log;\n   * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n   * ```\n   *\n   * #### Example:\n   * This example creates a bound version of a service function, and copies it to another object\n   * ```\n   *\n   * var SomeService = {\n   *   this.data = [3, 4, 5];\n   *   this.log = function() {\n   *     console.log(this.data);\n   *   }\n   * }\n   *\n   * // Constructor fn\n   * function OtherThing() {\n   *   // Binds all functions from SomeService to SomeService,\n   *   // then copies them to 'this'\n   *   bindFunctions(SomeService, this, SomeService);\n   * }\n   *\n   * let myOtherThing = new OtherThing();\n   * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n   * ```\n   *\n   * @param source A function that returns the source object which contains the original functions to be bound\n   * @param target A function that returns the target object which will receive the bound functions\n   * @param bind A function that returns the object which the functions will be bound to\n   * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n   * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n   */\n  function createProxyFunctions(\n    source,\n    target,\n    bind,\n    fnNames,\n    latebind = false,\n  ) {\n    const bindFunction = (fnName) => source()[fnName].bind(bind());\n    const makeLateRebindFn = (fnName) =>\n      function lateRebindFunction() {\n        target[fnName] = bindFunction(fnName);\n        return target[fnName].apply(null, arguments);\n      };\n    fnNames = fnNames || Object.keys(source());\n    return fnNames.reduce((acc, name) => {\n      acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n      return acc;\n    }, target);\n  }\n  /**\n   * prototypal inheritance helper.\n   * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n   */\n\n  /**\n   * prototypal inheritance helper.\n   * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it.\n   *\n   * @param {Object} parent - The object to be used as the prototype.\n   * @param {Object} [extra] - The object containing additional properties to be copied.\n   * @returns {Object} - A new object with `parent` as its prototype and properties from `extra`.\n   */\n  function inherit(parent, extra) {\n    const newObj = Object.create(parent);\n    if (extra) {\n      Object.assign(newObj, extra);\n    }\n    return newObj;\n  }\n\n  /**\n   * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n   * The same array is returned\n   */\n  const removeFrom = curry(_removeFrom);\n  function _removeFrom(array, obj) {\n    const idx = array.indexOf(obj);\n    if (idx >= 0) array.splice(idx, 1);\n    return array;\n  }\n\n  /**\n   * Applies a set of defaults to an options object.  The options object is filtered\n   * to only those properties of the objects in the defaultsList.\n   * Earlier objects in the defaultsList take precedence when applying defaults.\n   */\n  function defaults(opts, ...defaultsList) {\n    const defaultVals = Object.assign({}, ...defaultsList.reverse());\n    return Object.assign(defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n  }\n\n  /**\n   * Finds the common ancestor path between two states.\n   *\n   * @param {Object} first The first state.\n   * @param {Object} second The second state.\n   * @return {Array} Returns an array of state names in descending order, not including the root.\n   */\n  function ancestors(first, second) {\n    const path = [];\n    for (const n in first.path) {\n      if (first.path[n] !== second.path[n]) break;\n      path.push(first.path[n]);\n    }\n    return path;\n  }\n  /**\n   * Return a copy of the object only containing the whitelisted properties.\n   *\n   * #### Example:\n   * ```\n   * var foo = { a: 1, b: 2, c: 3 };\n   * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n   * ```\n   * @param obj the source object\n   * @param propNames an Array of strings, which are the whitelisted property names\n   */\n  function pick(obj, propNames) {\n    const objCopy = {};\n    for (const _prop in obj) {\n      if (propNames.indexOf(_prop) !== -1) {\n        objCopy[_prop] = obj[_prop];\n      }\n    }\n    return objCopy;\n  }\n  /**\n   * Return a copy of the object omitting the blacklisted properties.\n   *\n   * @example\n   * ```\n   *\n   * var foo = { a: 1, b: 2, c: 3 };\n   * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n   * ```\n   * @param obj the source object\n   * @param propNames an Array of strings, which are the blacklisted property names\n   */\n  function omit(obj, propNames) {\n    return Object.keys(obj)\n      .filter((x) => !propNames.includes(x))\n      .reduce((acc, key) => ((acc[key] = obj[key]), acc), {});\n  }\n\n  /** Filters an Array or an Object's properties based on a predicate */\n  function filter(collection, callback) {\n    const arr = Array.isArray(collection),\n      result = arr ? [] : {};\n    const accept = arr ? (x) => result.push(x) : (x, key) => (result[key] = x);\n    Object.entries(collection).forEach(([i, item]) => {\n      if (callback(item, i)) accept(item, i);\n    });\n    return result;\n  }\n\n  /** Finds an object from an array, or a property of an object, that matches a predicate */\n  function find(collection, callback) {\n    let result;\n    Object.entries(collection).forEach(([i, item]) => {\n      if (result) return;\n      if (callback(item, i)) result = item;\n    });\n    return result;\n  }\n\n  /** Maps an array or object properties using a callback function */\n  function map(collection, callback, target) {\n    target = target || (Array.isArray(collection) ? [] : {});\n    Object.entries(collection).forEach(\n      ([i, item]) => (target[i] = callback(item, i)),\n    );\n    return target;\n  }\n\n  /**\n   * Reduce function that returns true if all of the values are truthy.\n   *\n   * @example\n   * ```\n   *\n   * let vals = [ 1, true, {}, \"hello world\"];\n   * vals.reduce(allTrueR, true); // true\n   *\n   * vals.push(0);\n   * vals.reduce(allTrueR, true); // false\n   * ```\n   */\n  const allTrueR = (memo, elem) => memo && elem;\n  /**\n   * Reduce function that returns true if any of the values are truthy.\n   *\n   *  * @example\n   * ```\n   *\n   * let vals = [ 0, null, undefined ];\n   * vals.reduce(anyTrueR, true); // false\n   *\n   * vals.push(\"hello world\");\n   * vals.reduce(anyTrueR, true); // true\n   * ```\n   */\n  const anyTrueR = (memo, elem) => memo || elem;\n  /**\n   * Reduce function which un-nests a single level of arrays\n   * @example\n   * ```\n   *\n   * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n   * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n   * ```\n   */\n  const unnestR = (memo, elem) => memo.concat(elem);\n  /**\n   * Reduce function that pushes an object to an array, then returns the array.\n   * Mostly just for [[flattenR]] and [[uniqR]]\n   */\n  function pushR(arr, obj) {\n    arr.push(obj);\n    return arr;\n  }\n  /** Reduce function that filters out duplicates */\n  const uniqR = (acc, token) =>\n    acc.includes(token) ? acc : pushR(acc, token);\n  /**\n   * Return a new array with a single level of arrays unnested.\n   *\n   * @example\n   * ```\n   *\n   * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n   * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n   * ```\n   */\n  const unnest = (arr) => arr.reduce(unnestR, []);\n\n  /**\n   * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n   * @example\n   * ```\n   *\n   * let isNumber = (obj) => typeof(obj) === 'number';\n   * let allNumbers = [ 1, 2, 3, 4, 5 ];\n   * allNumbers.filter(assertPredicate(isNumber)); //OK\n   *\n   * let oneString = [ 1, 2, 3, 4, \"5\" ];\n   * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n   * ```\n   */\n  const assertPredicate = assertFn;\n\n  function assertFn(predicateOrMap, errMsg = \"assert failure\") {\n    return (obj) => {\n      const result = predicateOrMap(obj);\n      if (!result) {\n        throw new Error(errMsg);\n      }\n      return result;\n    };\n  }\n  /**\n   * Given two or more parallel arrays, returns an array of tuples where\n   * each tuple is composed of [ a[i], b[i], ... z[i] ]\n   *\n   * @example\n   * ```\n   *\n   * let foo = [ 0, 2, 4, 6 ];\n   * let bar = [ 1, 3, 5, 7 ];\n   * let baz = [ 10, 30, 50, 70 ];\n   * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n   * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n   * ```\n   */\n  function arrayTuples(...args) {\n    if (args.length === 0) return [];\n    const maxArrayLen = args.reduce(\n      (min, arr) => Math.min(arr.length, min),\n      9007199254740991,\n    ); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n    const result = [];\n    for (let i = 0; i < maxArrayLen; i++) {\n      // This is a hot function\n      // Unroll when there are 1-4 arguments\n      switch (args.length) {\n        case 1:\n          result.push([args[0][i]]);\n          break;\n        case 2:\n          result.push([args[0][i], args[1][i]]);\n          break;\n        case 3:\n          result.push([args[0][i], args[1][i], args[2][i]]);\n          break;\n        case 4:\n          result.push([args[0][i], args[1][i], args[2][i], args[3][i]]);\n          break;\n        default:\n          result.push(args.map((array) => array[i]));\n          break;\n      }\n    }\n    return result;\n  }\n  /**\n   * Reduce function which builds an object from an array of [key, value] pairs.\n   *\n   * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n   *\n   * Each keyValueTuple should be an array with values [ key: string, value: any ]\n   *\n   * @example\n   * ```\n   *\n   * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n   *\n   * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n   * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n   *\n   * // Or, more simply:\n   * var pairsToObj = pairs.reduce(applyPairs, {})\n   * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n   * ```\n   */\n  function applyPairs(memo, keyValTuple) {\n    let key, value;\n    if (Array.isArray(keyValTuple)) [key, value] = keyValTuple;\n    if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n    memo[key] = value;\n    return memo;\n  }\n\n  /**\n   * Returns the last element of an array, or undefined if the array is empty.\n   * @template T\n   * @param {T[]} arr - The input array.\n   * @returns {T | undefined} The last element or undefined.\n   */\n  function tail(arr) {\n    return arr.length > 0 ? arr[arr.length - 1] : undefined;\n  }\n\n  /**\n   * shallow copy from src to dest\n   */\n  function copy(src, dest) {\n    if (dest) Object.keys(dest).forEach((key) => delete dest[key]);\n    if (!dest) dest = {};\n    return Object.assign(dest, src);\n  }\n\n  function _arraysEq(a1, a2) {\n    if (a1.length !== a2.length) return false;\n    return arrayTuples(a1, a2).reduce((b, t) => b && equals(t[0], t[1]), true);\n  }\n  // issue #2676\n  const silenceUncaughtInPromise = (promise) =>\n    promise.catch(() => 0) && promise;\n  const silentRejection = (error) =>\n    silenceUncaughtInPromise(Promise.reject(error));\n\n  /**\n   * An internal class which implements [[ParamTypeDefinition]].\n   *\n   * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n   * When a param type definition is registered, an instance of this class is created internally.\n   *\n   * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n   *\n   * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n   *\n   * #### Example:\n   * ```js\n   * var paramTypeDef = {\n   *   decode: function(val) { return parseInt(val, 10); },\n   *   encode: function(val) { return val && val.toString(); },\n   *   equals: function(a, b) { return this.is(a) && a === b; },\n   *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n   *   pattern: /\\d+/\n   * }\n   *\n   * var paramType = new ParamType(paramTypeDef);\n   * ```\n   */\n  class ParamType {\n    /**\n     * @param def  A configuration object which contains the custom type definition.  The object's\n     *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n     */\n    constructor(def) {\n      this.pattern = /.*/;\n      this.inherit = true;\n      Object.assign(this, def);\n      this.name = undefined;\n    }\n    // consider these four methods to be \"abstract methods\" that should be overridden\n\n    is(val) {\n      return !!val;\n    }\n    encode(val) {\n      return val;\n    }\n    decode(val) {\n      return val;\n    }\n    equals(a, b) {\n      return a == b;\n    }\n    $subPattern() {\n      const sub = this.pattern.toString();\n      return sub.substring(1, sub.length - 2);\n    }\n    toString() {\n      return `{ParamType:${this.name}}`;\n    }\n    /** Given an encoded string, or a decoded object, returns a decoded object */\n    $normalize(val) {\n      return this.is(val) ? val : this.decode(val);\n    }\n    /**\n     * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n     * e.g.:\n     * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n     * - url: \"/path?queryParam=1&queryParam=2\n     * - $stateParams.queryParam will be [1, 2]\n     * if `mode` is \"auto\", then\n     * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n     * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n     */\n    $asArray(mode, isSearch) {\n      if (!mode) return this;\n      if (mode === \"auto\" && !isSearch)\n        throw new Error(\"'auto' array mode is for query parameters only\");\n      return new ArrayType(this, mode);\n    }\n  }\n  /** Wraps up a `ParamType` object to handle array values. */\n  function ArrayType(type, mode) {\n    // Wrap non-array value as array\n    function arrayWrap(val) {\n      return Array.isArray(val) ? val : isDefined(val) ? [val] : [];\n    }\n    // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n    function arrayUnwrap(val) {\n      switch (val.length) {\n        case 0:\n          return undefined;\n        case 1:\n          return mode === \"auto\" ? val[0] : val;\n        default:\n          return val;\n      }\n    }\n    // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n    function arrayHandler(callback, allTruthyMode) {\n      return function handleArray(val) {\n        if (Array.isArray(val) && val.length === 0) return val;\n        const arr = arrayWrap(val);\n        const result = map(arr, callback);\n        return allTruthyMode === true\n          ? filter(result, (x) => !x).length === 0\n          : arrayUnwrap(result);\n      };\n    }\n    // Wraps type (.equals) functions to operate on each value of an array\n    function arrayEqualsHandler(callback) {\n      return function handleArray(val1, val2) {\n        const left = arrayWrap(val1),\n          right = arrayWrap(val2);\n        if (left.length !== right.length) return false;\n        for (let i = 0; i < left.length; i++) {\n          if (!callback(left[i], right[i])) return false;\n        }\n        return true;\n      };\n    }\n    [\"encode\", \"decode\", \"equals\", \"$normalize\"].forEach((name) => {\n      const paramTypeFn = type[name].bind(type);\n      const wrapperFn = name === \"equals\" ? arrayEqualsHandler : arrayHandler;\n      this[name] = wrapperFn(paramTypeFn);\n    });\n    Object.assign(this, {\n      dynamic: type.dynamic,\n      name: type.name,\n      pattern: type.pattern,\n      inherit: type.inherit,\n      raw: type.raw,\n      is: arrayHandler(type.is.bind(type), true),\n      $arrayMode: mode,\n    });\n  }\n\n  /**\n   * A registry for parameter types.\n   *\n   * This registry manages the built-in (and custom) parameter types.\n   *\n   * The built-in parameter types are:\n   *\n   * - [[string]]\n   * - [[path]]\n   * - [[query]]\n   * - [[hash]]\n   * - [[int]]\n   * - [[bool]]\n   * - [[date]]\n   * - [[json]]\n   * - [[any]]\n   *\n   * To register custom parameter types, use [[UrlConfig.type]], i.e.,\n   *\n   * ```js\n   * router.urlService.config.type(customType)\n   * ```\n   */\n  class ParamTypes {\n    constructor() {\n      this.enqueue = true;\n      this.typeQueue = [];\n      this.defaultTypes = pick(ParamTypes.prototype, [\n        \"hash\",\n        \"string\",\n        \"query\",\n        \"path\",\n        \"int\",\n        \"bool\",\n        \"date\",\n        \"json\",\n        \"any\",\n      ]);\n      // Register default types. Store them in the prototype of this.types.\n      const makeType = (definition, name) =>\n        new ParamType(Object.assign({ name }, definition));\n      this.types = inherit(map(this.defaultTypes, makeType), {});\n    }\n    /**\n     * Registers a parameter type\n     *\n     * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n     */\n    type(name, definition, definitionFn) {\n      if (!isDefined(definition)) return this.types[name];\n      if (hasOwn(this.types, name))\n        throw new Error(`A type named '${name}' has already been defined.`);\n      this.types[name] = new ParamType(Object.assign({ name }, definition));\n      if (definitionFn) {\n        this.typeQueue.push({ name, def: definitionFn });\n        if (!this.enqueue) this._flushTypeQueue();\n      }\n      return this;\n    }\n    _flushTypeQueue() {\n      while (this.typeQueue.length) {\n        const type = this.typeQueue.shift();\n        if (type.pattern)\n          throw new Error(\"You cannot override a type's .pattern at runtime.\");\n        Object.assign(\n          this.types[type.name],\n          window[\"angular\"].$injector.invoke(type.def),\n        );\n      }\n    }\n  }\n  function initDefaultTypes() {\n    const makeDefaultType = (def) => {\n      const valToString = (val) => (val != null ? val.toString() : val);\n      const defaultTypeBase = {\n        encode: valToString,\n        decode: valToString,\n        is: is(String),\n        pattern: /.*/,\n\n        equals: (a, b) => a == b, // allow coersion for null/undefined/\"\"\n      };\n      return Object.assign({}, defaultTypeBase, def);\n    };\n    // Default Parameter Type Definitions\n    Object.assign(ParamTypes.prototype, {\n      string: makeDefaultType({}),\n      path: makeDefaultType({\n        pattern: /[^/]*/,\n      }),\n      query: makeDefaultType({}),\n      hash: makeDefaultType({\n        inherit: false,\n      }),\n      int: makeDefaultType({\n        decode: (val) => parseInt(val, 10),\n        is: function (val) {\n          return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n        },\n        pattern: /-?\\d+/,\n      }),\n      bool: makeDefaultType({\n        encode: (val) => (val && 1) || 0,\n        decode: (val) => parseInt(val, 10) !== 0,\n        is: is(Boolean),\n        pattern: /[01]/,\n      }),\n      date: makeDefaultType({\n        encode: function (val) {\n          return !this.is(val)\n            ? undefined\n            : [\n                val.getFullYear(),\n                (\"0\" + (val.getMonth() + 1)).slice(-2),\n                (\"0\" + val.getDate()).slice(-2),\n              ].join(\"-\");\n        },\n        decode: function (val) {\n          if (this.is(val)) return val;\n          const match = this.capture.exec(val);\n          return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n        },\n        is: (val) => val instanceof Date && !isNaN(val.valueOf()),\n        equals(l, r) {\n          return [\"getFullYear\", \"getMonth\", \"getDate\"].reduce(\n            (acc, fn) => acc && l[fn]() === r[fn](),\n            true,\n          );\n        },\n        pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n        capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/,\n      }),\n      json: makeDefaultType({\n        encode: JSON.stringify,\n        decode: JSON.parse,\n        is: is(Object),\n        equals: equals,\n        pattern: /[^/]*/,\n      }),\n      // does not encode/decode\n      any: makeDefaultType({\n        encode: (x) => x,\n        decode: (x) => x,\n        is: () => true,\n        equals: equals,\n      }),\n    });\n  }\n  initDefaultTypes();\n\n  /**\n   * An API to customize the URL behavior and retrieve URL configuration\n   *\n   * This API is used to customize the behavior of the URL.\n   * This includes optional trailing slashes ([[strictMode]]), case sensitivity ([[caseInsensitive]]),\n   * and custom parameter encoding (custom [[type]]).\n   *\n   * It also has information about the location (url) configuration such as [[port]] and [[baseHref]].\n   * This information can be used to build absolute URLs, such as\n   * `https://example.com:443/basepath/state/substate?param1=a#hashvalue`;\n   *\n   * This API is found at `router.urlService.config` (see: [[UIRouter.urlService]], [[URLService.config]])\n   */\n  class UrlConfigProvider {\n    constructor() {\n      /** @type {ParamTypes} */\n      this.paramTypes = new ParamTypes();\n      /** @type {boolean} */\n      this._isCaseInsensitive = false;\n      /** @type {boolean} */\n      this._isStrictMode = true;\n      /** @type {boolean} */\n      this._defaultSquashPolicy = false;\n      /**\n       * Applys ng1-specific path parameter encoding\n       *\n       * The Angular 1 `$location` service is a bit weird.\n       * It doesn't allow slashes to be encoded/decoded bi-directionally.\n       *\n       * See the writeup at https://github.com/angular-ui/ui-router/issues/2598\n       *\n       * This code patches the `path` parameter type so it encoded/decodes slashes as ~2F\n       *\n       */\n      const pathType = this.type(\"path\");\n      pathType.encode = (x) =>\n        x != null\n          ? x.toString().replace(/([~/])/g, (m) => ({ \"~\": \"~~\", \"/\": \"~2F\" })[m])\n          : x;\n      pathType.decode = (x) =>\n        x != null\n          ? x\n              .toString()\n              .replace(/(~~|~2F)/g, (m) => ({ \"~~\": \"~\", \"~2F\": \"/\" })[m])\n          : x;\n      this.paramTypes.enqueue = false;\n      this.paramTypes._flushTypeQueue();\n    }\n\n    $get = [\n      function () {\n        return this;\n      },\n    ];\n\n    /**\n     * Defines whether URL matching should be case sensitive (the default behavior), or not.\n     *\n     * #### Example:\n     * ```js\n     * // Allow case insensitive url matches\n     * urlService.config.caseInsensitive(true);\n     * ```\n     *\n     * @param value `false` to match URL in a case sensitive manner; otherwise `true`;\n     * @returns the current value of caseInsensitive\n     */\n    caseInsensitive(value) {\n      return (this._isCaseInsensitive = isDefined(value)\n        ? value\n        : this._isCaseInsensitive);\n    }\n    /**\n     * Sets the default behavior when generating or matching URLs with default parameter values.\n     *\n     * #### Example:\n     * ```js\n     * // Remove default parameter values from the url\n     * urlService.config.defaultSquashPolicy(true);\n     * ```\n     *\n     * @param value A string that defines the default parameter URL squashing behavior.\n     *    - `nosquash`: When generating an href with a default parameter value, do not squash the parameter value from the URL\n     *    - `slash`: When generating an href with a default parameter value, squash (remove) the parameter value, and, if the\n     *      parameter is surrounded by slashes, squash (remove) one slash from the URL\n     *    - any other string, e.g. \"~\": When generating an href with a default parameter value, squash (remove)\n     *      the parameter value from the URL and replace it with this string.\n     * @returns the current value of defaultSquashPolicy\n     */\n    defaultSquashPolicy(value) {\n      if (\n        isDefined(value) &&\n        value !== true &&\n        value !== false &&\n        !isString(value)\n      )\n        throw new Error(\n          `Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`,\n        );\n      return (this._defaultSquashPolicy = isDefined(value)\n        ? value\n        : this._defaultSquashPolicy);\n    }\n    /**\n     * Defines whether URLs should match trailing slashes, or not (the default behavior).\n     *\n     * #### Example:\n     * ```js\n     * // Allow optional trailing slashes\n     * urlService.config.strictMode(false);\n     * ```\n     *\n     * @param value `false` to match trailing slashes in URLs, otherwise `true`.\n     * @returns the current value of strictMode\n     */\n    strictMode(value) {\n      return (this._isStrictMode = isDefined(value) ? value : this._isStrictMode);\n    }\n    /**\n     * Creates and registers a custom [[ParamType]] object\n     *\n     * A custom parameter type can be used to generate URLs with typed parameters or custom encoding/decoding.\n     *\n     * #### Note: Register custom types *before using them* in a state definition.\n     *\n     * #### Example:\n     * ```js\n     * // Encode object parameter as JSON string\n     * urlService.config.type('myjson', {\n     *   encode: (obj) => JSON.stringify(obj),\n     *   decode: (str) => JSON.parse(str),\n     *   is: (val) => typeof(val) === 'object',\n     *   pattern: /[^/]+/,\n     *   equals: (a, b) => _.isEqual(a, b),\n     * });\n     * ```\n     *\n     * See [[ParamTypeDefinition]] for more examples\n     *\n     * @param name The type name.\n     * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n     * @param definitionFn A function that is injected before the app runtime starts.\n     *        The result of this function should be a [[ParamTypeDefinition]].\n     *        The result is merged into the existing `definition`.\n     *        See [[ParamType]] for information on the values accepted.\n     *\n     * @returns if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n     */\n    type(name, definition, definitionFn) {\n      const type = this.paramTypes.type(name, definition, definitionFn);\n      return !isDefined(definition) ? type : this;\n    }\n  }\n\n  class StateParams {\n    constructor(params = {}) {\n      Object.assign(this, params);\n    }\n    /**\n     * Merges a set of parameters with all parameters inherited between the common parents of the\n     * current state and a given destination state.\n     *\n     * @param {Object} newParams The set of parameters which will be composited with inherited params.\n     * @param {Object} $current Internal definition of object representing the current state.\n     * @param {Object} $to Internal definition of object representing state to transition to.\n     */\n    $inherit(newParams, $current, $to) {\n      const parents = ancestors($current, $to),\n        inherited = {},\n        inheritList = [];\n      for (const i in parents) {\n        if (!parents[i] || !parents[i].params) continue;\n        const parentParams = parents[i].params;\n        const parentParamsKeys = Object.keys(parentParams);\n        if (!parentParamsKeys.length) continue;\n        for (const j in parentParamsKeys) {\n          if (\n            parentParams[parentParamsKeys[j]].inherit == false ||\n            inheritList.indexOf(parentParamsKeys[j]) >= 0\n          )\n            continue;\n          inheritList.push(parentParamsKeys[j]);\n          inherited[parentParamsKeys[j]] = this[parentParamsKeys[j]];\n        }\n      }\n      return Object.assign({}, inherited, newParams);\n    }\n  }\n\n  /**\n   * A simple bounded FIFO queue with optional eviction notifications.\n   * @template T\n   */\n  class Queue {\n    /**\n     * @param {T[]} [items=[]] - Initial queue items.\n     * @param {number|null} [limit=null] - Maximum allowed items before eviction (null = unlimited).\n     */\n    constructor(items = [], limit = null) {\n      /** @type {T[]} */\n      this._items = Array.isArray(items) ? [...items] : [];\n\n      /** @type {number|null} */\n      this._limit = Number.isInteger(limit) && limit > 0 ? limit : null;\n\n      /** @type {Array<(item: T) => void>} */\n      this._evictListeners = [];\n    }\n\n    /**\n     * Register a listener that will be called with the evicted item.\n     * @param {(item: T) => void} listener\n     */\n    onEvict(listener) {\n      this._evictListeners.push(listener);\n    }\n\n    /**\n     * Adds an item to the end of the queue, evicting the head if over limit.\n     * @param {T} item\n     * @returns {T}\n     */\n    enqueue(item) {\n      this._items.push(item);\n      if (this._limit !== null && this._items.length > this._limit) {\n        this.evict();\n      }\n      return item;\n    }\n\n    /**\n     * Removes the head item and notifies eviction listeners.\n     * @returns {T|undefined}\n     */\n    evict() {\n      const item = this._items.shift();\n      if (item !== undefined) {\n        this._evictListeners.forEach((fn) => fn(item));\n      }\n      return item;\n    }\n\n    /**\n     * Removes and returns the first item in the queue.\n     * @returns {T|undefined}\n     */\n    dequeue() {\n      return this._items.length > 0 ? this._items.shift() : undefined;\n    }\n\n    /**\n     * Clears all items from the queue.\n     * @returns {T[]} The previously stored items.\n     */\n    clear() {\n      const cleared = [...this._items];\n      this._items.length = 0;\n      return cleared;\n    }\n\n    /**\n     * Returns the current number of items.\n     * @returns {number}\n     */\n    size() {\n      return this._items.length;\n    }\n\n    /**\n     * Removes a specific item from the queue.\n     * @param {T} item\n     * @returns {T|false} The removed item, or false if not found.\n     */\n    remove(item) {\n      const index = this._items.indexOf(item);\n      return index !== -1 ? this._items.splice(index, 1)[0] : false;\n    }\n\n    /**\n     * Returns the item at the tail (last).\n     * @returns {T|undefined}\n     */\n    peekTail() {\n      return this._items[this._items.length - 1];\n    }\n\n    /**\n     * Returns the item at the head (first).\n     * @returns {T|undefined}\n     */\n    peekHead() {\n      return this._items[0];\n    }\n  }\n\n  /** @typedef {import('../interface.ts').ServiceProvider} ServiceProvider } */\n\n  /**\n   * Global router state\n   *\n   * This is where we hold the global mutable state such as current state, current\n   * params, current transition, etc.\n   */\n  class Router {\n    constructor() {\n      /**\n       * Current parameter values\n       *\n       * The parameter values from the latest successful transition\n       * @type {StateParams}\n       */\n      this.params = new StateParams();\n\n      /**\n       * @type {number}\n       */\n      this.lastStartedTransitionId = -1;\n\n      /**\n       * @type {Queue<import(\"./transition/transition.js\").Transition>}\n       */\n      this.transitionHistory = new Queue([], 1);\n\n      /**\n       * @type {Queue<import(\"./transition/transition.js\").Transition>}\n       */\n      this.successfulTransitions = new Queue([], 1);\n\n      /**\n       * @type {import(\"./state/interface.ts\").StateDeclaration|undefined}\n       */\n      this.current = undefined;\n\n      /**\n       * @type {import(\"./state/state-object.js\").StateObject|undefined}\n       */\n      this.$current = undefined;\n\n      /**\n       * @type {import(\"./transition/transition.js\").Transition|undefined}\n       */\n      this.transition = undefined;\n    }\n\n    $get = () => this;\n  }\n\n  /**\n   * Predicate which checks if a value is injectable\n   *\n   * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n   * where all the elements in the array are Strings, except the last one, which is a Function\n   * @param {*} val\n   * @returns {boolean}\n   */\n  function isInjectable(val) {\n    if (Array.isArray(val) && val.length) {\n      const head = val.slice(0, -1),\n        tail = val.slice(-1);\n\n      return !(\n        head.filter((x) => !isString(x)).length ||\n        tail.filter((x) => !isFunction(x)).length\n      );\n    }\n    return isFunction(val);\n  }\n  /**\n   * Predicate which checks if a value looks like a Promise\n   *\n   * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  function isPromise(obj) {\n    return (\n      obj !== null && typeof obj === \"object\" && typeof obj.then === \"function\"\n    );\n  }\n\n  /**\n   * Functions that manipulate strings\n   */\n\n  /**\n   * Returns a string shortened to a maximum length\n   *\n   * If the string is already less than the `max` length, return the string.\n   * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n   *\n   * @param max the maximum length of the string to return\n   * @param str the input string\n   */\n  function maxLength(max, str) {\n    if (str.length <= max) return str;\n    return str.substring(0, max - 3) + \"...\";\n  }\n  /**\n   * Returns a string, with spaces added to the end, up to a desired str length\n   *\n   * If the string is already longer than the desired length, return the string.\n   * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n   *\n   * @param length the desired length of the string to return\n   * @param str the input string\n   */\n  function padString(length, str) {\n    while (str.length < length) str += \" \";\n    return str;\n  }\n  function kebobString(camelCase) {\n    return camelCase\n      .replace(/^([A-Z])/, ($1) => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, ($1) => \"-\" + $1.toLowerCase()); // replace rest\n  }\n  function functionToString(fn) {\n    const fnStr = fnToString(fn);\n    const namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n    const toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n    const fnName = fn[\"name\"] || \"\";\n    if (fnName && toStr.match(/function \\(/)) {\n      return \"function \" + fnName + toStr.substring(9);\n    }\n    return toStr;\n  }\n  function fnToString(fn) {\n    const _fn = Array.isArray(fn) ? fn.slice(-1)[0] : fn;\n    return (_fn && _fn.toString()) || \"undefined\";\n  }\n  function stringify(o) {\n    const seen = [];\n    const isRejection = (obj) => {\n      return (\n        obj &&\n        typeof obj.then === \"function\" &&\n        obj.constructor.name == \"Rejection\"\n      );\n    };\n    const hasToString = (obj) =>\n      isObject(obj) &&\n      !Array.isArray(obj) &&\n      obj.constructor !== Object &&\n      isFunction(obj.toString);\n    const stringifyPattern = pattern([\n      [isUndefined, val(\"undefined\")],\n      [isNull, val(\"null\")],\n      [isPromise, val(\"[Promise]\")],\n      [isRejection, (x) => x._transitionRejection.toString()],\n      [hasToString, (x) => x.toString()],\n      [isInjectable, functionToString],\n      [val(true), (x) => x],\n    ]);\n    function format(value) {\n      if (isObject(value)) {\n        if (seen.indexOf(value) !== -1) return \"[circular ref]\";\n        seen.push(value);\n      }\n      return stringifyPattern(value);\n    }\n    if (isUndefined(o)) {\n      // Workaround for IE & Edge Spec incompatibility where replacer function would not be called when JSON.stringify\n      // is given `undefined` as value. To work around that, we simply detect `undefined` and bail out early by\n      // manually stringifying it.\n      return format(o);\n    }\n    return JSON.stringify(o, (key, value) => format(value)).replace(/\\\\\"/g, '\"');\n  }\n  const stripLastPathElement = (str) => str.replace(/\\/[^/]*$/, \"\");\n  /**\n   * Splits on a delimiter, but returns the delimiters in the array\n   *\n   * #### Example:\n   * ```js\n   * var splitOnSlashes = splitOnDelim('/');\n   * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n   * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n   * ```\n   */\n  function splitOnDelim(delim) {\n    const re = new RegExp(\"(\" + delim + \")\", \"g\");\n    return (str) => str.split(re).filter(Boolean);\n  }\n  /**\n   * Reduce fn that joins neighboring strings\n   *\n   * Given an array of strings, returns a new array\n   * where all neighboring strings have been joined.\n   *\n   * #### Example:\n   * ```js\n   * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n   * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n   * ```\n   */\n  function joinNeighborsR(acc, x) {\n    if (isString(tail(acc)) && isString(x))\n      return acc.slice(0, -1).concat(tail(acc) + x);\n    return pushR(acc, x);\n  }\n\n  /**\n   * # Transition tracing (debug)\n   *\n   * Enable transition tracing to print transition information to the console,\n   * in order to help debug your application.\n   * Tracing logs detailed information about each Transition to your console.\n   *\n   * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n   *\n   * ### ES6\n   * ```js\n   * import {trace} from \"@uirouter/core/index\";\n   * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n   * ```\n   *\n   * ### CJS\n   * ```js\n   * let trace = require(\"@uirouter/core\").trace;\n   * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n   * ```\n   *\n   * ### Globals\n   * ```js\n   * let trace = window[\"@uirouter/core\"].trace;\n   * trace.enable(); // Trace everything (very verbose)\n   * ```\n   *\n   * ### Angular 1:\n   * ```js\n   * app.run($trace => $trace.enable());\n   * ```\n   *\n   * @packageDocumentation\n   */\n\n  function ngViewString(ngView) {\n    if (!ngView) return \"ng-view (defunct)\";\n    const state = ngView.creationContext\n      ? ngView.creationContext.name || \"(root)\"\n      : \"(none)\";\n    return `[ng-view#${ngView.id}:${ngView.fqn} (${ngView.name}@${state})]`;\n  }\n\n  const viewConfigString = (viewConfig) => {\n    const view = viewConfig.viewDecl;\n    const state = view.$context.name || \"(root)\";\n    return `[View#${viewConfig.$id} from '${state}' state]: target ng-view: '${view.$ngViewName}@${view.$ngViewContextAnchor}'`;\n  };\n\n  function normalizedCat(input) {\n    return isNumber(input) ? Category[input] : Category[Category[input]];\n  }\n  /**\n   * Trace categories Enum\n   *\n   * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n   *\n   * `trace.enable(Category.TRANSITION)`\n   *\n   * These can also be provided using a matching string, or position ordinal\n   *\n   * `trace.enable(\"TRANSITION\")`\n   *\n   * `trace.enable(1)`\n   */\n\n  /**\n   * @enum {number}\n   */\n  const Category = {\n    RESOLVE: 0,\n    TRANSITION: 1,\n    HOOK: 2,\n    UIVIEW: 3,\n    VIEWCONFIG: 4,\n  };\n\n  const _tid = parse(\"$id\");\n  const _rid = parse(\"router.$id\");\n  const transLbl = (trans) => `Transition #${_tid(trans)}-${_rid(trans)}`;\n  /**\n   * Prints ng-router Transition trace information to the console.\n   */\n  class Trace {\n    constructor() {\n      this._enabled = {};\n      this.approximateDigests = 0;\n    }\n\n    _set(enabled, categories) {\n      if (!categories.length) {\n        categories = Object.keys(Category)\n          .map((k) => parseInt(k, 10))\n          .filter((k) => !isNaN(k))\n          .map((key) => Category[key]);\n      }\n      categories\n        .map(normalizedCat)\n        .forEach((category) => (this._enabled[category] = enabled));\n    }\n    enable(...categories) {\n      this._set(true, categories);\n    }\n    disable(...categories) {\n      this._set(false, categories);\n    }\n    /**\n     * Retrieves the enabled stateus of a [[Category]]\n     *\n     * ```js\n     * trace.enabled(\"VIEWCONFIG\"); // true or false\n     * ```\n     *\n     * @returns boolean true if the category is enabled\n     */\n    enabled(category) {\n      return !!this._enabled[normalizedCat(category)];\n    }\n    /** @internal called by ng-router code */\n    traceTransitionStart(trans) {\n      if (!this.enabled(Category.TRANSITION)) return;\n      console.log(`${transLbl(trans)}: Started  -> ${stringify(trans)}`);\n    }\n    /** @internal called by ng-router code */\n    traceTransitionIgnored(trans) {\n      if (!this.enabled(Category.TRANSITION)) return;\n      console.log(`${transLbl(trans)}: Ignored  <> ${stringify(trans)}`);\n    }\n    /** @internal called by ng-router code */\n    traceHookInvocation(step, trans, options) {\n      if (!this.enabled(Category.HOOK)) return;\n      const event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context =\n          parse(\"traceData.context.state.name\")(options) ||\n          parse(\"traceData.context\")(options) ||\n          \"unknown\",\n        name = functionToString(step.registeredHook.callback);\n      console.log(\n        `${transLbl(trans)}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceHookResult(hookResult, trans) {\n      if (!this.enabled(Category.HOOK)) return;\n      console.log(\n        `${transLbl(trans)}:   <- Hook returned: ${maxLength(200, stringify(hookResult))}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceResolvePath(path, when, trans) {\n      if (!this.enabled(Category.RESOLVE)) return;\n      console.log(`${transLbl(trans)}:         Resolving ${path} (${when})`);\n    }\n    /** @internal called by ng-router code */\n    traceResolvableResolved(resolvable, trans) {\n      if (!this.enabled(Category.RESOLVE)) return;\n      console.log(\n        `${transLbl(trans)}:               <- Resolved  ${resolvable} to: ${maxLength(200, stringify(resolvable.data))}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceError(reason, trans) {\n      if (!this.enabled(Category.TRANSITION)) return;\n      console.log(\n        `${transLbl(trans)}: <- Rejected ${stringify(trans)}, reason: ${reason}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceSuccess(finalState, trans) {\n      if (!this.enabled(Category.TRANSITION)) return;\n      console.log(\n        `${transLbl(trans)}: <- Success  ${stringify(trans)}, final state: ${finalState.name}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceUIViewEvent(event, viewData, extra = \"\") {\n      if (!this.enabled(Category.UIVIEW)) return;\n      console.log(\n        `ng-view: ${padString(30, event)} ${ngViewString(viewData)}${extra}`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceUIViewConfigUpdated(viewData, context) {\n      if (!this.enabled(Category.UIVIEW)) return;\n      this.traceUIViewEvent(\n        \"Updating\",\n        viewData,\n        ` with ViewConfig from context='${context}'`,\n      );\n    }\n    /** @internal called by ng-router code */\n    traceUIViewFill(viewData, html) {\n      if (!this.enabled(Category.UIVIEW)) return;\n      this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n    }\n    /** @internal called by ng-router code */\n    traceViewSync(pairs) {\n      if (!this.enabled(Category.VIEWCONFIG)) return;\n      const uivheader = \"uiview component fqn\";\n      const cfgheader = \"view config state (view name)\";\n      const mapping = pairs\n        .map(({ ngView, viewConfig }) => {\n          const uiv = ngView && ngView.fqn;\n          const cfg =\n            viewConfig &&\n            `${viewConfig.viewDecl.$context.name}: (${viewConfig.viewDecl.$name})`;\n          return { [uivheader]: uiv, [cfgheader]: cfg };\n        })\n        .sort((a, b) => (a[uivheader] || \"\").localeCompare(b[uivheader] || \"\"));\n      console.table(mapping);\n    }\n    /** @internal called by ng-router code */\n    traceViewServiceEvent(event, viewConfig) {\n      if (!this.enabled(Category.VIEWCONFIG)) return;\n      console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n    }\n    /** @internal called by ng-router code */\n    traceViewServiceUIViewEvent(event, viewData) {\n      if (!this.enabled(Category.VIEWCONFIG)) return;\n      console.log(`VIEWCONFIG: ${event} ${ngViewString(viewData)}`);\n    }\n  }\n  /**\n   * The [[Trace]] singleton\n   *\n   * #### Example:\n   * ```js\n   * import {trace} from \"@uirouter/core/index\";\n   * trace.enable(1, 5);\n   * ```\n   */\n  const trace = new Trace();\n\n  // TODO: explicitly make this user configurable\n  let defaultResolvePolicy = {\n    when: \"LAZY\",\n    async: \"WAIT\",\n  };\n  /**\n   * The basic building block for the resolve system.\n   *\n   * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n   * and the unwrapped-when-complete (.data) result of the resolveFn.\n   *\n   * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n   * resolveFn) and returns the resulting promise.\n   *\n   * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n   * parameter to those fns.\n   */\n  class Resolvable {\n    constructor(arg1, resolveFn, deps, policy, data) {\n      this.resolved = false;\n      this.promise = undefined;\n      if (arg1 instanceof Resolvable) {\n        Object.assign(this, arg1);\n      } else if (isFunction(resolveFn)) {\n        assert(!isNullOrUndefined(arg1), \"token argument is required\");\n        this.token = arg1;\n        this.policy = policy;\n        this.resolveFn = resolveFn;\n        this.deps = deps || [];\n        this.data = data;\n        this.resolved = data !== undefined;\n        this.promise = this.resolved ? Promise.resolve(this.data) : undefined;\n      } else if (\n        isObject(arg1) &&\n        arg1.token &&\n        (hasOwn(arg1, \"resolveFn\") || hasOwn(arg1, \"data\"))\n      ) {\n        this.token = arg1.token;\n        this.resolveFn = arg1.resolveFn;\n        this.deps = arg1.deps;\n        this.policy = arg1.policy;\n        this.data = arg1.data;\n      }\n    }\n\n    getPolicy(state) {\n      const thisPolicy = this.policy || {};\n      const statePolicy = (state && state.resolvePolicy) || {};\n      return {\n        when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n        async:\n          thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n      };\n    }\n\n    /**\n     * Asynchronously resolve this Resolvable's data\n     *\n     * Given a ResolveContext that this Resolvable is found in:\n     * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n     * and update the Resolvable's state\n     */\n    resolve(resolveContext, trans) {\n      // Gets all dependencies from ResolveContext and wait for them to be resolved\n      const getResolvableDependencies = () =>\n        Promise.all(\n          resolveContext\n            .getDependencies(this)\n            .map((resolvable) => resolvable.get(resolveContext, trans)),\n        );\n      // Invokes the resolve function passing the resolved dependencies as arguments\n      const invokeResolveFn = (resolvedDeps) =>\n        this.resolveFn.apply(null, resolvedDeps);\n      const node = resolveContext.findNode(this);\n      const state = node && node.state;\n      const asyncPolicy = this.getPolicy(state).async;\n      const customAsyncPolicy = isFunction(asyncPolicy) ? asyncPolicy : (x) => x;\n      // After the final value has been resolved, update the state of the Resolvable\n      const applyResolvedValue = (resolvedValue) => {\n        this.data = resolvedValue;\n        this.resolved = true;\n        this.resolveFn = null;\n        trace.traceResolvableResolved(this, trans);\n        return this.data;\n      };\n      // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n      this.promise = Promise.resolve()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(customAsyncPolicy)\n        .then(applyResolvedValue);\n      return this.promise;\n    }\n    /**\n     * Gets a promise for this Resolvable's data.\n     *\n     * Fetches the data and returns a promise.\n     * Returns the existing promise if it has already been fetched once.\n     */\n    get(resolveContext, trans) {\n      return this.promise || this.resolve(resolveContext, trans);\n    }\n\n    toString() {\n      return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n    }\n\n    clone() {\n      return new Resolvable(this);\n    }\n  }\n  Resolvable.fromData = (token, data) =>\n    new Resolvable(token, () => data, null, null, data);\n\n  /**\n   * Encapsulate the target (destination) state/params/options of a [[Transition]].\n   *\n   * This class is frequently used to redirect a transition to a new destination.\n   *\n   * See:\n   *\n   * - [[HookResult]]\n   * - [[TransitionHookFn]]\n   * - [[TransitionService.onStart]]\n   *\n   * To create a `TargetState`, use [[StateService.target]].\n   *\n   * ---\n   *\n   * This class wraps:\n   *\n   * 1) an identifier for a state\n   * 2) a set of parameters\n   * 3) and transition options\n   * 4) the registered state object (the [[StateDeclaration]])\n   *\n   * Many ng-router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n   * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n   * The `TargetState` class normalizes those options.\n   *\n   * A `TargetState` may be valid (the state being targeted exists in the registry)\n   * or invalid (the state being targeted is not registered).\n   */\n  class TargetState {\n    /**\n     * The TargetState constructor\n     *\n     * Note: Do not construct a `TargetState` manually.\n     * To create a `TargetState`, use the [[StateService.target]] factory method.\n     *\n     * @param _stateRegistry The StateRegistry to use to look up the _definition\n     * @param _identifier An identifier for a state.\n     *    Either a fully-qualified state name, or the object used to define the state.\n     * @param _params Parameters for the target state\n     * @param _options Transition options.\n     *\n     * @internal\n     */\n    constructor(_stateRegistry, _identifier, _params, _options) {\n      this._stateRegistry = _stateRegistry;\n      this._identifier = _identifier;\n      this._identifier = _identifier;\n      this._params = Object.assign({}, _params || {});\n      this._options = Object.assign({}, _options || {});\n      this._definition = _stateRegistry.matcher.find(\n        _identifier,\n        this._options.relative,\n      );\n    }\n    /** The name of the state this object targets */\n    name() {\n      return (this._definition && this._definition.name) || this._identifier;\n    }\n    /** The identifier used when creating this TargetState */\n    identifier() {\n      return this._identifier;\n    }\n    /** The target parameter values */\n    params() {\n      return this._params;\n    }\n    /** The internal state object (if it was found) */\n    $state() {\n      return this._definition;\n    }\n    /** The internal state declaration (if it was found) */\n    state() {\n      return this._definition && this._definition.self;\n    }\n    /** The target options */\n    options() {\n      return this._options;\n    }\n    /** True if the target state was found */\n    exists() {\n      return !!(this._definition && this._definition.self);\n    }\n    /** True if the object is valid */\n    valid() {\n      return !this.error();\n    }\n    /** If the object is invalid, returns the reason why */\n    error() {\n      const base = this.options().relative;\n      if (!this._definition && !!base) {\n        const stateName = base.name ? base.name : base;\n        return `Could not resolve '${this.name()}' from state '${stateName}'`;\n      }\n      if (!this._definition) return `No such state '${this.name()}'`;\n      if (!this._definition.self)\n        return `State '${this.name()}' has an invalid definition`;\n    }\n    toString() {\n      return `'${this.name()}'${stringify(this.params())}`;\n    }\n    /**\n     * Returns a copy of this TargetState which targets a different state.\n     * The new TargetState has the same parameter values and transition options.\n     *\n     * @param state The new state that should be targeted\n     */\n    withState(state) {\n      return new TargetState(\n        this._stateRegistry,\n        state,\n        this._params,\n        this._options,\n      );\n    }\n    /**\n     * Returns a copy of this TargetState, using the specified parameter values.\n     *\n     * @param params the new parameter values to use\n     * @param replace When false (default) the new parameter values will be merged with the current values.\n     *                When true the parameter values will be used instead of the current values.\n     */\n    withParams(params, replace = false) {\n      const newParams = replace\n        ? params\n        : Object.assign({}, this._params, params);\n      return new TargetState(\n        this._stateRegistry,\n        this._identifier,\n        newParams,\n        this._options,\n      );\n    }\n    /**\n     * Returns a copy of this TargetState, using the specified Transition Options.\n     *\n     * @param options the new options to use\n     * @param replace When false (default) the new options will be merged with the current options.\n     *                When true the options will be used instead of the current options.\n     */\n    withOptions(options, replace = false) {\n      const newOpts = replace\n        ? options\n        : Object.assign({}, this._options, options);\n      return new TargetState(\n        this._stateRegistry,\n        this._identifier,\n        this._params,\n        newOpts,\n      );\n    }\n  }\n  /** Returns true if the object has a state property that might be a state or state name */\n  TargetState.isDef = (obj) => {\n    return (\n      obj &&\n      obj.state &&\n      (isString(obj.state) || (isObject(obj.state) && isString(obj.state.name)))\n    );\n  };\n\n  const isShorthand = (cfg) =>\n    [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(\n      Object.prototype.hasOwnProperty.bind(cfg || {}),\n    ).length === 0;\n\n  /**\n   * @private\n   * @enum {number}\n   */\n  const DefType = {\n    PATH: 0,\n    SEARCH: 1,\n    CONFIG: 2,\n  };\n\n  function getParamDeclaration(paramName, location, state) {\n    const noReloadOnSearch =\n      (state.reloadOnSearch === false && location === DefType.SEARCH) ||\n      undefined;\n    const dynamic = find([state.dynamic, noReloadOnSearch], isDefined);\n    const defaultConfig = isDefined(dynamic) ? { dynamic } : {};\n    const paramConfig = unwrapShorthand(\n      state && state.params && state.params[paramName],\n    );\n    return Object.assign(defaultConfig, paramConfig);\n  }\n\n  function unwrapShorthand(cfg) {\n    cfg = isShorthand(cfg) ? { value: cfg } : cfg;\n    getStaticDefaultValue[\"__cacheable\"] = true;\n    function getStaticDefaultValue() {\n      return cfg.value;\n    }\n    const $$fn = isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue;\n    return Object.assign(cfg, { $$fn });\n  }\n\n  function getType(cfg, urlType, location, id, paramTypes) {\n    if (cfg.type && urlType && urlType.name !== \"string\")\n      throw new Error(`Param '${id}' has two type configurations.`);\n    if (\n      cfg.type &&\n      urlType &&\n      urlType.name === \"string\" &&\n      paramTypes.type(cfg.type)\n    )\n      return paramTypes.type(cfg.type);\n    if (urlType) return urlType;\n    if (!cfg.type) {\n      const type =\n        location === DefType.CONFIG\n          ? \"any\"\n          : location === DefType.PATH\n            ? \"path\"\n            : location === DefType.SEARCH\n              ? \"query\"\n              : \"string\";\n      return paramTypes.type(type);\n    }\n    return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type);\n  }\n\n  /** returns false, true, or the squash value to indicate the \"default parameter url squash policy\". */\n  function getSquashPolicy(config, isOptional, defaultPolicy) {\n    const squash = config.squash;\n    if (!isOptional || squash === false) return false;\n    if (!isDefined(squash) || squash == null) return defaultPolicy;\n    if (squash === true || isString(squash)) return squash;\n    throw new Error(\n      `Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`,\n    );\n  }\n\n  function getReplace(config, arrayMode, isOptional, squash) {\n    const defaultPolicy = [\n      { from: \"\", to: isOptional || arrayMode ? undefined : \"\" },\n      { from: null, to: isOptional || arrayMode ? undefined : \"\" },\n    ];\n    const replace = Array.isArray(config.replace) ? config.replace : [];\n    if (isString(squash)) replace.push({ from: squash, to: undefined });\n    const configuredKeys = map(replace, (x) => x.from);\n    return filter(\n      defaultPolicy,\n      (item) => configuredKeys.indexOf(item.from) === -1,\n    ).concat(replace);\n  }\n\n  class Param {\n    /**\n     *\n     * @param {*} id\n     * @param {*} type\n     * @param {DefType} location\n     * @param {import(\"../url/url-config.js\").UrlConfigProvider} urlConfig\n     * @param {*} state\n     */\n    constructor(id, type, location, urlConfig, state) {\n      const config = getParamDeclaration(id, location, state);\n      type = getType(config, type, location, id, urlConfig.paramTypes);\n      const arrayMode = getArrayMode();\n      type = arrayMode\n        ? type.$asArray(arrayMode, location === DefType.SEARCH)\n        : type;\n      const isOptional =\n        config.value !== undefined || location === DefType.SEARCH;\n      const dynamic = isDefined(config.dynamic)\n        ? !!config.dynamic\n        : !!type.dynamic;\n      const raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n      const squash = getSquashPolicy(\n        config,\n        isOptional,\n        urlConfig.defaultSquashPolicy(),\n      );\n      const replace = getReplace(config, arrayMode, isOptional, squash);\n      const inherit = isDefined(config.inherit)\n        ? !!config.inherit\n        : !!type.inherit;\n      // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n      function getArrayMode() {\n        const arrayDefaults = {\n          array: location === DefType.SEARCH ? \"auto\" : false,\n        };\n        const arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n        return Object.assign(arrayDefaults, arrayParamNomenclature, config).array;\n      }\n      this.isOptional = isOptional;\n      this.type = type;\n      this.location = location;\n      this.id = id;\n      this.dynamic = dynamic;\n      this.raw = raw;\n      this.squash = squash;\n      this.replace = replace;\n      this.inherit = inherit;\n      this.array = arrayMode;\n      this.config = config;\n    }\n\n    isDefaultValue(value) {\n      return this.isOptional && this.type.equals(this.value(), value);\n    }\n    /**\n     * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n     * default value, which may be the result of an injectable function.\n     */\n    value(value) {\n      /**\n       * [Internal] Get the default value of a parameter, which may be an injectable function.\n       */\n      const getDefaultValue = () => {\n        if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\n        if (!window[\"angular\"].$injector)\n          throw new Error(\n            \"Injectable functions cannot be called at configuration time\",\n          );\n        const defaultValue = window[\"angular\"].$injector.invoke(this.config.$$fn);\n        if (\n          defaultValue !== null &&\n          defaultValue !== undefined &&\n          !this.type.is(defaultValue)\n        )\n          throw new Error(\n            `Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`,\n          );\n        if (this.config.$$fn[\"__cacheable\"]) {\n          this._defaultValueCache = { defaultValue };\n        }\n        return defaultValue;\n      };\n      const replaceSpecialValues = (val) => {\n        for (const tuple of this.replace) {\n          if (tuple.from === val) return tuple.to;\n        }\n        return val;\n      };\n      value = replaceSpecialValues(value);\n      return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n    }\n    isSearch() {\n      return this.location === DefType.SEARCH;\n    }\n    validates(value) {\n      // There was no parameter value, but the param is optional\n      if ((isUndefined(value) || value === null) && this.isOptional) return true;\n      // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n      const normalized = this.type.$normalize(value);\n      if (!this.type.is(normalized)) return false;\n      // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n      const encoded = normalized; // this.type.encode(normalized);\n      return !(isString(encoded) && !this.type.pattern.exec(encoded));\n    }\n    toString() {\n      return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n    }\n\n    static values(params, values = {}) {\n      const paramValues = {};\n      for (const param of params) {\n        paramValues[param.id] = param.value(values[param.id]);\n      }\n      return paramValues;\n    }\n    /**\n     * Finds [[Param]] objects which have different param values\n     *\n     * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n     *\n     * @param params: The list of Param objects to filter\n     * @param values1: The first set of parameter values\n     * @param values2: the second set of parameter values\n     *\n     * @returns any Param objects whose values were different between values1 and values2\n     */\n    static changed(params, values1 = {}, values2 = {}) {\n      return params.filter(\n        (param) => !param.type.equals(values1[param.id], values2[param.id]),\n      );\n    }\n    /**\n     * Checks if two param value objects are equal (for a set of [[Param]] objects)\n     *\n     * @param params The list of [[Param]] objects to check\n     * @param values1 The first set of param values\n     * @param values2 The second set of param values\n     *\n     * @returns true if the param values in values1 and values2 are equal\n     */\n    static equals(params, values1 = {}, values2 = {}) {\n      return Param.changed(params, values1, values2).length === 0;\n    }\n    /** Returns true if a the parameter values are valid, according to the Param definitions */\n    static validates(params, values = {}) {\n      return params\n        .map((param) => param.validates(values[param.id]))\n        .reduce(allTrueR, true);\n    }\n  }\n\n  /**\n   * A node in a [[TreeChanges]] path\n   *\n   * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n   * Each PathNode corresponds to a state being entered, exited, or retained.\n   * The stateful information includes parameter values and resolve data.\n   */\n  class PathNode {\n    constructor(stateOrNode) {\n      if (stateOrNode instanceof PathNode) {\n        const node = stateOrNode;\n        this.state = node.state;\n        this.paramSchema = node.paramSchema.slice();\n        this.paramValues = Object.assign({}, node.paramValues);\n        this.resolvables = node.resolvables.slice();\n        this.views = node.views && node.views.slice();\n      } else {\n        const state = stateOrNode;\n        this.state = state;\n        this.paramSchema = state.parameters({ inherit: false });\n        this.paramValues = {};\n        this.resolvables = state.resolvables.map((res) => res.clone());\n      }\n    }\n\n    clone() {\n      return new PathNode(this);\n    }\n\n    /** Sets [[paramValues]] for the node, from the values of an object hash */\n    applyRawParams(params) {\n      const getParamVal = (paramDef) => [\n        paramDef.id,\n        paramDef.value(params[paramDef.id]),\n      ];\n      this.paramValues = this.paramSchema.reduce(\n        (memo, pDef) => applyPairs(memo, getParamVal(pDef)),\n        {},\n      );\n      return this;\n    }\n\n    /** Gets a specific [[Param]] metadata that belongs to the node */\n    parameter(name) {\n      return find(this.paramSchema, propEq(\"id\", name));\n    }\n\n    /**\n     * @returns true if the state and parameter values for another PathNode are\n     * equal to the state and param values for this PathNode\n     */\n    equals(node, paramsFn) {\n      const diff = this.diff(node, paramsFn);\n      return diff && diff.length === 0;\n    }\n\n    /**\n     * Finds Params with different parameter values on another PathNode.\n     *\n     * Given another node (of the same state), finds the parameter values which differ.\n     * Returns the [[Param]] (schema objects) whose parameter values differ.\n     *\n     * Given another node for a different state, returns `false`\n     *\n     * @param node The node to compare to\n     * @param paramsFn A function that returns which parameters should be compared.\n     * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n     */\n    diff(node, paramsFn) {\n      if (this.state !== node.state) return false;\n      const params = paramsFn ? paramsFn(this) : this.paramSchema;\n      return Param.changed(params, this.paramValues, node.paramValues);\n    }\n  }\n\n  /**\n   * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n   */\n  class PathUtils {\n    static buildPath(targetState) {\n      const toParams = targetState.params();\n      return targetState\n        .$state()\n        .path.map((state) => new PathNode(state).applyRawParams(toParams));\n    }\n    /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n    static buildToPath(fromPath, targetState) {\n      const toPath = PathUtils.buildPath(targetState);\n      if (targetState.options().inherit) {\n        return PathUtils.inheritParams(\n          fromPath,\n          toPath,\n          Object.keys(targetState.params()),\n        );\n      }\n      return toPath;\n    }\n    /**\n     * Creates ViewConfig objects and adds to nodes.\n     *\n     * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n     */\n    static applyViewConfigs($view, path, states) {\n      // Only apply the viewConfigs to the nodes for the given states\n      path\n        .filter((node) => states.includes(node.state))\n        .forEach((node) => {\n          const viewDecls = Object.values(node.state.views || {});\n          const subPath = PathUtils.subPath(path, (n) => n === node);\n          const viewConfigs = viewDecls.map((view) => {\n            return $view.createViewConfig(subPath, view);\n          });\n          node.views = viewConfigs.reduce(unnestR, []);\n        });\n    }\n    /**\n     * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n     *\n     * For a parameter in a node to be inherited from the from path:\n     * - The toPath's node must have a matching node in the fromPath (by state).\n     * - The parameter name must not be found in the toKeys parameter array.\n     *\n     * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n     * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n     * it is not inherited from the fromPath.\n     */\n    static inheritParams(fromPath, toPath, toKeys = []) {\n      function nodeParamVals(path, state) {\n        /** @type {PathNode} */\n        const node = find(path, propEq(\"state\", state));\n        return Object.assign({}, node && node.paramValues);\n      }\n      const noInherit = fromPath\n        .map((node) => node.paramSchema)\n        .reduce(unnestR, [])\n        .filter((param) => !param.inherit)\n        .map((x) => x.id);\n      /**\n       * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n       * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n       */\n      function makeInheritedParamsNode(toNode) {\n        // All param values for the node (may include default key/vals, when key was not found in toParams)\n        let toParamVals = Object.assign({}, toNode && toNode.paramValues);\n        // limited to only those keys found in toParams\n        const incomingParamVals = pick(toParamVals, toKeys);\n        toParamVals = omit(toParamVals, toKeys);\n        const fromParamVals = omit(\n          nodeParamVals(fromPath, toNode.state) || {},\n          noInherit,\n        );\n        // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n        const ownParamVals = Object.assign(\n          toParamVals,\n          fromParamVals,\n          incomingParamVals,\n        );\n        return new PathNode(toNode.state).applyRawParams(ownParamVals);\n      }\n      // The param keys specified by the incoming toParams\n      return toPath.map(makeInheritedParamsNode);\n    }\n\n    /**\n     * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n     * @param {PathNode[]} fromPath\n     * @param {PathNode[]} toPath\n     * @param {boolean} [reloadState]\n     * @returns {import(\"../transition/interface.js\").TreeChanges}\n     */\n    static treeChanges(fromPath, toPath, reloadState) {\n      const max = Math.min(fromPath.length, toPath.length);\n      let keep = 0;\n      const nodesMatch = (node1, node2) =>\n        node1.equals(node2, PathUtils.nonDynamicParams);\n      while (\n        keep < max &&\n        fromPath[keep].state !== reloadState &&\n        nodesMatch(fromPath[keep], toPath[keep])\n      ) {\n        keep++;\n      }\n      /** Given a retained node, return a new node which uses the to node's param values */\n      function applyToParams(retainedNode, idx) {\n        const cloned = retainedNode.clone();\n        cloned.paramValues = toPath[idx].paramValues;\n        return cloned;\n      }\n      let from, retained, exiting, entering, to;\n      from = fromPath;\n      retained = from.slice(0, keep);\n      exiting = from.slice(keep);\n      // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n      const retainedWithToParams = retained.map(applyToParams);\n      entering = toPath.slice(keep);\n      to = retainedWithToParams.concat(entering);\n      return { from, to, retained, retainedWithToParams, exiting, entering };\n    }\n    /**\n     * Returns a new path which is: the subpath of the first path which matches the second path.\n     *\n     * The new path starts from root and contains any nodes that match the nodes in the second path.\n     * It stops before the first non-matching node.\n     *\n     * Nodes are compared using their state property and their parameter values.\n     * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n     *\n     * @param pathA the first path\n     * @param pathB the second path\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     *\n     * @returns an array of PathNodes from the first path which match the nodes in the second path\n     */\n    static matching(pathA, pathB, paramsFn) {\n      let done = false;\n      const tuples = arrayTuples(pathA, pathB);\n      return tuples.reduce((matching, [nodeA, nodeB]) => {\n        done = done || !nodeA.equals(nodeB, paramsFn);\n        return done ? matching : matching.concat(nodeA);\n      }, []);\n    }\n    /**\n     * Returns true if two paths are identical.\n     *\n     * @param pathA\n     * @param pathB\n     * @param paramsFn a function which returns the parameters to consider when comparing\n     * @returns true if the the states and parameter values for both paths are identical\n     */\n    static equals(pathA, pathB, paramsFn) {\n      return (\n        pathA.length === pathB.length &&\n        PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length\n      );\n    }\n    /**\n     * Return a subpath of a path, which stops at the first matching node\n     *\n     * Given an array of nodes, returns a subset of the array starting from the first node,\n     * stopping when the first node matches the predicate.\n     *\n     * @param path a path of [[PathNode]]s\n     * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n     * @returns a subpath up to the matching node, or undefined if no match is found\n     */\n    static subPath(path, predicate) {\n      const node = find(path, predicate);\n      const elementIdx = path.indexOf(node);\n      return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n    }\n\n    static nonDynamicParams(node) {\n      return node.state\n        .parameters({ inherit: false })\n        .filter((param) => !param.dynamic);\n    }\n\n    /** Gets the raw parameter values from a path */\n    static paramValues(path) {\n      return path.reduce((acc, node) => Object.assign(acc, node.paramValues), {});\n    }\n  }\n\n  /** Given a PathNode[], create an TargetState\n   * @param {import(\"../state/state-registry.js\").StateRegistryProvider} registry\n   * @param {Array<PathNode>} path\n   * @returns\n   */\n  function makeTargetState(registry, path) {\n    return new TargetState(\n      registry,\n      path.at(-1).state,\n      path\n        .map((x) => x.paramValues)\n        .reduce((acc, obj) => ({ ...acc, ...obj }), {}),\n      {},\n    );\n  }\n\n  const resolvePolicies = {\n    when: {\n      LAZY: \"LAZY\",\n      EAGER: \"EAGER\",\n    }};\n\n  const ALL_WHENS = [resolvePolicies.when.EAGER, resolvePolicies.when.LAZY];\n  const EAGER_WHENS = [resolvePolicies.when.EAGER];\n  /**\n   * Encapsulates Dependency Injection for a path of nodes\n   *\n   * ng-router states are organized as a tree.\n   * A nested state has a path of ancestors to the root of the tree.\n   * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n   * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n   *\n   * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n   */\n  class ResolveContext {\n    constructor(_path) {\n      this._path = _path;\n    }\n    /** Gets all the tokens found in the resolve context, de-duplicated */\n    getTokens() {\n      return this._path\n        .reduce(\n          (acc, node) => acc.concat(node.resolvables.map((r) => r.token)),\n          [],\n        )\n        .reduce(uniqR, []);\n    }\n    /**\n     * Gets the Resolvable that matches the token\n     *\n     * Gets the last Resolvable that matches the token in this context, or undefined.\n     * Throws an error if it doesn't exist in the ResolveContext\n     */\n    getResolvable(token) {\n      const matching = this._path\n        .map((node) => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r) => r.token === token);\n      return tail(matching);\n    }\n\n    /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n    getPolicy(resolvable) {\n      const node = this.findNode(resolvable);\n      return resolvable.getPolicy(node);\n    }\n\n    /**\n     * Returns a ResolveContext that includes a portion of this one\n     *\n     * Given a state, this method creates a new ResolveContext from this one.\n     * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n     *\n     * #### Why\n     *\n     * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n     * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n     * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n     * This method is used to create a narrower context when injecting ancestor nodes.\n     *\n     * @example\n     * `let ABCD = new ResolveContext([A, B, C, D]);`\n     *\n     * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n     * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n     * However, `B` should only be able to access resolvables from `A`, `B`.\n     *\n     * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n     * `let AB = ABCD.subcontext(a)`\n     */\n    subContext(state) {\n      return new ResolveContext(\n        PathUtils.subPath(this._path, (node) => node.state === state),\n      );\n    }\n    /**\n     * Adds Resolvables to the node that matches the state\n     *\n     * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n     * The resolvable is added to the node matching the `state` parameter.\n     *\n     * These new resolvables are not automatically fetched.\n     * The calling code should either fetch them, fetch something that depends on them,\n     * or rely on [[resolvePath]] being called when some state is being entered.\n     *\n     * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n     *\n     * @param {Resolvable[]} newResolvables the new Resolvables\n     * @param state Used to find the node to put the resolvable on\n     */\n    addResolvables(newResolvables, state) {\n      /** @type {import('../path/path-node').PathNode} */\n      const node = find(this._path, propEq(\"state\", state));\n      const keys = newResolvables.map((r) => r.token);\n      node.resolvables = node.resolvables\n        .filter((r) => keys.indexOf(r.token) === -1)\n        .concat(newResolvables);\n    }\n    /**\n     * Returns a promise for an array of resolved path Element promises\n     *\n     * @param {string} when\n     * @param trans\n     * @returns {Promise<any>|any}\n     */\n    resolvePath(when = \"LAZY\", trans) {\n      // This option determines which 'when' policy Resolvables we are about to fetch.\n      const whenOption = ALL_WHENS.includes(when) ? when : \"LAZY\";\n      // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n      // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n      const matchedWhens =\n        whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n      // get the subpath to the state argument, if provided\n      trace.traceResolvePath(this._path, when, trans);\n      const matchesPolicy = (acceptedVals, whenOrAsync) => (resolvable) =>\n        acceptedVals.includes(this.getPolicy(resolvable)[whenOrAsync]);\n      // Trigger all the (matching) Resolvables in the path\n      // Reduce all the \"WAIT\" Resolvables into an array\n      const promises = this._path.reduce((acc, node) => {\n        const nodeResolvables = node.resolvables.filter(\n          matchesPolicy(matchedWhens, \"when\"),\n        );\n        const nowait = nodeResolvables.filter(matchesPolicy([\"NOWAIT\"], \"async\"));\n        const wait = nodeResolvables.filter(\n          (x) => !matchesPolicy([\"NOWAIT\"], \"async\")(x),\n        );\n        // For the matching Resolvables, start their async fetch process.\n        const subContext = this.subContext(node.state);\n        const getResult = (r) =>\n          r\n            .get(subContext, trans)\n            // Return a tuple that includes the Resolvable's token\n            .then((value) => ({ token: r.token, value: value }));\n        nowait.forEach(getResult);\n        return acc.concat(wait.map(getResult));\n      }, []);\n      // Wait for all the \"WAIT\" resolvables\n      return Promise.all(promises);\n    }\n\n    findNode(resolvable) {\n      return find(this._path, (node) => node.resolvables.includes(resolvable));\n    }\n\n    /**\n     * Gets the async dependencies of a Resolvable\n     *\n     * Given a Resolvable, returns its dependencies as a Resolvable[]\n     * @param {Resolvable} resolvable\n     * @returns {Resolvable[]}\n     */\n    getDependencies(resolvable) {\n      const node = this.findNode(resolvable);\n      // Find which other resolvables are \"visible\" to the `resolvable` argument\n      // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n      const subPath =\n        PathUtils.subPath(this._path, (x) => x === node) || this._path;\n      const availableResolvables = subPath\n        .reduce((acc, _node) => acc.concat(_node.resolvables), []) // all of subpath's resolvables\n        .filter((res) => res !== resolvable); // filter out the `resolvable` argument\n      return resolvable.deps.map((token) => {\n        const matching = availableResolvables.filter((r) => r.token === token);\n        if (matching.length) return tail(matching);\n        const fromInjector = window[\"angular\"].$injector.get(token);\n        if (isUndefined(fromInjector)) {\n          throw new Error(\n            \"Could not find Dependency Injection token: \" + stringify(token),\n          );\n        }\n        return new Resolvable(token, () => fromInjector, [], fromInjector);\n      });\n    }\n  }\n\n  function getViewConfigFactory() {\n    let templateFactory = null;\n    return (path, view) => {\n      templateFactory =\n        templateFactory || window[\"angular\"].$injector.get(\"$templateFactory\"); // TODO: remove static injector\n      return new ViewConfig(path, view, templateFactory);\n    };\n  }\n\n  const hasAnyKey = (keys, obj) =>\n    keys.reduce((acc, key) => acc || isDefined(obj[key]), false);\n  /**\n   * This is a [[StateBuilder.builder]] function for angular1 `views`.\n   *\n   * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n   * handles the `views` property with logic specific to @uirouter/angularjs (ng1).\n   *\n   * If no `views: {}` property exists on the [[StateDeclaration]], then it creates the `views` object\n   * and applies the state-level configuration to a view named `$default`.\n   *\n   */\n  function ng1ViewsBuilder(state) {\n    // Do not process root state\n    if (!state.parent) return {};\n    const tplKeys = [\n        \"templateProvider\",\n        \"templateUrl\",\n        \"template\",\n        \"notify\",\n        \"async\",\n      ],\n      ctrlKeys = [\n        \"controller\",\n        \"controllerProvider\",\n        \"controllerAs\",\n        \"resolveAs\",\n      ],\n      compKeys = [\"component\", \"bindings\", \"componentProvider\"],\n      nonCompKeys = tplKeys.concat(ctrlKeys),\n      allViewKeys = compKeys.concat(nonCompKeys);\n    // Do not allow a state to have both state-level props and also a `views: {}` property.\n    // A state without a `views: {}` property can declare properties for the `$default` view as properties of the state.\n    // However, the `$default` approach should not be mixed with a separate `views: ` block.\n    if (isDefined(state.views) && hasAnyKey(allViewKeys, state)) {\n      throw new Error(\n        `State '${state.name}' has a 'views' object. ` +\n          `It cannot also have \"view properties\" at the state level.  ` +\n          `Move the following properties into a view (in the 'views' object): ` +\n          ` ${allViewKeys.filter((key) => isDefined(state[key])).join(\", \")}`,\n      );\n    }\n    const views = {},\n      viewsObject = state.views || { $default: pick(state, allViewKeys) };\n    Object.entries(viewsObject).forEach(([name, config]) => {\n      // Account for views: { \"\": { template... } }\n      name = name || \"$default\";\n      // Account for views: { header: \"headerComponent\" }\n      if (isString(config)) config = { component: config };\n      // Make a shallow copy of the urlConfig object\n      config = Object.assign({}, config);\n      // Do not allow a view to mix props for component-style view with props for template/controller-style view\n      if (hasAnyKey(compKeys, config) && hasAnyKey(nonCompKeys, config)) {\n        throw new Error(\n          `Cannot combine: ${compKeys.join(\"|\")} with: ${nonCompKeys.join(\"|\")} in stateview: '${name}@${state.name}'`,\n        );\n      }\n      config.resolveAs = config.resolveAs || \"$resolve\";\n      config.$context = state;\n      config.$name = name;\n      const normalized = ViewConfig.normalizeUIViewTarget(\n        config.$context,\n        config.$name,\n      );\n      config.$ngViewName = normalized.ngViewName;\n      config.$ngViewContextAnchor = normalized.ngViewContextAnchor;\n      views[name] = config;\n    });\n    return views;\n  }\n\n  /**\n   * @type {Number}\n   */\n  let id$1 = 0;\n\n  class ViewConfig {\n    /**\n     * @param {Array<import('../path/path-node.js').PathNode>} path\n     * @param viewDecl\n     * @param {import('../template-factory.js').TemplateFactoryProvider} factory\n     */\n    constructor(path, viewDecl, factory) {\n      this.path = path;\n      this.viewDecl = viewDecl;\n      this.factory = factory;\n      this.component = undefined;\n      this.template = undefined;\n\n      /** @type {Number} */ this.$id = id$1++;\n      this.loaded = false;\n      this.getTemplate = (ngView, context) =>\n        this.component\n          ? this.factory.makeComponentTemplate(\n              ngView,\n              context,\n              this.component,\n              this.viewDecl.bindings,\n            )\n          : this.template;\n    }\n\n    load() {\n      const context = new ResolveContext(this.path);\n      const params = this.path.reduce(\n        (acc, node) => Object.assign(acc, node.paramValues),\n        {},\n      );\n      const promises = [\n        Promise.resolve(this.factory.fromConfig(this.viewDecl, params, context)),\n        Promise.resolve(this.getController(context)),\n      ];\n      return Promise.all(promises).then((results) => {\n        trace.traceViewServiceEvent(\"Loaded\", this);\n        this.controller = results[1];\n        Object.assign(this, results[0]); // Either { template: \"tpl\" } or { component: \"cmpName\" }\n        return this;\n      });\n    }\n    /**\n     * Gets the controller for a view configuration.\n     *\n     * @returns {Function|Promise.<Function>} Returns a controller, or a promise that resolves to a controller.\n     */\n    getController(context) {\n      const provider = this.viewDecl.controllerProvider;\n      if (!isInjectable(provider)) return this.viewDecl.controller;\n      const deps = annotate(provider);\n      const providerFn = Array.isArray(provider) ? tail(provider) : provider;\n      const resolvable = new Resolvable(\"\", providerFn, deps);\n      return resolvable.get(context);\n    }\n\n    /**\n     * Normalizes a view's name from a state.views configuration block.\n     *\n     * This should be used by a framework implementation to calculate the values for\n     * [[_ViewDeclaration.$ngViewName]] and [[_ViewDeclaration.$ngViewContextAnchor]].\n     *\n     * @param context the context object (state declaration) that the view belongs to\n     * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n     *\n     * @returns the normalized ngViewName and ngViewContextAnchor that the view targets\n     */\n    static normalizeUIViewTarget(context, rawViewName = \"\") {\n      // TODO: Validate incoming view name with a regexp to allow:\n      // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n      // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n      const viewAtContext = rawViewName.split(\"@\");\n      let ngViewName = viewAtContext[0] || \"$default\"; // default to unnamed view\n      let ngViewContextAnchor = isString(viewAtContext[1])\n        ? viewAtContext[1]\n        : \"^\"; // default to parent context\n      // Handle relative view-name sugar syntax.\n      // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n      const relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(ngViewName);\n      if (relativeViewNameSugar) {\n        // Clobbers existing contextAnchor (rawViewName validation will fix this)\n        ngViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n        ngViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n      }\n      if (ngViewName.charAt(0) === \"!\") {\n        ngViewName = ngViewName.substring(1);\n        ngViewContextAnchor = \"\"; // target absolutely from root\n      }\n      // handle parent relative targeting \"^.^.^\"\n      const relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n      if (relativeMatch.exec(ngViewContextAnchor)) {\n        const anchorState = ngViewContextAnchor\n          .split(\".\")\n          .reduce((anchor) => anchor.parent, context);\n        ngViewContextAnchor = anchorState.name;\n      } else if (ngViewContextAnchor === \".\") {\n        ngViewContextAnchor = context.name;\n      }\n      return { ngViewName, ngViewContextAnchor };\n    }\n  }\n\n  /**\n   * The View service\n   *\n   * This service pairs existing `ng-view` components (which live in the DOM)\n   * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n   *\n   * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n   *   The views from exited states are deactivated via [[deactivateViewConfig]].\n   *   (See: the [[registerActivateViews]] Transition Hook)\n   *\n   * - As `ng-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n   *\n   * - When the [[sync]] function is called, the registered `ng-view`(s) ([[ActiveUIView]])\n   * are configured with the matching [[ViewConfig]](s)\n   *\n   */\n  class ViewService {\n    constructor() {\n      this._ngViews = [];\n      this._viewConfigs = [];\n      this._viewConfigFactories = {};\n      this._listeners = [];\n      this._pluginapi = {\n        _registeredUIView: (id) => {\n          return find(this._ngViews, (view) => view.id === id);\n        },\n        _registeredUIViews: () => this._ngViews,\n        _activeViewConfigs: () => this._viewConfigs,\n        _onSync: (listener) => {\n          this._listeners.push(listener);\n          return () => removeFrom(this._listeners, listener);\n        },\n      };\n      this.viewConfigFactory(getViewConfigFactory());\n    }\n\n    $get = [() => this];\n\n    /**\n     * @param {?import('../state/state-object.js').StateObject} context\n     * @return {?import('../state/state-object.js').StateObject}\n     */\n    rootViewContext(context) {\n      return (this._rootContext = context || this._rootContext);\n    }\n\n    viewConfigFactory(factory) {\n      this.viewConfigFactory = factory;\n    }\n\n    /**\n     * @param path\n     * @param decl\n     * @return {import(\"../state/views.js\").ViewConfig}\n     */\n    createViewConfig(path, decl) {\n      /** @type {function(any, any): any} */\n      const cfgFactory = this.viewConfigFactory;\n      if (!cfgFactory)\n        throw new Error(\n          \"ViewService: No view config factory registered for type \" + decl.$type,\n        );\n      return cfgFactory(path, decl);\n    }\n    /**\n     * Deactivates a ViewConfig.\n     *\n     * This function deactivates a `ViewConfig`.\n     * After calling [[sync]], it will un-pair from any `ng-view` with which it is currently paired.\n     *\n     * @param viewConfig The ViewConfig view to deregister.\n     */\n    deactivateViewConfig(viewConfig) {\n      trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n      removeFrom(this._viewConfigs, viewConfig);\n    }\n    activateViewConfig(viewConfig) {\n      trace.traceViewServiceEvent(\"-> Registering\", viewConfig);\n      this._viewConfigs.push(viewConfig);\n    }\n    sync() {\n      const ngViewsByFqn = this._ngViews\n        .map((uiv) => [uiv.fqn, uiv])\n        .reduce(applyPairs, {});\n      // Return a weighted depth value for a ngView.\n      // The depth is the nesting depth of ng-views (based on FQN; times 10,000)\n      // plus the depth of the state that is populating the ngView\n      function ngViewDepth(ngView) {\n        const stateDepth = (context) =>\n          context && context.parent ? stateDepth(context.parent) + 1 : 1;\n        return (\n          ngView.fqn.split(\".\").length * 10000 +\n          stateDepth(ngView.creationContext)\n        );\n      }\n      // Return the ViewConfig's context's depth in the context tree.\n      function viewConfigDepth(config) {\n        let context = config.viewDecl.$context,\n          count = 0;\n        while (++count && context.parent) context = context.parent;\n        return count;\n      }\n      // Given a depth function, returns a compare function which can return either ascending or descending order\n      const depthCompare = curry(\n        (depthFn, posNeg, left, right) =>\n          posNeg * (depthFn(left) - depthFn(right)),\n      );\n      const matchingConfigPair = (ngView) => {\n        const matchingConfigs = this._viewConfigs.filter(\n          ViewService.matches(ngViewsByFqn, ngView),\n        );\n        if (matchingConfigs.length > 1) {\n          // This is OK.  Child states can target a ng-view that the parent state also targets (the child wins)\n          // Sort by depth and return the match from the deepest child\n          // console.log(`Multiple matching view configs for ${ngView.fqn}`, matchingConfigs);\n          matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n        }\n        return { ngView, viewConfig: matchingConfigs[0] };\n      };\n      const configureUIView = (tuple) => {\n        // If a parent ng-view is reconfigured, it could destroy child ng-views.\n        // Before configuring a child ng-view, make sure it's still in the active ngViews array.\n        if (this._ngViews.indexOf(tuple.ngView) !== -1) {\n          tuple.ngView.configUpdated(tuple.viewConfig);\n        }\n      };\n      // Sort views by FQN and state depth. Process uiviews nearest the root first.\n      const ngViewTuples = this._ngViews\n        .sort(depthCompare(ngViewDepth, 1))\n        .map(matchingConfigPair);\n      const matchedViewConfigs = ngViewTuples.map((tuple) => tuple.viewConfig);\n      const unmatchedConfigTuples = this._viewConfigs\n        .filter((config) => !matchedViewConfigs.includes(config))\n        .map((viewConfig) => ({ ngView: undefined, viewConfig }));\n      ngViewTuples.forEach((tuple) => {\n        configureUIView(tuple);\n      });\n      const allTuples = ngViewTuples.concat(unmatchedConfigTuples);\n      this._listeners.forEach((cb) => cb(allTuples));\n      trace.traceViewSync(allTuples);\n    }\n    /**\n     * Registers a `ng-view` component\n     *\n     * When a `ng-view` component is created, it uses this method to register itself.\n     * After registration the [[sync]] method is used to ensure all `ng-view` are configured with the proper [[ViewConfig]].\n     *\n     * Note: the `ng-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ng-view`,\n     * and what the view's state context is.\n     *\n     * Note: There is no corresponding `deregisterUIView`.\n     *       A `ng-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n     *\n     * @param ngView The metadata for a UIView\n     * @return a de-registration function used when the view is destroyed.\n     */\n    registerUIView(ngView) {\n      trace.traceViewServiceUIViewEvent(\"-> Registering\", ngView);\n      const ngViews = this._ngViews;\n      const fqnAndTypeMatches = (uiv) => uiv.fqn === ngView.fqn;\n      if (ngViews.filter(fqnAndTypeMatches).length)\n        trace.traceViewServiceUIViewEvent(\"!!!! duplicate ngView named:\", ngView);\n      ngViews.push(ngView);\n      this.sync();\n      return () => {\n        const idx = ngViews.indexOf(ngView);\n        if (idx === -1) {\n          trace.traceViewServiceUIViewEvent(\n            \"Tried removing non-registered ngView\",\n            ngView,\n          );\n          return;\n        }\n        trace.traceViewServiceUIViewEvent(\"<- Deregistering\", ngView);\n        removeFrom(ngViews)(ngView);\n      };\n    }\n    /**\n     * Returns the list of views currently available on the page, by fully-qualified name.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    available() {\n      return this._ngViews.map((x) => x.fqn);\n    }\n    /**\n     * Returns the list of views on the page containing loaded content.\n     *\n     * @return {Array} Returns an array of fully-qualified view names.\n     */\n    active() {\n      return this._ngViews.filter((x) => x.$config).map((x) => x.name);\n    }\n  }\n  /**\n   * Given a ng-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ng-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ng-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ng-view name and a context anchor.  The ng-view name can be a simple name, or\n   * can be a segmented ng-view path, describing a portion of a ng-view fqn.\n   *\n   * In order for a ng-view to match ViewConfig, ng-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ng-view name is a simple name (no dots), then a ng-view matches if:\n   * - the ng-view's name matches the ViewConfig's target name\n   * - the ng-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ng-view name is a segmented name (with dots), then a ng-view matches if:\n   * - There exists a parent ng-view where:\n   *    - the parent ng-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ng-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ng-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ng-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ng-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ng-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ng-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ng-view>\n   *     </ng-view>\n   *   </ng-view>\n   * </ng-view>\n   *\n   * ngViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ng-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { ngViewName: \"bar\",                       ngViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { ngViewName: \"$default.bar\",              ngViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { ngViewName: \"foo.$default.bar\",          ngViewContextAnchor: \"A\" }\n   * - ViewConfig4: { ngViewName: \"$default.foo.$default.bar\", ngViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ng-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ng-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ng-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ng-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ng-view's fqn \"default.bar\"\n   *\n   * @internal\n   */\n  ViewService.matches = (ngViewsByFqn, ngView) => (viewConfig) => {\n    // Don't supply an ng1 ng-view with an ng2 ViewConfig, etc\n    if (ngView.$type !== viewConfig.viewDecl.$type) return false;\n    // Split names apart from both viewConfig and ngView into segments\n    const vc = viewConfig.viewDecl;\n    const vcSegments = vc.$ngViewName.split(\".\");\n    const uivSegments = ngView.fqn.split(\".\");\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n      return false;\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ng-view $default.foo context match?\n    const negOffset = 1 - vcSegments.length || undefined;\n    const fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n    const ngViewContext = ngViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$ngViewContextAnchor === (ngViewContext && ngViewContext.name);\n  };\n\n  /**\n   * An object for Transition Hook Phases\n   * @enum {number}\n   * @readonly\n   */\n  const TransitionHookPhase = {\n    CREATE: 0,\n    BEFORE: 1,\n    RUN: 2,\n    SUCCESS: 3,\n    ERROR: 4,\n  };\n\n  /** An object for Transition Hook Scopes */\n  const TransitionHookScope = {\n    TRANSITION: 0,\n    STATE: 1,\n  };\n\n  /**\n   * An object for Transition Rejection reasons.\n   * @enum {number}\n   */\n  const RejectType = {\n    /**\n     * A new transition superseded this one.\n     *\n     * While this transition was running, a new transition started.\n     * This transition is cancelled because it was superseded by a new transition.\n     * @type {number}\n     */\n    SUPERSEDED: 2,\n\n    /**\n     * The transition was aborted.\n     *\n     * The transition was aborted by a hook which returned `false`.\n     * @type {number}\n     */\n    ABORTED: 3,\n\n    /**\n     * The transition was invalid.\n     *\n     * The transition was never started because it was invalid.\n     * @type {number}\n     */\n    INVALID: 4,\n\n    /**\n     * The transition was ignored.\n     *\n     * The transition was ignored because it would have no effect.\n     * Either:\n     * - The transition is targeting the current state and parameter values.\n     * - The transition is targeting the same state and parameter values as the currently running transition.\n     * @type {number}\n     */\n    IGNORED: 5,\n\n    /**\n     * The transition errored.\n     *\n     * This generally means a hook threw an error or returned a rejected promise.\n     * @type {number}\n     */\n    ERROR: 6,\n  };\n\n  let id = 0;\n  class Rejection {\n    /** Returns a Rejection due to transition superseded */\n    static superseded(detail, options) {\n      const message =\n        \"The transition has been superseded by a different transition\";\n      const rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n      if (options && options.redirected) {\n        rejection.redirected = true;\n      }\n      return rejection;\n    }\n    /** Returns a Rejection due to redirected transition */\n    static redirected(detail) {\n      return Rejection.superseded(detail, { redirected: true });\n    }\n    /** Returns a Rejection due to invalid transition */\n    static invalid(detail) {\n      const message = \"This transition is invalid\";\n      return new Rejection(RejectType.INVALID, message, detail);\n    }\n    /** Returns a Rejection due to ignored transition */\n    static ignored(detail) {\n      const message = \"The transition was ignored\";\n      return new Rejection(RejectType.IGNORED, message, detail);\n    }\n    /** Returns a Rejection due to aborted transition */\n    static aborted(detail) {\n      const message = \"The transition has been aborted\";\n      return new Rejection(RejectType.ABORTED, message, detail);\n    }\n    /** Returns a Rejection due to aborted transition */\n    static errored(detail) {\n      const message = \"The transition errored\";\n      return new Rejection(RejectType.ERROR, message, detail);\n    }\n    /**\n     * Returns a Rejection\n     *\n     * Normalizes a value as a Rejection.\n     * If the value is already a Rejection, returns it.\n     * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n     *\n     * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n     */\n    static normalize(detail) {\n      return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n    }\n    constructor(type, message, detail) {\n      this.$id = id++;\n      this.type = type;\n      this.message = message;\n      this.detail = detail;\n      this.redirected = false;\n    }\n    toString() {\n      const detailString = (d) =>\n        d && d.toString !== Object.prototype.toString\n          ? d.toString()\n          : stringify(d);\n      const detail = detailString(this.detail);\n      const { $id, type, message } = this;\n      return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n    }\n    toPromise() {\n      return Object.assign(silentRejection(this), { _transitionRejection: this });\n    }\n  }\n\n  /** @typedef {import('../../interface.js').ServiceProvider} ServiceProvider\n\n  /**\n   * Configurable provider for an injectable event bus\n   * @extends {ServiceProvider}\n   */\n  class PubSubProvider {\n    constructor() {\n      /**\n       * @type {PubSub}\n       */\n      this.eventBus = EventBus;\n    }\n\n    /**\n     * @returns {PubSub}\n     */\n    $get = () => this.eventBus;\n  }\n\n  class PubSub {\n    /**\n     * Topic-based publish/subscribe channel.  Maintains a map of topics to\n     * subscriptions.  When a message is published to a topic, all functions\n     * subscribed to that topic are invoked in the order they were added.\n     * Uncaught errors abort publishing.\n     *\n     * Topics may be identified by any nonempty string, <strong>except</strong>\n     * strings corresponding to native Object properties, e.g. \"constructor\",\n     * \"toString\", \"hasOwnProperty\", etc.\n     *\n     * @param {boolean=} async Enable asynchronous behavior.  Recommended for\n     *     new code.  See notes on the publish() method.\n     */\n    constructor(async = false) {\n      this.disposed = false;\n\n      /**\n       * The next available subscription key.  Internally, this is an index into the\n       * sparse array of subscriptions.\n       *\n       * @private {number}\n       */\n      this.key = 1;\n\n      /**\n       * Array of subscription keys pending removal once publishing is done.\n       *\n       * @private {!Array<number>}\n       * @const\n       */\n      this.pendingKeys = [];\n\n      /**\n       * Lock to prevent the removal of subscriptions during publishing. Incremented\n       * at the beginning of {@link #publish}, and decremented at the end.\n       *\n       * @private {number}\n       */\n      this.publishDepth = 0;\n\n      /**\n       * Sparse array of subscriptions. Each subscription is represented by a tuple\n       * comprising a topic identifier, a function, and an optional context object.\n       * Each tuple occupies three consecutive positions in the array, with the\n       * topic identifier at index n, the function at index (n + 1), the context\n       * object at index (n + 2), the next topic at index (n + 3), etc. (This\n       * representation minimizes the number of object allocations and has been\n       * shown to be faster than an array of objects with three key-value pairs or\n       * three parallel arrays, especially on IE.) Once a subscription is removed\n       * via {@link unsubscribe} or {@link unsubscribeByKey}, the three\n       * corresponding array elements are deleted, and never reused. This means the\n       * total number of subscriptions during the lifetime of the pubsub channel is\n       * limited by the maximum length of a JavaScript array to (2^32 - 1) / 3 =\n       * 1,431,655,765 subscriptions, which should suffice for most applications.\n       *\n       * @private {!Array<?>}\n       * @const\n       */\n      this.subscriptions = [];\n\n      /**\n       * Map of topics to arrays of subscription keys.\n       *\n       * @private {!Object<!Array<number>>}\n       */\n      this.topics = {};\n\n      /**\n       * @private @const {boolean}\n       */\n      this.async_ = Boolean(async);\n    }\n\n    /**\n     * Subscribes a function to a topic.  The function is invoked as a method on\n     * the given `opt_context` object, or in the global scope if no context\n     * is specified.  Subscribing the same function to the same topic multiple\n     * times will result in multiple function invocations while publishing.\n     * Returns a subscription key that can be used to unsubscribe the function from\n     * the topic via {@link unsubscribeByKey}.\n     *\n     * @param {string} topic Topic to subscribe to.\n     * @param {Function} fn Function to be invoked when a message is published to\n     *     the given topic.\n     * @param {Object=} opt_context Object in whose context the function is to be\n     *     called (the global scope if none).\n     * @return {number} Subscription key.\n     */\n    subscribe(topic, fn, opt_context = null) {\n      let keys = this.topics[topic];\n      if (!keys) {\n        // First subscription to this topic; initialize subscription key array.\n        keys = this.topics[topic] = [];\n      }\n\n      // Push the tuple representing the subscription onto the subscription array.\n      const key = this.key;\n      this.subscriptions[key] = topic;\n      this.subscriptions[key + 1] = fn;\n      this.subscriptions[key + 2] = opt_context;\n      this.key = key + 3;\n\n      // Push the subscription key onto the list of subscriptions for the topic.\n      keys.push(key);\n\n      // Return the subscription key.\n      return key;\n    }\n\n    /**\n     * Subscribes a single-use function to a topic.  The function is invoked as a\n     * method on the given `opt_context` object, or in the global scope if\n     * no context is specified, and is then unsubscribed.  Returns a subscription\n     * key that can be used to unsubscribe the function from the topic via\n     * {@link unsubscribeByKey}.\n     *\n     * @param {string} topic Topic to subscribe to.\n     * @param {Function} fn Function to be invoked once and then unsubscribed when\n     *     a message is published to the given topic.\n     * @param {Object=} opt_context Object in whose context the function is to be\n     *     called (the global scope if none).\n     * @return {number} Subscription key.\n     */\n    subscribeOnce(topic, fn, opt_context = null) {\n      let called = false;\n\n      // Behold the power of lexical closures!\n      const key = this.subscribe(\n        topic,\n        (...args) => {\n          if (!called) {\n            called = true;\n\n            // Unsubscribe before calling function so the function is unsubscribed\n            // even if it throws an exception.\n            this.unsubscribeByKey(key);\n\n            fn.apply(opt_context, args);\n          }\n        },\n        this,\n      );\n      return key;\n    }\n\n    /**\n     * Runs a function asynchronously.\n     *\n     * @private\n     * @param {Function} fn Function to run.\n     * @param {Object} context Context in which to run the function.\n     * @param {Array} args Arguments to pass to the function.\n     */\n    static runAsync_(fn, context, args) {\n      Promise.resolve().then(() => {\n        fn.apply(context, args);\n      });\n    }\n\n    /**\n     * Unsubscribes a function from a topic.  Only deletes the first match found.\n     * Returns a Boolean indicating whether a subscription was removed.\n     *\n     * @param {string} topic Topic to unsubscribe from.\n     * @param {Function} fn Function to unsubscribe.\n     * @param {Object=} opt_context Object in whose context the function was to be\n     *     called (the global scope if none).\n     * @return {boolean} Whether a matching subscription was removed.\n     */\n    unsubscribe(topic, fn, opt_context = null) {\n      const keys = this.topics[topic];\n      if (keys) {\n        const subscriptions = this.subscriptions;\n        const key = keys.find(\n          (k) =>\n            subscriptions[k + 1] === fn && subscriptions[k + 2] === opt_context,\n        );\n\n        if (key !== undefined) {\n          return this.unsubscribeByKey(key);\n        }\n      }\n\n      return false;\n    }\n\n    /**\n     * Removes a subscription based on the key returned by {@link subscribe}.\n     * No-op if no matching subscription is found.  Returns a Boolean indicating\n     * whether a subscription was removed.\n     *\n     * @param {number} key Subscription key.\n     * @return {boolean} Whether a matching subscription was removed.\n     */\n    unsubscribeByKey(key) {\n      const topic = this.subscriptions[key];\n      if (topic) {\n        let keys = this.topics[topic];\n\n        if (this.publishDepth !== 0) {\n          // Defer removal until after publishing is complete, but replace the\n          // function with a no-op so it isn't called.\n          this.pendingKeys.push(key);\n          this.subscriptions[key + 1] = () => {};\n        } else {\n          if (keys) {\n            this.topics[topic] = keys.filter((k) => k !== key);\n          }\n          delete this.subscriptions[key];\n          delete this.subscriptions[key + 1];\n          delete this.subscriptions[key + 2];\n        }\n      }\n\n      return !!topic;\n    }\n\n    /**\n     * Publishes a message to a topic.  Calls functions subscribed to the topic in\n     * the order in which they were added, passing all arguments along.\n     *\n     * If this object was created with async=true, subscribed functions are called\n     * via Promise.resolve().  Otherwise, the functions are called directly, and if\n     * any of them throw an uncaught error, publishing is aborted.\n     *\n     * @param {string} topic Topic to publish to.\n     * @param {...*} var_args Arguments that are applied to each subscription\n     *     function.\n     * @return {boolean} Whether any subscriptions were called.\n     */\n    publish(topic, ...var_args) {\n      const keys = this.topics[topic];\n      if (keys) {\n        const args = var_args;\n\n        if (this.async_) {\n          // For each key in the list of subscription keys for the topic, schedule\n          // the function to be applied to the arguments in the appropriate context.\n          for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            PubSub.runAsync_(\n              this.subscriptions[key + 1],\n              this.subscriptions[key + 2],\n              args,\n            );\n          }\n        } else {\n          this.publishDepth++;\n\n          try {\n            for (\n              let i = 0, len = keys.length;\n              i < len && !this.isDisposed();\n              i++\n            ) {\n              const key = keys[i];\n              this.subscriptions[key + 1].apply(\n                this.subscriptions[key + 2],\n                args,\n              );\n            }\n          } finally {\n            this.publishDepth--;\n\n            if (this.pendingKeys.length > 0 && this.publishDepth === 0) {\n              let pendingKey;\n              while ((pendingKey = this.pendingKeys.pop())) {\n                this.unsubscribeByKey(pendingKey);\n              }\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Clears the subscription list for a topic, or all topics if unspecified.\n     * @param {string=} opt_topic Topic to clear (all topics if unspecified).\n     */\n    clear(opt_topic) {\n      if (opt_topic) {\n        const keys = this.topics[opt_topic];\n        if (keys) {\n          keys.forEach(this.unsubscribeByKey, this);\n          delete this.topics[opt_topic];\n        }\n      } else {\n        this.subscriptions.length = 0;\n        this.topics = {};\n      }\n    }\n\n    /**\n     * Returns the number of subscriptions to the given topic (or all topics if\n     * unspecified). This number will not change while publishing any messages.\n     * @param {string=} opt_topic The topic (all topics if unspecified).\n     * @return {number} Number of subscriptions to the topic.\n     */\n    getCount(opt_topic) {\n      if (opt_topic) {\n        const keys = this.topics[opt_topic];\n        return keys ? keys.length : 0;\n      }\n\n      let count = 0;\n      for (const topic in this.topics) {\n        count += this.getCount(topic);\n      }\n\n      return count;\n    }\n\n    isDisposed() {\n      return this.disposed;\n    }\n\n    dispose() {\n      this.clear();\n      this.pendingKeys.length = 0;\n      this.disposed = true;\n    }\n  }\n\n  const EventBus = new PubSub(true);\n\n  const defaultOptions = {\n    current: () => {},\n    transition: null,\n    traceData: {},\n    bind: null,\n  };\n\n  class TransitionHook {\n    /**\n     * Chains together an array of TransitionHooks.\n     *\n     * Given a list of [[TransitionHook]] objects, chains them together.\n     * Each hook is invoked after the previous one completes.\n     *\n     * #### Example:\n     * ```js\n     * var hooks: TransitionHook[] = getHooks();\n     * let promise: Promise<any> = TransitionHook.chain(hooks);\n     *\n     * promise.then(handleSuccess, handleError);\n     * ```\n     *\n     * @param hooks the list of hooks to chain together\n     * @param waitFor if provided, the chain is `.then()`'ed off this promise\n     * @returns a `Promise` for sequentially invoking the hooks (in order)\n     */\n    static chain(hooks, waitFor) {\n      // Chain the next hook off the previous\n      const createHookChainR = (prev, nextHook) =>\n        prev.then(() => nextHook.invokeHook());\n      return hooks.reduce(createHookChainR, waitFor || Promise.resolve());\n    }\n\n    /**\n     * Invokes all the provided TransitionHooks, in order.\n     * Each hook's return value is checked.\n     * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n     * If no hook returns a promise, then all hooks are processed synchronously.\n     *\n     * @param hooks the list of TransitionHooks to invoke\n     * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n     *\n     * @returns a promise for the async result, or the result of the callback\n     */\n    static invokeHooks(hooks, doneCallback) {\n      for (let idx = 0; idx < hooks.length; idx++) {\n        const hookResult = hooks[idx].invokeHook();\n        if (isPromise(hookResult)) {\n          const remainingHooks = hooks.slice(idx + 1);\n          return TransitionHook.chain(remainingHooks, hookResult).then(() => {\n            doneCallback();\n          });\n        }\n      }\n      return doneCallback();\n    }\n\n    /**\n     * Run all TransitionHooks, ignoring their return value.\n     */\n    static runAllHooks(hooks) {\n      hooks.forEach((hook) => hook.invokeHook());\n    }\n\n    constructor(transition, stateContext, registeredHook, options) {\n      this.transition = transition;\n      this.stateContext = stateContext;\n      this.registeredHook = registeredHook;\n      this.options = options;\n      this.isSuperseded = () =>\n        this.type.hookPhase === TransitionHookPhase.RUN &&\n        !this.options.transition.isActive();\n      this.options = defaults(options, defaultOptions);\n      this.type = registeredHook.eventType;\n    }\n\n    logError(err) {\n      EventBus.publish(\"$stateService:defaultErrorHandler\", err);\n    }\n\n    invokeHook() {\n      const hook = this.registeredHook;\n      if (hook._deregistered) return;\n      const notCurrent = this.getNotCurrentRejection();\n      if (notCurrent) return notCurrent;\n      const options = this.options;\n      trace.traceHookInvocation(this, this.transition, options);\n      const invokeCallback = () =>\n        hook.callback.call(options.bind, this.transition, this.stateContext);\n      const normalizeErr = (err) => Rejection.normalize(err).toPromise();\n      const handleError = (err) => hook.eventType.getErrorHandler(this)(err);\n      const handleResult = (result) =>\n        hook.eventType.getResultHandler(this)(result);\n      try {\n        const result = invokeCallback();\n        if (!this.type.synchronous && isPromise(result)) {\n          return result.catch(normalizeErr).then(handleResult, handleError);\n        } else {\n          return handleResult(result);\n        }\n      } catch (err) {\n        // If callback throws (synchronously)\n        return handleError(Rejection.normalize(err));\n      } finally {\n        if (hook.invokeLimit && ++hook.invokeCount >= hook.invokeLimit) {\n          hook.deregister();\n        }\n      }\n    }\n    /**\n     * This method handles the return value of a Transition Hook.\n     *\n     * A hook can return false (cancel), a TargetState (redirect),\n     * or a promise (which may later resolve to false or a redirect)\n     *\n     * This also handles \"transition superseded\" -- when a new transition\n     * was started while the hook was still running\n     */\n    handleHookResult(result) {\n      const notCurrent = this.getNotCurrentRejection();\n      if (notCurrent) return notCurrent;\n      // Hook returned a promise\n      if (isPromise(result)) {\n        // Wait for the promise, then reprocess with the resulting value\n        return result.then((val) => this.handleHookResult(val));\n      }\n      trace.traceHookResult(result, this.transition);\n      // Hook returned false\n      if (result === false) {\n        // Abort this Transition\n        return Rejection.aborted(\"Hook aborted transition\").toPromise();\n      }\n\n      // hook returned a TargetState\n      if (result instanceof TargetState) {\n        // Halt the current Transition and redirect (a new Transition) to the TargetState.\n        return Rejection.redirected(result).toPromise();\n      }\n    }\n    /**\n     * Return a Rejection promise if the transition is no longer current due\n     * a new transition has started and superseded this one.\n     */\n    getNotCurrentRejection() {\n      if (this.transition._aborted) {\n        return Rejection.aborted().toPromise();\n      }\n      // This transition is no longer current.\n      // Another transition started while this hook was still running.\n      if (this.isSuperseded()) {\n        // Abort this transition\n        return Rejection.superseded(this.options.current()).toPromise();\n      }\n    }\n    toString() {\n      const { options, registeredHook } = this;\n      const event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context =\n          parse(\"traceData.context.state.name\")(options) ||\n          parse(\"traceData.context\")(options) ||\n          \"unknown\",\n        name = fnToString(registeredHook.callback);\n      return `${event} context: ${context}, ${maxLength(200, name)}`;\n    }\n  }\n  /**\n   * These GetResultHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  TransitionHook.HANDLE_RESULT = (hook) => (result) =>\n    hook.handleHookResult(result);\n  /**\n   * If the result is a promise rejection, log it.\n   * Otherwise, ignore the result.\n   */\n  TransitionHook.LOG_REJECTED_RESULT = (hook) => (result) => {\n    isPromise(result) &&\n      result.catch((err) => hook.logError(Rejection.normalize(err)));\n    return undefined;\n  };\n  /**\n   * These GetErrorHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  TransitionHook.LOG_ERROR = (hook) => (error) => hook.logError(error);\n  TransitionHook.REJECT_ERROR = () => (error) => silentRejection(error);\n  TransitionHook.THROW_ERROR = () => (error) => {\n    throw error;\n  };\n\n  /**\n   * Matches state names using glob-like pattern strings.\n   *\n   * Globs can be used in specific APIs including:\n   *\n   * - [[StateService.is]]\n   * - [[StateService.includes]]\n   * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n   *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n   *\n   * A `Glob` string is a pattern which matches state names.\n   * Nested state names are split into segments (separated by a dot) when processing.\n   * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n   *\n   * Globs work according to the following rules:\n   *\n   * ### Exact match:\n   *\n   * The glob `'A.B'` matches the state named exactly `'A.B'`.\n   *\n   * | Glob        |Matches states named|Does not match state named|\n   * |:------------|:--------------------|:---------------------|\n   * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n   * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n   * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n   *\n   * ### Single star (`*`)\n   *\n   * A single star (`*`) is a wildcard that matches exactly one segment.\n   *\n   * | Glob        |Matches states named  |Does not match state named |\n   * |:------------|:---------------------|:--------------------------|\n   * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n   * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n   * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n   *\n   * ### Double star (`**`)\n   *\n   * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n   *\n   * | Glob        |Matches states named                           |Does not match state named         |\n   * |:------------|:----------------------------------------------|:----------------------------------|\n   * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n   * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n   * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n   * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n   *\n   */\n  class Glob {\n    /** Returns a glob from the string, or null if the string isn't Glob-like\n     * @param {string} text\n     * @returns {?Glob}\n     */\n    static fromString(text) {\n      return hasGlobs(text) ? new Glob(text) : null;\n    }\n\n    /**\n     * @param {string} text\n     */\n    constructor(text) {\n      /**\n       * @type {string}\n       */\n      this.text = text;\n\n      /**\n       * @type {string[]}\n       */\n      this.glob = text.split(\".\");\n\n      const regexpString = this.text\n        .split(\".\")\n        .map((seg) => {\n          if (seg === \"**\") return \"(?:|(?:\\\\.[^.]*)*)\";\n          if (seg === \"*\") return \"\\\\.[^.]*\";\n          return \"\\\\.\" + seg;\n        })\n        .join(\"\");\n\n      /**\n       * @type {RegExp}\n       */\n      this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n    }\n\n    /**\n     * @param {string} name\n     * @return {boolean}\n     */\n    matches(name) {\n      return this.regexp.test(\".\" + name);\n    }\n  }\n\n  /** Returns true if the string has glob-like characters in it\n   *  @param {string} text\n   *  @returns {boolean}\n   */\n  function hasGlobs(text) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /**\n   * Determines if the given state matches the matchCriteria\n   *\n   * @internal\n   *\n   * @param state a State Object to test against\n   * @param criterion\n   * - If a string, matchState uses the string as a glob-matcher against the state name\n   * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n   *   and returns a positive match if any of the globs match.\n   * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n   * @returns {boolean}\n   */\n  function matchState(state, criterion, transition) {\n    const toMatch = isString(criterion) ? [criterion] : criterion;\n    function matchGlobs(_state) {\n      const globStrings = toMatch;\n      for (let i = 0; i < globStrings.length; i++) {\n        const glob = new Glob(globStrings[i]);\n        if (\n          (glob && glob.matches(_state.name)) ||\n          (!glob && globStrings[i] === _state.name)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    }\n    const matchFn = isFunction(toMatch) ? toMatch : matchGlobs;\n    return !!matchFn(state, transition);\n  }\n  /**\n   * The registration data for a registered transition hook\n   */\n  class RegisteredHook {\n    constructor(\n      tranSvc,\n      eventType,\n      callback,\n      matchCriteria,\n      removeHookFromRegistry,\n      options = {},\n    ) {\n      this.tranSvc = tranSvc;\n      this.eventType = eventType;\n      this.callback = callback;\n      this.matchCriteria = matchCriteria;\n      this.removeHookFromRegistry = removeHookFromRegistry;\n      this.invokeCount = 0;\n      this._deregistered = false;\n      this.priority = options.priority || 0;\n      this.bind = options.bind || null;\n      this.invokeLimit = options.invokeLimit;\n    }\n    /**\n     * Gets the matching [[PathNode]]s\n     *\n     * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n     * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n     *\n     * Returning `null` is significant to distinguish between the default\n     * \"match-all criterion value\" of `true` compared to a `() => true` function,\n     * when the nodes is an empty array.\n     *\n     * This is useful to allow a transition match criteria of `entering: true`\n     * to still match a transition, even when `entering === []`.  Contrast that\n     * with `entering: (state) => true` which only matches when a state is actually\n     * being entered.\n     */\n    _matchingNodes(nodes, criterion, transition) {\n      if (criterion === true) return nodes;\n      const matching = nodes.filter((node) =>\n        matchState(node.state, criterion, transition),\n      );\n      return matching.length ? matching : null;\n    }\n    /**\n     * Gets the default match criteria (all `true`)\n     *\n     * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n     *\n     * ```js\n     * {\n     *   to: true,\n     *   from: true,\n     *   entering: true,\n     *   exiting: true,\n     *   retained: true,\n     * }\n     */\n    _getDefaultMatchCriteria() {\n      return map(this.tranSvc._pluginapi._getPathTypes(), () => true);\n    }\n    /**\n     * Gets matching nodes as [[IMatchingNodes]]\n     *\n     * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n     *\n     * ```js\n     * let matches: IMatchingNodes = {\n     *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n     *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n     *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n     *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n     *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n     * };\n     * ```\n     */\n    _getMatchingNodes(treeChanges, transition) {\n      const criteria = Object.assign(\n        this._getDefaultMatchCriteria(),\n        this.matchCriteria,\n      );\n      const paths = Object.values(this.tranSvc._pluginapi._getPathTypes());\n      return paths.reduce((mn, pathtype) => {\n        // STATE scope criteria matches against every node in the path.\n        // TRANSITION scope criteria matches against only the last node in the path\n        const isStateHook = pathtype.scope === TransitionHookScope.STATE;\n        const path = treeChanges[pathtype.name] || [];\n        const nodes = isStateHook ? path : [tail(path)];\n        mn[pathtype.name] = this._matchingNodes(\n          nodes,\n          criteria[pathtype.name],\n          transition,\n        );\n        return mn;\n      }, {});\n    }\n    /**\n     * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n     *\n     * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n     * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n     */\n    matches(treeChanges, transition) {\n      const matches = this._getMatchingNodes(treeChanges, transition);\n      // Check if all the criteria matched the TreeChanges object\n      const allMatched = Object.values(matches).every((x) => x);\n      return allMatched ? matches : null;\n    }\n    deregister() {\n      this.removeHookFromRegistry(this);\n      this._deregistered = true;\n    }\n  }\n  /** Return a registration function of the requested type. */\n  function makeEvent(registry, transitionService, eventType) {\n    // Create the object which holds the registered transition hooks.\n    const _registeredHooks = (registry._registeredHooks =\n      registry._registeredHooks || {});\n    const hooks = (_registeredHooks[eventType.name] = []);\n    const removeHookFn = removeFrom(hooks);\n    // Create hook registration function on the IHookRegistry for the event\n    registry[eventType.name] = hookRegistrationFn;\n    function hookRegistrationFn(matchObject, callback, options = {}) {\n      const registeredHook = new RegisteredHook(\n        transitionService,\n        eventType,\n        callback,\n        matchObject,\n        removeHookFn,\n        options,\n      );\n      hooks.push(registeredHook);\n      return registeredHook.deregister.bind(registeredHook);\n    }\n    return hookRegistrationFn;\n  }\n\n  /**\n   * This class returns applicable TransitionHooks for a specific Transition instance.\n   *\n   * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n   * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n   * determined by the type of hook)\n   *\n   * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n   *\n   * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n   * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n   * in the Transition class, so we must also provide the Transition's _treeChanges)\n   */\n  class HookBuilder {\n    constructor(transition) {\n      this.transition = transition;\n    }\n\n    /**\n     * @param {TransitionHookPhase} phase\n     * @returns\n     */\n    buildHooksForPhase(phase) {\n      return this.transition.transitionService._pluginapi\n        ._getEvents(phase)\n        .map((type) => this.buildHooks(type))\n        .reduce(unnestR, [])\n        .filter(Boolean);\n    }\n\n    /**\n     * Returns an array of newly built TransitionHook objects.\n     *\n     * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n     * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n     * - For each of the [[PathNode]]s, creates a TransitionHook\n     *\n     * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n     */\n    buildHooks(hookType) {\n      const transition = this.transition;\n      const treeChanges = transition.treeChanges();\n      // Find all the matching registered hooks for a given hook type\n      const matchingHooks = this.getMatchingHooks(\n        hookType,\n        treeChanges,\n        transition,\n      );\n      if (!matchingHooks) return [];\n      const baseHookOptions = {\n        transition: transition,\n        current: transition.options().current,\n      };\n      const makeTransitionHooks = (hook) => {\n        // Fetch the Nodes that caused this hook to match.\n        const matches = hook.matches(treeChanges, transition);\n        // Select the PathNode[] that will be used as TransitionHook context objects\n        const matchingNodes = matches[hookType.criteriaMatchPath.name];\n        // Return an array of HookTuples\n        return matchingNodes.map((node) => {\n          const _options = Object.assign(\n            {\n              bind: hook.bind,\n              traceData: { hookType: hookType.name, context: node },\n            },\n            baseHookOptions,\n          );\n          const state =\n            hookType.criteriaMatchPath.scope === TransitionHookScope.STATE\n              ? node.state.self\n              : null;\n          const transitionHook = new TransitionHook(\n            transition,\n            state,\n            hook,\n            _options,\n          );\n          return { hook, node, transitionHook };\n        });\n      };\n      return matchingHooks\n        .map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(tupleSort(hookType.reverseSort))\n        .map((tuple) => tuple.transitionHook);\n    }\n    /**\n     * Finds all RegisteredHooks from:\n     * - The Transition object instance hook registry\n     * - The TransitionService ($transitions) global hook registry\n     *\n     * which matched:\n     * - the eventType\n     * - the matchCriteria (to, from, exiting, retained, entering)\n     *\n     * @returns an array of matched [[RegisteredHook]]s\n     */\n    getMatchingHooks(hookType, treeChanges, transition) {\n      const isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n      // Instance and Global hook registries\n      const $transitions = this.transition.transitionService;\n      const registries = isCreate\n        ? [$transitions]\n        : [this.transition, $transitions];\n      return registries\n        .map((reg) => reg.getHooks(hookType.name)) // Get named hooks from registries\n        .filter(\n          assertPredicate(Array.isArray, `broken event named: ${hookType.name}`),\n        ) // Sanity check\n        .reduce(unnestR, []) // Un-nest RegisteredHook[][] to RegisteredHook[] array\n        .filter((hook) => hook.matches(treeChanges, transition)); // Only those satisfying matchCriteria\n    }\n  }\n  /**\n   * A factory for a sort function for HookTuples.\n   *\n   * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n   * the EventHook priority.\n   *\n   * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n   * @returns a tuple sort function\n   */\n  function tupleSort(reverseDepthSort = false) {\n    return function nodeDepthThenPriority(l, r) {\n      const factor = reverseDepthSort ? -1 : 1;\n      const depthDelta =\n        (l.node.state.path.length - r.node.state.path.length) * factor;\n      return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n    };\n  }\n\n  /** @typedef {import('./interface.ts').IHookRegistry} IHookRegistry */\n\n  /**\n   * Represents a transition between two states.\n   *\n   * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n   *\n   * This object contains all contextual information about the to/from states, parameters, resolves.\n   * It has information about all states being entered and exited as a result of the transition.\n   * @implements {IHookRegistry}\n   */\n  class Transition {\n    /**\n     * Creates a new Transition object.\n     *\n     * If the target state is not valid, an error is thrown.\n     *\n     * @param {Array<import('../path/path-node.js').PathNode>} fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n     *        encapsulates the \"from state\".\n     * @param {import('../state/target-state.js').TargetState} targetState The target state and parameters being transitioned to (also, the transition options)\n     * @param {import('../transition/transition-service.js').TransitionProvider} transitionService The [[TransitionService]] instance\n     * @param {import('../router.js').Router} globals\n     */\n    constructor(fromPath, targetState, transitionService, globals) {\n      /**\n       * @type {import('../router.js').Router}\n       */\n      this.globals = globals;\n      this.transitionService = transitionService;\n      this._deferred = Promise.withResolvers();\n      /**\n       * This promise is resolved or rejected based on the outcome of the Transition.\n       *\n       * When the transition is successful, the promise is resolved\n       * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n       */\n      this.promise = this._deferred.promise;\n      /** @internal Holds the hook registration functions such as those passed to Transition.onStart() */\n      this._registeredHooks = {};\n\n      this._hookBuilder = new HookBuilder(this);\n      /** Checks if this transition is currently active/running. */\n      this.isActive = () => this.globals.transition === this;\n      this._targetState = targetState;\n      if (!targetState.valid()) {\n        throw new Error(targetState.error());\n      }\n      // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n      this._options = Object.assign(\n        { current: val(this) },\n        targetState.options(),\n      );\n      this.$id = transitionService._transitionCount++;\n      const toPath = PathUtils.buildToPath(fromPath, targetState);\n      this._treeChanges = PathUtils.treeChanges(\n        fromPath,\n        toPath,\n        this._options.reloadState,\n      );\n      this.createTransitionHookRegFns();\n      const onCreateHooks = this._hookBuilder.buildHooksForPhase(\n        TransitionHookPhase.CREATE,\n      );\n      TransitionHook.invokeHooks(onCreateHooks, () => null);\n      this.applyViewConfigs();\n      this.onStart = undefined;\n      this.onBefore = undefined;\n      this.onSuccess = undefined;\n      this.onEnter = undefined;\n      this.onRetain = undefined;\n      this.onExit = undefined;\n      this.onFinish = undefined;\n      this.onError = undefined;\n    }\n\n    /**\n     * Creates the transition-level hook registration functions\n     * (which can then be used to register hooks)\n     */\n    createTransitionHookRegFns() {\n      this.transitionService._pluginapi\n        ._getEvents()\n        .filter((type) => type.hookPhase !== TransitionHookPhase.CREATE)\n        .forEach((type) => makeEvent(this, this.transitionService, type));\n    }\n\n    getHooks(hookName) {\n      return this._registeredHooks[hookName];\n    }\n\n    applyViewConfigs() {\n      const enteringStates = this._treeChanges.entering.map((node) => node.state);\n      PathUtils.applyViewConfigs(\n        this.transitionService.$view,\n        this._treeChanges.to,\n        enteringStates,\n      );\n    }\n    /**\n     * @returns {import('../state/state-object.js').StateObject} the internal from [State] object\n     */\n    $from() {\n      return tail(this._treeChanges.from).state;\n    }\n    /**\n     * @returns {import('../state/state-object.js').StateObject} the internal to [State] object\n     */\n    $to() {\n      return tail(this._treeChanges.to).state;\n    }\n    /**\n     * Returns the \"from state\"\n     *\n     * Returns the state that the transition is coming *from*.\n     *\n     * @returns The state declaration object for the Transition's (\"from state\").\n     */\n    from() {\n      return this.$from().self;\n    }\n    /**\n     * Returns the \"to state\"\n     *\n     * Returns the state that the transition is going *to*.\n     *\n     * @returns The state declaration object for the Transition's target state (\"to state\").\n     */\n    to() {\n      return this.$to().self;\n    }\n    /**\n     * Gets the Target State\n     *\n     * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n     *\n     * @returns the [[TargetState]] of this Transition\n     */\n    targetState() {\n      return this._targetState;\n    }\n    /**\n     * Determines whether two transitions are equivalent.\n     * @deprecated\n     */\n    is(compare) {\n      if (compare instanceof Transition) {\n        // TODO: Also compare parameters\n        return this.is({ to: compare.$to().name, from: compare.$from().name });\n      }\n      return !(\n        (compare.to && !matchState(this.$to(), compare.to, this)) ||\n        (compare.from && !matchState(this.$from(), compare.from, this))\n      );\n    }\n    params(pathname = \"to\") {\n      return Object.freeze(\n        this._treeChanges[pathname]\n          .map((x) => x.paramValues)\n          .reduce((acc, obj) => ({ ...acc, ...obj }), {}),\n      );\n    }\n\n    /**\n     * Gets all available resolve tokens (keys)\n     *\n     * This method can be used in conjunction with [[injector]] to inspect the resolve values\n     * available to the Transition.\n     *\n     * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n     * in the Transition's [[TreeChanges.to]] path.\n     *\n     * #### Example:\n     * This example logs all resolve values\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n     * ```\n     *\n     * #### Example:\n     * This example creates promises for each resolve value.\n     * This triggers fetches of resolves (if any have not yet been fetched).\n     * When all promises have all settled, it logs the resolve values.\n     * ```js\n     * let tokens = trans.getResolveTokens();\n     * let promise = tokens.map(token => trans.injector().getAsync(token));\n     * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n     * ```\n     *\n     * Note: Angular 1 users whould use `$q.all()`\n     *\n     * @param pathname resolve context's path name (e.g., `to` or `from`)\n     *\n     * @returns an array of resolve tokens (keys)\n     */\n    getResolveTokens(pathname = \"to\") {\n      return new ResolveContext(this._treeChanges[pathname]).getTokens();\n    }\n\n    /**\n     * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n     *\n     * Allows a transition hook to dynamically add a Resolvable to this Transition.\n     *\n     * Use the [[Transition.injector]] to retrieve the resolved data in subsequent hooks ([[UIInjector.get]]).\n     *\n     * If a `state` argument is provided, the Resolvable is processed when that state is being entered.\n     * If no `state` is provided then the root state is used.\n     * If the given `state` has already been entered, the Resolvable is processed when any child state is entered.\n     * If no child states will be entered, the Resolvable is processed during the `onFinish` phase of the Transition.\n     *\n     * The `state` argument also scopes the resolved data.\n     * The resolved data is available from the injector for that `state` and any children states.\n     *\n     * #### Example:\n     * ```js\n     * transitionService.onBefore({}, transition => {\n     *   transition.addResolvable({\n     *     token: 'myResolve',\n     *     deps: ['MyService'],\n     *     resolveFn: myService => myService.getData()\n     *   });\n     * });\n     * ```\n     *\n     * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n     * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n     */\n    addResolvable(resolvable, state) {\n      if (state === void 0) {\n        state = \"\";\n      }\n      resolvable = is(Resolvable)(resolvable)\n        ? resolvable\n        : new Resolvable(resolvable);\n      const stateName = typeof state === \"string\" ? state : state.name;\n      const topath = this._treeChanges.to;\n      const targetNode = find(topath, (node) => {\n        return node.state.name === stateName;\n      });\n      assert(!!targetNode, `targetNode not found ${stateName}`);\n      const resolveContext = new ResolveContext(topath);\n      resolveContext.addResolvables(\n        [resolvable],\n        /** @type {import(\"../path/path-node.js\").PathNode} */ (targetNode).state,\n      );\n    }\n    /**\n     * Gets the transition from which this transition was redirected.\n     *\n     * If the current transition is a redirect, this method returns the transition that was redirected.\n     *\n     * #### Example:\n     * ```js\n     * let transitionA = $state.go('A').transition\n     * transitionA.onStart({}, () => $state.target('B'));\n     * $transitions.onSuccess({ to: 'B' }, (trans) => {\n     *   trans.to().name === 'B'; // true\n     *   trans.redirectedFrom() === transitionA; // true\n     * });\n     * ```\n     *\n     * @returns The previous Transition, or null if this Transition is not the result of a redirection\n     */\n    redirectedFrom() {\n      return this._options.redirectedFrom || null;\n    }\n    /**\n     * Gets the original transition in a redirect chain\n     *\n     * A transition might belong to a long chain of multiple redirects.\n     * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n     *\n     * #### Example:\n     * ```js\n     * // states\n     * registry.register({ name: 'A', redirectTo: 'B' });\n     * registry.register({ name: 'B', redirectTo: 'C' });\n     * registry.register({ name: 'C', redirectTo: 'D' });\n     * registry.register({ name: 'D' });\n     *\n     * let transitionA = $state.go('A').transition\n     *\n     * $transitions.onSuccess({ to: 'D' }, (trans) => {\n     *   trans.to().name === 'D'; // true\n     *   trans.redirectedFrom().to().name === 'C'; // true\n     *   trans.originalTransition() === transitionA; // true\n     *   trans.originalTransition().to().name === 'A'; // true\n     * });\n     * ```\n     *\n     * @returns The original Transition that started a redirect chain\n     */\n    originalTransition() {\n      const rf = this.redirectedFrom();\n      return (rf && rf.originalTransition()) || this;\n    }\n    /**\n     * Get the transition options\n     *\n     * @returns the options for this Transition.\n     */\n    options() {\n      return this._options;\n    }\n    /**\n     * Gets the states being entered.\n     *\n     * @returns an array of states that will be entered during this transition.\n     */\n    entering() {\n      return map(this._treeChanges.entering, (x) => x.state).map((x) => x.self);\n    }\n    /**\n     * Gets the states being exited.\n     *\n     * @returns an array of states that will be exited during this transition.\n     */\n    exiting() {\n      return map(this._treeChanges.exiting, (x) => x.state)\n        .map((x) => x.self)\n        .reverse();\n    }\n    /**\n     * Gets the states being retained.\n     *\n     * @returns an array of states that are already entered from a previous Transition, that will not be\n     *    exited during this Transition\n     */\n    retained() {\n      return map(this._treeChanges.retained, (x) => x.state).map((x) => x.self);\n    }\n    /**\n     * Get the [[ViewConfig]]s associated with this Transition\n     *\n     * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n     * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n     *\n     * @param pathname the name of the path to fetch views for:\n     *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n     * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n     *\n     * @returns a list of ViewConfig objects for the given path.\n     */\n    views(pathname = \"entering\", state) {\n      let path = this._treeChanges[pathname];\n      path = !state ? path : path.filter(propEq(\"state\", state));\n      return path.map((x) => x.views).reduce(unnestR, []);\n    }\n    treeChanges(pathname) {\n      return pathname ? this._treeChanges[pathname] : this._treeChanges;\n    }\n    /**\n     * Creates a new transition that is a redirection of the current one.\n     *\n     * This transition can be returned from a [[TransitionService]] hook to\n     * redirect a transition to a new state and/or set of parameters.\n     *\n     * @internal\n     *\n     * @returns Returns a new [[Transition]] instance.\n     */\n    redirect(targetState) {\n      let redirects = 1,\n        trans = this;\n      while ((trans = trans.redirectedFrom()) != null) {\n        if (++redirects > 20)\n          throw new Error(`Too many consecutive Transition redirects (20+)`);\n      }\n      const redirectOpts = { redirectedFrom: this, source: \"redirect\" };\n      // If the original transition was caused by URL sync, then use { location: 'replace' }\n      // on the new transition (unless the target state explicitly specifies location: false).\n      // This causes the original url to be replaced with the url for the redirect target\n      // so the original url disappears from the browser history.\n      if (\n        this.options().source === \"url\" &&\n        targetState.options().location !== false\n      ) {\n        redirectOpts.location = \"replace\";\n      }\n      const newOptions = Object.assign(\n        {},\n        this.options(),\n        targetState.options(),\n        redirectOpts,\n      );\n      targetState = targetState.withOptions(newOptions, true);\n      const newTransition = this.transitionService.create(\n        this._treeChanges.from,\n        targetState,\n      );\n      const originalEnteringNodes = this._treeChanges.entering;\n      const redirectEnteringNodes = newTransition._treeChanges.entering;\n      // --- Re-use resolve data from original transition ---\n      // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n      // (because of the redirect), the resolves fetched by the original transition are still valid in the\n      // redirected transition.\n      //\n      // This allows you to define a redirect on a parent state which depends on an async resolve value.\n      // You can wait for the resolve, then redirect to a child state based on the result.\n      // The redirected transition does not have to re-fetch the resolve.\n      // ---------------------------------------------------------\n      const nodeIsReloading = (reloadState) => (node) => {\n        return reloadState && node.state.includes[reloadState.name];\n      };\n      // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n      const matchingEnteringNodes = PathUtils.matching(\n        redirectEnteringNodes,\n        originalEnteringNodes,\n        PathUtils.nonDynamicParams,\n      ).filter((x) => !nodeIsReloading(targetState.options().reloadState)(x));\n      // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n      matchingEnteringNodes.forEach((node, idx) => {\n        node.resolvables = originalEnteringNodes[idx].resolvables;\n      });\n      return newTransition;\n    }\n    /** @internal If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n    _changedParams() {\n      const tc = this._treeChanges;\n      /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n      // If user explicitly wants a reload\n      if (this._options.reload) return undefined;\n      // If any states are exiting or entering\n      if (tc.exiting.length || tc.entering.length) return undefined;\n      // If to/from path lengths differ\n      if (tc.to.length !== tc.from.length) return undefined;\n      // If the to/from paths are different\n      const pathsDiffer = arrayTuples(tc.to, tc.from)\n        .map((tuple) => tuple[0].state !== tuple[1].state)\n        .reduce(anyTrueR, false);\n      if (pathsDiffer) return undefined;\n      // Find any parameter values that differ\n      const nodeSchemas = tc.to.map((node) => node.paramSchema);\n      const [toValues, fromValues] = [tc.to, tc.from].map((path) =>\n        path.map((x) => x.paramValues),\n      );\n      const tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n      return tuples\n        .map(([schema, toVals, fromVals]) =>\n          Param.changed(schema, toVals, fromVals),\n        )\n        .reduce(unnestR, []);\n    }\n    /**\n     * Returns true if the transition is dynamic.\n     *\n     * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n     *\n     * @returns true if the Transition is dynamic\n     */\n    dynamic() {\n      const changes = this._changedParams();\n      return !changes\n        ? false\n        : changes.map((x) => x.dynamic).reduce(anyTrueR, false);\n    }\n    /**\n     * Returns true if the transition is ignored.\n     *\n     * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n     *\n     * @returns true if the Transition is ignored.\n     */\n    ignored() {\n      return !!this._ignoredReason();\n    }\n\n    _ignoredReason() {\n      const pending = this.globals.transition;\n      const reloadState = this._options.reloadState;\n      const same = (pathA, pathB) => {\n        if (pathA.length !== pathB.length) return false;\n        const matching = PathUtils.matching(pathA, pathB);\n        return (\n          pathA.length ===\n          matching.filter(\n            (node) => !reloadState || !node.state.includes[reloadState.name],\n          ).length\n        );\n      };\n      const newTC = this._treeChanges;\n      const pendTC = pending && pending._treeChanges;\n      if (\n        pendTC &&\n        same(pendTC.to, newTC.to) &&\n        same(pendTC.exiting, newTC.exiting)\n      )\n        return \"SameAsPending\";\n      if (\n        newTC.exiting.length === 0 &&\n        newTC.entering.length === 0 &&\n        same(newTC.from, newTC.to)\n      )\n        return \"SameAsCurrent\";\n    }\n    /**\n     * Runs the transition\n     *\n     * This method is generally called from the [[StateService.transitionTo]]\n     *\n     * @internal\n     *\n     * @returns a promise for a successful transition.\n     */\n    run() {\n      // Gets transition hooks array for the given phase\n      const getHooksFor = (phase) => this._hookBuilder.buildHooksForPhase(phase);\n      // When the chain is complete, then resolve or reject the deferred\n      const transitionSuccess = () => {\n        trace.traceSuccess(this.$to(), this);\n        this.success = true;\n        this._deferred.resolve(this.to());\n        const hooks = this._hookBuilder.buildHooksForPhase(\n          TransitionHookPhase.SUCCESS,\n        );\n        hooks.forEach((hook) => {\n          hook.invokeHook();\n        });\n      };\n\n      const transitionError = (reason) => {\n        trace.traceError(reason, this);\n        this.success = false;\n        this._deferred.reject(reason);\n        this._error = reason;\n        const hooks = getHooksFor(TransitionHookPhase.ERROR);\n        hooks.forEach((hook) => hook.invokeHook());\n      };\n\n      const runTransition = () => {\n        // Wait to build the RUN hook chain until the BEFORE hooks are done\n        // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n        const allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n        const resolved = Promise.resolve();\n        return TransitionHook.invokeHooks(allRunHooks, () => resolved);\n      };\n      const startTransition = () => {\n        const globals = this.globals;\n        globals.lastStartedTransitionId = this.$id;\n        globals.transition = this;\n        globals.transitionHistory.enqueue(this);\n        trace.traceTransitionStart(this);\n        return Promise.resolve();\n      };\n      const allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n      TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n        .then(runTransition)\n        .then(transitionSuccess, transitionError);\n      return this.promise;\n    }\n    /**\n     * Checks if the Transition is valid\n     *\n     * @returns true if the Transition is valid\n     */\n    valid() {\n      return !this.error() || this.success !== undefined;\n    }\n    /**\n     * Aborts this transition\n     *\n     * Imperative API to abort a Transition.\n     * This only applies to Transitions that are not yet complete.\n     */\n    abort() {\n      // Do not set flag if the transition is already complete\n      if (isUndefined(this.success)) {\n        this._aborted = true;\n      }\n    }\n    /**\n     * The Transition error reason.\n     *\n     * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n     * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n     *\n     * @returns a transition rejection explaining why the transition is invalid, or the reason the transition failed.\n     */\n    error() {\n      const state = this.$to();\n      if (state.self.abstract) {\n        return Rejection.invalid(\n          `Cannot transition to abstract state '${state.name}'`,\n        );\n      }\n      const paramDefs = state.parameters();\n      const values = this.params();\n      const invalidParams = paramDefs.filter(\n        (param) => !param.validates(values[param.id]),\n      );\n      if (invalidParams.length) {\n        const invalidValues = invalidParams\n          .map((param) => `[${param.id}:${stringify(values[param.id])}]`)\n          .join(\", \");\n        const detail = `The following parameter values are not valid for state '${state.name}': ${invalidValues}`;\n        return Rejection.invalid(detail);\n      }\n      if (this.success === false) return this._error;\n    }\n    /**\n     * A string representation of the Transition\n     *\n     * @returns A string representation of the Transition\n     */\n    toString() {\n      const fromStateOrName = this.from();\n      const toStateOrName = this.to();\n      const avoidEmptyHash = (params) =>\n        params[\"#\"] !== null && params[\"#\"] !== undefined\n          ? params\n          : omit(params, [\"#\"]);\n      // (X) means the to state is invalid.\n      const id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = stringify(\n          avoidEmptyHash(\n            this._treeChanges.from\n              .map((x) => x.paramValues)\n              .reduce((acc, obj) => ({ ...acc, ...obj }), {}),\n          ),\n        ),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = stringify(avoidEmptyHash(this.params()));\n      return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n    }\n  }\n\n  Transition.diToken = Transition;\n\n  function registerAddCoreResolvables(transitionService) {\n    transitionService.onCreate({}, function addCoreResolvables(trans) {\n      trans.addResolvable(Resolvable.fromData(Transition, trans), \"\");\n      trans.addResolvable(Resolvable.fromData(\"$transition$\", trans), \"\");\n      trans.addResolvable(\n        Resolvable.fromData(\"$stateParams\", trans.params()),\n        \"\",\n      );\n      trans.entering().forEach((state) => {\n        trans.addResolvable(Resolvable.fromData(\"$state$\", state), state);\n      });\n    });\n  }\n\n  const TRANSITION_TOKENS = [\"$transition$\", Transition];\n\n  // References to Transition in the treeChanges pathnodes makes all\n  // previous Transitions reachable in memory, causing a memory leak\n  // This function removes resolves for '$transition$' and `Transition` from the treeChanges.\n  // Do not use this on current transitions, only on old ones.\n  function treeChangesCleanup(trans) {\n    const nodes = Object.values(trans.treeChanges())\n      .reduce(unnestR, [])\n      .reduce(uniqR, []);\n    // If the resolvable is a Transition, return a new resolvable with null data\n    const replaceTransitionWithNull = (r) => {\n      return TRANSITION_TOKENS.includes(r.token)\n        ? Resolvable.fromData(r.token, null)\n        : r;\n    };\n    nodes.forEach((node) => {\n      node.resolvables = node.resolvables.map(replaceTransitionWithNull);\n    });\n  }\n\n  /**\n   * A factory which creates an onEnter, onExit or onRetain transition hook function\n   *\n   * The returned function invokes the (for instance) state.onEnter hook when the\n   * state is being entered.\n   */\n  function makeEnterExitRetainHook(hookName) {\n    return (transition, state) => {\n      const _state = state.$$state();\n      const hookFn = _state[hookName];\n      return hookFn(transition, state);\n    };\n  }\n  /**\n   * The [[TransitionStateHookFn]] for onExit\n   *\n   * When the state is being exited, the state's .onExit function is invoked.\n   *\n   * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n   *\n   * See: [[IHookRegistry.onExit]]\n   */\n  const onExitHook = makeEnterExitRetainHook(\"onExit\");\n  const registerOnExitHook = (transitionService) =>\n    transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);\n  /**\n   * The [[TransitionStateHookFn]] for onRetain\n   *\n   * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n   *\n   * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n   *\n   * See: [[IHookRegistry.onRetain]]\n   */\n  const onRetainHook = makeEnterExitRetainHook(\"onRetain\");\n  const registerOnRetainHook = (transitionService) =>\n    transitionService.onRetain(\n      { retained: (state) => !!state.onRetain },\n      onRetainHook,\n    );\n  /**\n   * The [[TransitionStateHookFn]] for onEnter\n   *\n   * When the state is being entered, the state's .onEnter function is invoked.\n   *\n   * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n   *\n   * See: [[IHookRegistry.onEnter]]\n   */\n  const onEnterHook = makeEnterExitRetainHook(\"onEnter\");\n  const registerOnEnterHook = (transitionService) =>\n    transitionService.onEnter(\n      { entering: (state) => !!state.onEnter },\n      onEnterHook,\n    );\n\n  const RESOLVE_HOOK_PRIORITY = 1000;\n  /**\n   * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n   *\n   * Registered using `transitionService.onStart({}, eagerResolvePath, { priority: 1000 });`\n   *\n   * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n   *\n   * See [[StateDeclaration.resolve]]\n   */\n  const eagerResolvePath = (trans) =>\n    new ResolveContext(trans.treeChanges().to)\n      .resolvePath(\"EAGER\", trans)\n      .then(() => {});\n  const registerEagerResolvePath = (transitionService) =>\n    transitionService.onStart({}, eagerResolvePath, {\n      priority: RESOLVE_HOOK_PRIORITY,\n    });\n  /**\n   * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n   *\n   * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState, { priority: 1000 });`\n   *\n   * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n   *\n   * See [[StateDeclaration.resolve]]\n   */\n  const lazyResolveState = (trans, state) =>\n    new ResolveContext(trans.treeChanges().to)\n      .subContext(state.$$state())\n      .resolvePath(\"LAZY\", trans)\n      .then(() => {});\n  const registerLazyResolveState = (transitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, {\n      priority: RESOLVE_HOOK_PRIORITY,\n    });\n  /**\n   * A [[TransitionHookFn]] which resolves any dynamically added (LAZY or EAGER) Resolvables.\n   *\n   * Registered using `transitionService.onFinish({}, eagerResolvePath, { priority: 1000 });`\n   *\n   * After all entering states have been entered, this hook resolves any remaining Resolvables.\n   * These are typically dynamic resolves which were added by some Transition Hook using [[Transition.addResolvable]].\n   *\n   * See [[StateDeclaration.resolve]]\n   */\n  const resolveRemaining = (trans) =>\n    new ResolveContext(trans.treeChanges().to)\n      .resolvePath(\"LAZY\", trans)\n      .then(() => {});\n  const registerResolveRemaining = (transitionService) =>\n    transitionService.onFinish({}, resolveRemaining, {\n      priority: RESOLVE_HOOK_PRIORITY,\n    });\n\n  /**\n   * A [[TransitionHookFn]] which waits for the views to load\n   *\n   * Registered using `transitionService.onStart({}, loadEnteringViews);`\n   *\n   * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n   * In angular 1, this includes loading the templates.\n   */\n  const loadEnteringViews = (transition) => {\n    const enteringViews = transition.views(\"entering\");\n    if (!enteringViews.length) return;\n    return Promise.all(\n      enteringViews.map((view) => Promise.resolve(view.load())),\n    ).then(() => {});\n  };\n  const registerLoadEnteringViews = (transitionService) =>\n    transitionService.onFinish({}, loadEnteringViews);\n\n  const registerActivateViews = (transitionService, viewService) => {\n    /**\n     * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n     *\n     * Registered using `transitionService.onSuccess({}, activateViews);`\n     *\n     * After a transition is complete, this hook deactivates the old views from the previous state,\n     * and activates the new views from the destination state.\n     *\n     * See [[ViewService]]\n     */\n    const activateViews = (transition) => {\n      const enteringViews = transition.views(\"entering\");\n      const exitingViews = transition.views(\"exiting\");\n      if (!enteringViews.length && !exitingViews.length) return;\n      exitingViews.forEach((vc) => viewService.deactivateViewConfig(vc));\n      enteringViews.forEach((vc) => {\n        viewService.activateViewConfig(vc);\n      });\n      viewService.sync();\n    };\n    transitionService.onSuccess({}, activateViews);\n  };\n\n  /**\n   * A [[TransitionHookFn]] which updates global ng-router state\n   *\n   * Registered using `transitionService.onBefore({}, updateGlobalState);`\n   *\n   * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n   * After a successful [[Transition]], updates the global values of \"the current state\"\n   * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n   *\n   * See also the deprecated properties:\n   * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n   *\n   * @param {import('../transition/transition.js').Transition} trans\n   */\n  const updateGlobalState = (trans) => {\n    const globals = trans.globals;\n    const transitionSuccessful = () => {\n      globals.successfulTransitions.enqueue(trans);\n      globals.$current = trans.$to();\n      globals.current = globals.$current.self;\n      copy(trans.params(), globals.params);\n    };\n    const clearCurrentTransition = () => {\n      // Do not clear globals.transition if a different transition has started in the meantime\n      if (globals.transition === trans) globals.transition = null;\n    };\n    trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n    trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n  };\n\n  const registerUpdateGlobalState = (transitionService) =>\n    transitionService.onCreate({}, updateGlobalState);\n\n  /**\n   * A [[TransitionHookFn]] that performs lazy loading\n   *\n   * When entering a state \"abc\" which has a `lazyLoad` function defined:\n   * - Invoke the `lazyLoad` function (unless it is already in process)\n   *   - Flag the hook function as \"in process\"\n   *   - The function should return a promise (that resolves when lazy loading is complete)\n   * - Wait for the promise to settle\n   *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n   *   - Flag the hook function as \"not in process\"\n   * - If the hook was successful\n   *   - Remove the `lazyLoad` function from the state declaration\n   * - If all the hooks were successful\n   *   - Retry the transition (by returning a TargetState)\n   *\n   * ```\n   * .state('abc', {\n   *   component: 'fooComponent',\n   *   lazyLoad: () => import('./fooComponent')\n   *   });\n   * ```\n   *\n   * See [[StateDeclaration.lazyLoad]]\n   */\n  function registerLazyLoadHook(\n    transitionService,\n    stateService,\n    urlService,\n    stateRegistry,\n  ) {\n    return transitionService.onBefore(\n      { entering: (state) => !!state.lazyLoad },\n      (transition) => {\n        function retryTransition() {\n          if (transition.originalTransition().options().source !== \"url\") {\n            // The original transition was not triggered via url sync\n            // The lazy state should be loaded now, so re-try the original transition\n            const orig = transition.targetState();\n            return stateService.target(\n              orig.identifier(),\n              orig.params(),\n              orig.options(),\n            );\n          }\n          // The original transition was triggered via url sync\n          // Run the URL rules and find the best match\n          const result = urlService.match(urlService.parts());\n          const rule = result && result.rule;\n          // If the best match is a state, redirect the transition (instead\n          // of calling sync() which supersedes the current transition)\n          if (rule && rule.type === \"STATE\") {\n            const state = rule.state;\n            const params = result.match;\n            return stateService.target(state, params, transition.options());\n          }\n          // No matching state found, so let .sync() choose the best non-state match/otherwise\n          urlService.sync();\n        }\n        const promises = transition\n          .entering()\n          .filter((state) => !!state.$$state().lazyLoad)\n          .map((state) => lazyLoadState(transition, state, stateRegistry));\n        return Promise.all(promises).then(retryTransition);\n      },\n    );\n  }\n\n  /**\n   * Invokes a state's lazy load function\n   *\n   * @param transition a Transition context\n   * @param state the state to lazy load\n   * @returns A promise for the lazy load result\n   */\n  function lazyLoadState(transition, state, stateRegistry) {\n    const lazyLoadFn = state.$$state().lazyLoad;\n    // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n    let promise = lazyLoadFn[\"_promise\"];\n    if (!promise) {\n      const success = (result) => {\n        delete state.lazyLoad;\n        delete state.$$state().lazyLoad;\n        delete lazyLoadFn[\"_promise\"];\n        return result;\n      };\n      const error = (err) => {\n        delete lazyLoadFn[\"_promise\"];\n        return Promise.reject(err);\n      };\n      promise = lazyLoadFn[\"_promise\"] = Promise.resolve(\n        lazyLoadFn(transition, state),\n      )\n        .then(updateStateRegistry)\n        .then(success, error);\n    }\n    /** Register any lazy loaded state definitions */\n    function updateStateRegistry(result) {\n      if (result && Array.isArray(result.states)) {\n        result.states.forEach((_state) => stateRegistry.register(_state));\n      }\n      return result;\n    }\n    return promise;\n  }\n\n  /**\n   * This class defines a type of hook, such as `onBefore` or `onEnter`.\n   * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n   */\n  class TransitionEventType {\n    constructor(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort = false,\n      getResultHandler = TransitionHook.HANDLE_RESULT,\n      getErrorHandler = TransitionHook.REJECT_ERROR,\n      synchronous = false,\n    ) {\n      this.name = name;\n      this.hookPhase = hookPhase;\n      this.hookOrder = hookOrder;\n      this.criteriaMatchPath = criteriaMatchPath;\n      this.reverseSort = reverseSort;\n      this.getResultHandler = getResultHandler;\n      this.getErrorHandler = getErrorHandler;\n      this.synchronous = synchronous;\n    }\n  }\n\n  /**\n   * A [[TransitionHookFn]] that skips a transition if it should be ignored\n   *\n   * This hook is invoked at the end of the onBefore phase.\n   *\n   * If the transition should be ignored (because no parameter or states changed)\n   * then the transition is ignored and not processed.\n   */\n  function ignoredHook(trans) {\n    const ignoredReason = trans._ignoredReason();\n    if (!ignoredReason) return;\n    trace.traceTransitionIgnored(trans);\n    const pending = trans.globals.transition;\n    // The user clicked a link going back to the *current state* ('A')\n    // However, there is also a pending transition in flight (to 'B')\n    // Abort the transition to 'B' because the user now wants to be back at 'A'.\n    if (ignoredReason === \"SameAsCurrent\" && pending) {\n      pending.abort();\n    }\n    return Rejection.ignored().toPromise();\n  }\n  const registerIgnoredTransitionHook = (transitionService) =>\n    transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n\n  /**\n   * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n   *\n   * This hook is invoked at the end of the onBefore phase.\n   * If the transition is invalid (for example, param values do not validate)\n   * then the transition is rejected.\n   */\n  function invalidTransitionHook(trans) {\n    if (!trans.valid()) {\n      throw new Error(trans.error().toString());\n    }\n  }\n  const registerInvalidTransitionHook = (transitionService) =>\n    transitionService.onBefore({}, invalidTransitionHook, { priority: -1e4 });\n\n  const registerRedirectToHook = (transitionService, stateService) => {\n    /**\n     * A [[TransitionHookFn]] that redirects to a different state or params\n     *\n     * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n     *\n     * See [[StateDeclaration.redirectTo]]\n     */\n    const redirectToHook = (trans) => {\n      const redirect = trans.to().redirectTo;\n      if (!redirect) return;\n      const $state = stateService;\n      function handleResult(result) {\n        if (!result) return;\n        if (result instanceof TargetState) return result;\n        if (isString(result))\n          return $state.target(result, trans.params(), trans.options());\n        if (result[\"state\"] || result[\"params\"])\n          return $state.target(\n            result[\"state\"] || trans.to(),\n            result[\"params\"] || trans.params(),\n            trans.options(),\n          );\n      }\n      if (isFunction(redirect)) {\n        return Promise.resolve(redirect(trans)).then(handleResult);\n      }\n      return handleResult(redirect);\n    };\n\n    transitionService.onStart(\n      { to: (state) => !!state.redirectTo },\n      redirectToHook,\n    );\n  };\n\n  const registerUpdateUrl = (\n    transitionService,\n    stateService,\n    urlService,\n  ) => {\n    /**\n     * A [[TransitionHookFn]] which updates the URL after a successful transition\n     *\n     * Registered using `transitionService.onSuccess({}, updateUrl);`\n     */\n    const updateUrl = (transition) => {\n      const options = transition.options();\n      const $state = stateService;\n\n      // Dont update the url in these situations:\n      // The transition was triggered by a URL sync (options.source === 'url')\n      // The user doesn't want the url to update (options.location === false)\n      // The destination state, and all parents have no navigable url\n      if (\n        options.source !== \"url\" &&\n        options.location &&\n        $state.$current.navigable\n      ) {\n        const urlOptions = { replace: options.location === \"replace\" };\n        urlService.push(\n          $state.$current.navigable.url,\n          $state.globals.params,\n          urlOptions,\n        );\n      }\n      urlService.update(true);\n    };\n    transitionService.onSuccess({}, updateUrl, { priority: 9999 });\n  };\n\n  /**\n   * The default [[Transition]] options.\n   *\n   * Include this object when applying custom defaults:\n   * let reloadOpts = { reload: true, notify: true }\n   * let options = defaults(theirOpts, customDefaults, defaultOptions);\n   */\n  let defaultTransOpts = {\n    location: true,\n    relative: null,\n    inherit: false,\n    notify: true,\n    reload: false,\n    supercede: true,\n    custom: {},\n    current: () => null,\n    source: \"unknown\",\n  };\n  /**\n   * This class provides services related to Transitions.\n   *\n   * - Most importantly, it allows global Transition Hooks to be registered.\n   * - It allows the default transition error handler to be set.\n   * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n   *\n   * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n   *\n   * This API is located at `router.transitionService` ([[UIRouter.transitionService]])\n   */\n  class TransitionProvider {\n    /* @ignore */ static $inject = provider([$injectTokens.$router, $injectTokens.$view]);\n\n    /**\n     * @param {import('../router.js').Router} globals\n     * @param viewService\n     */\n    constructor(globals, viewService) {\n      this._transitionCount = 0;\n      /** The transition hook types, such as `onEnter`, `onStart`, etc */\n      this._eventTypes = [];\n      /** @internal The registered transition hooks */\n      this._registeredHooks = {};\n      /** The  paths on a criteria object */\n      this._criteriaPaths = {};\n      this.globals = globals;\n      this.$view = viewService;\n      this._deregisterHookFns = {};\n      this._pluginapi = createProxyFunctions(val(this), {}, val(this), [\n        \"_definePathType\",\n        \"_defineEvent\",\n        \"_getPathTypes\",\n        \"_getEvents\",\n        \"getHooks\",\n      ]);\n      this._defineCorePaths();\n      this._defineCoreEvents();\n      this._registerCoreTransitionHooks();\n      globals.successfulTransitions.onEvict(treeChangesCleanup);\n    }\n\n    $get = [\n      $injectTokens.$state,\n      $injectTokens.$url,\n      $injectTokens.$stateRegistry,\n      $injectTokens.$view,\n      (stateService, urlService, stateRegistry, viewService) => {\n        // Lazy load state trees\n        this._deregisterHookFns.lazyLoad = registerLazyLoadHook(\n          this,\n          stateService,\n          urlService,\n          stateRegistry,\n        );\n\n        // After globals.current is updated at priority: 10000\n        this._deregisterHookFns.updateUrl = registerUpdateUrl(\n          this,\n          stateService,\n          urlService,\n        );\n\n        // Wire up redirectTo hook\n        this._deregisterHookFns.redirectTo = registerRedirectToHook(\n          this,\n          stateService,\n        );\n\n        this._deregisterHookFns.activateViews = registerActivateViews(\n          this,\n          viewService,\n        );\n        return this;\n      },\n    ];\n    /**\n     * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n     *\n     * Registers a transition lifecycle hook, which is invoked during transition construction.\n     *\n     * This low level hook should only be used by plugins.\n     * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n     * The Sticky States plugin uses this hook to modify the treechanges.\n     *\n     * ### Lifecycle\n     *\n     * `onCreate` hooks are invoked *while a transition is being constructed*.\n     *\n     * ### Return value\n     *\n     * The hook's return value is ignored\n     *\n     * @internal\n     * @param criteria defines which Transitions the Hook should be invoked for.\n     * @param callback the hook function which will be invoked.\n     * @param options the registration options\n     * @returns a function which deregisters the hook.\n     */\n\n    /**\n     * Creates a new [[Transition]] object\n     *\n     * This is a factory function for creating new Transition objects.\n     * It is used internally by the [[StateService]] and should generally not be called by application code.\n     *\n     * @internal\n     * @param fromPath the path to the current state (the from state)\n     * @param targetState the target state (destination)\n     * @returns a Transition\n     */\n    create(fromPath, targetState) {\n      return new Transition(fromPath, targetState, this, this.globals);\n    }\n\n    _defineCoreEvents() {\n      const Phase = TransitionHookPhase;\n      const TH = TransitionHook;\n      const paths = this._criteriaPaths;\n      const NORMAL_SORT = false,\n        REVERSE_SORT = true;\n      const SYNCHRONOUS = true;\n      this._defineEvent(\n        \"onCreate\",\n        Phase.CREATE,\n        0,\n        paths.to,\n        NORMAL_SORT,\n        TH.LOG_REJECTED_RESULT,\n        TH.THROW_ERROR,\n        SYNCHRONOUS,\n      );\n      this._defineEvent(\"onBefore\", Phase.BEFORE, 0, paths.to);\n      this._defineEvent(\"onStart\", Phase.RUN, 0, paths.to);\n      this._defineEvent(\"onExit\", Phase.RUN, 100, paths.exiting, REVERSE_SORT);\n      this._defineEvent(\"onRetain\", Phase.RUN, 200, paths.retained);\n      this._defineEvent(\"onEnter\", Phase.RUN, 300, paths.entering);\n      this._defineEvent(\"onFinish\", Phase.RUN, 400, paths.to);\n      this._defineEvent(\n        \"onSuccess\",\n        Phase.SUCCESS,\n        0,\n        paths.to,\n        NORMAL_SORT,\n        TH.LOG_REJECTED_RESULT,\n        TH.LOG_ERROR,\n        SYNCHRONOUS,\n      );\n      this._defineEvent(\n        \"onError\",\n        Phase.ERROR,\n        0,\n        paths.to,\n        NORMAL_SORT,\n        TH.LOG_REJECTED_RESULT,\n        TH.LOG_ERROR,\n        SYNCHRONOUS,\n      );\n    }\n\n    _defineCorePaths() {\n      const { STATE, TRANSITION } = TransitionHookScope;\n      this._definePathType(\"to\", TRANSITION);\n      this._definePathType(\"from\", TRANSITION);\n      this._definePathType(\"exiting\", STATE);\n      this._definePathType(\"retained\", STATE);\n      this._definePathType(\"entering\", STATE);\n    }\n\n    _defineEvent(\n      name,\n      hookPhase,\n      hookOrder,\n      criteriaMatchPath,\n      reverseSort = false,\n      getResultHandler = TransitionHook.HANDLE_RESULT,\n      getErrorHandler = TransitionHook.REJECT_ERROR,\n      synchronous = false,\n    ) {\n      const eventType = new TransitionEventType(\n        name,\n        hookPhase,\n        hookOrder,\n        criteriaMatchPath,\n        reverseSort,\n        getResultHandler,\n        getErrorHandler,\n        synchronous,\n      );\n      this._eventTypes.push(eventType);\n      makeEvent(this, this, eventType);\n    }\n\n    _getEvents(phase) {\n      const transitionHookTypes = isDefined(phase)\n        ? this._eventTypes.filter((type) => type.hookPhase === phase)\n        : this._eventTypes.slice();\n      return transitionHookTypes.sort((l, r) => {\n        const cmpByPhase = l.hookPhase - r.hookPhase;\n        return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n      });\n    }\n    /**\n     * Adds a Path to be used as a criterion against a TreeChanges path\n     *\n     * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n     * Each state in the exiting path is checked against the criteria and returned as part of the match.\n     *\n     * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n     * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n     * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n     *\n     * @internal\n     */\n    _definePathType(name, hookScope) {\n      this._criteriaPaths[name] = { name, scope: hookScope };\n    }\n\n    _getPathTypes() {\n      return this._criteriaPaths;\n    }\n\n    getHooks(hookName) {\n      return this._registeredHooks[hookName];\n    }\n\n    _registerCoreTransitionHooks() {\n      const fns = this._deregisterHookFns;\n      fns.addCoreResolves = registerAddCoreResolvables(this);\n      fns.ignored = registerIgnoredTransitionHook(this);\n      fns.invalid = registerInvalidTransitionHook(this);\n\n      // Wire up onExit/Retain/Enter state hooks\n      fns.onExit = registerOnExitHook(this);\n      fns.onRetain = registerOnRetainHook(this);\n      fns.onEnter = registerOnEnterHook(this);\n      // Wire up Resolve hooks\n      fns.eagerResolve = registerEagerResolvePath(this);\n      fns.lazyResolve = registerLazyResolveState(this);\n      fns.resolveAll = registerResolveRemaining(this);\n      // Wire up the View management hooks\n      fns.loadViews = registerLoadEnteringViews(this);\n\n      // Updates global state after a transition\n      fns.updateGlobals = registerUpdateGlobalState(this);\n      // Lazy load state trees\n      fns.lazyLoad = registerLazyLoadHook(this);\n    }\n  }\n\n  const err = minErr(\"$stateProvider\");\n\n  /**\n   * Provides services related to ng-router states.\n   *\n   * This API is located at `router.stateService` ([[UIRouter.stateService]])\n   */\n  class StateProvider {\n    /**\n     * The latest successful state parameters\n     *\n     * @deprecated This is a passthrough through to [[Router.params]]\n     */\n    get params() {\n      return this.globals.params;\n    }\n    /**\n     * The current [[StateDeclaration]]\n     *\n     * @deprecated This is a passthrough through to [[Router.current]]\n     */\n    get current() {\n      return this.globals.current;\n    }\n    /**\n     * The current [[StateObject]] (an internal API)\n     *\n     * @deprecated This is a passthrough through to [[Router.$current]]\n     */\n    get $current() {\n      return this.globals.$current;\n    }\n\n    static $inject = [\"$routerProvider\", \"$transitionsProvider\"];\n\n    /**\n     *\n     * @param {import('../router.js').Router} globals\n     * @param {*} transitionService\n     * @param {import('../../core/di/internal-injector.js').InjectorService} $injector\n     */\n    constructor(globals, transitionService, $injector) {\n      this.stateRegistry = undefined;\n      this.urlService = undefined;\n      this.globals = globals;\n      this.transitionService = transitionService;\n      this.$injector = $injector;\n      this.invalidCallbacks = [];\n\n      this._defaultErrorHandler = function $defaultErrorHandler($error$) {\n        if ($error$ instanceof Error && $error$.stack) {\n          throw $error$;\n        } else if ($error$ instanceof Rejection) {\n          throw new Error($error$.toString());\n        } else {\n          throw new Error($error$);\n        }\n      };\n      const getters = [\"current\", \"$current\", \"params\", \"transition\"];\n      const boundFns = Object.keys(StateProvider.prototype).filter(\n        (x) => !getters.includes(x),\n      );\n      createProxyFunctions(\n        val(StateProvider.prototype),\n        this,\n        val(this),\n        boundFns,\n      );\n\n      EventBus.subscribe(\"$stateService:defaultErrorHandler\", (err) =>\n        this.defaultErrorHandler()(err),\n      );\n    }\n\n    $get = () => this;\n\n    /**\n     * Decorates states when they are registered\n     *\n     * Allows you to extend (carefully) or override (at your own peril) the\n     * `stateBuilder` object used internally by [[StateRegistry]].\n     * This can be used to add custom functionality to ng-router,\n     * for example inferring templateUrl based on the state name.\n     *\n     * When passing only a name, it returns the current (original or decorated) builder\n     * function that matches `name`.\n     *\n     * The builder functions that can be decorated are listed below. Though not all\n     * necessarily have a good use case for decoration, that is up to you to decide.\n     *\n     * In addition, users can attach custom decorators, which will generate new\n     * properties within the state's internal definition. There is currently no clear\n     * use-case for this beyond accessing internal states (i.e. $state.$current),\n     * however, expect this to become increasingly relevant as we introduce additional\n     * meta-programming features.\n     *\n     * **Warning**: Decorators should not be interdependent because the order of\n     * execution of the builder functions in non-deterministic. Builder functions\n     * should only be dependent on the state definition object and super function.\n     *\n     *\n     * Existing builder functions and current return values:\n     *\n     * - **parent** `{object}` - returns the parent state object.\n     * - **data** `{object}` - returns state data, including any inherited data that is not\n     *   overridden by own values (if any).\n     * - **url** `{object}` - returns a {@link ui.router.util.type:UrlMatcher UrlMatcher}\n     *   or `null`.\n     * - **navigable** `{object}` - returns closest ancestor state that has a URL (aka is\n     *   navigable).\n     * - **params** `{object}` - returns an array of state params that are ensured to\n     *   be a super-set of parent's params.\n     * - **views** `{object}` - returns a views object where each key is an absolute view\n     *   name (i.e. \"viewName@stateName\") and each value is the urlConfig object\n     *   (template, controller) for the view. Even when you don't use the views object\n     *   explicitly on a state urlConfig, one is still created for you internally.\n     *   So by decorating this builder function you have access to decorating template\n     *   and controller properties.\n     * - **ownParams** `{object}` - returns an array of params that belong to the state,\n     *   not including any params defined by ancestor states.\n     * - **path** `{string}` - returns the full path from the root down to this state.\n     *   Needed for state activation.\n     * - **includes** `{object}` - returns an object that includes every state that\n     *   would pass a `$state.includes()` test.\n     *\n     * #### Example:\n     * Override the internal 'views' builder with a function that takes the state\n     * definition, and a reference to the internal function being overridden:\n     * ```js\n     * $stateProvider.decorator('views', function (state, parent) {\n     *   let result = {},\n     *       views = parent(state);\n     *\n     *   angular.forEach(views, function (urlConfig, name) {\n     *     let autoName = (state.name + '.' + name).replace('.', '/');\n     *     urlConfig.templateUrl = urlConfig.templateUrl || '/partials/' + autoName + '.html';\n     *     result[name] = urlConfig;\n     *   });\n     *   return result;\n     * });\n     *\n     * $stateProvider.state('home', {\n     *   views: {\n     *     'contact.list': { controller: 'ListController' },\n     *     'contact.item': { controller: 'ItemController' }\n     *   }\n     * });\n     * ```\n     *\n     *\n     * ```js\n     * // Auto-populates list and item views with /partials/home/contact/list.html,\n     * // and /partials/home/contact/item.html, respectively.\n     * $state.go('home');\n     * ```\n     *\n     * @param {string} name The name of the builder function to decorate.\n     * @param {object} func A function that is responsible for decorating the original\n     * builder function. The function receives two parameters:\n     *\n     *   - `{object}` - state - The state urlConfig object.\n     *   - `{object}` - super - The original builder function.\n     *\n     * @return {object} $stateProvider - $stateProvider instance\n     */\n    decorator(name, func) {\n      return this.stateRegistry.decorator(name, func) || this;\n    }\n\n    /**\n     *\n     * @param {import(\"./interface.js\").StateDeclaration} definition\n     */\n    state(definition) {\n      if (!definition.name) {\n        throw err(\"stateinvalid\", `'name' required`);\n      }\n      try {\n        this.stateRegistry.register(definition);\n      } catch (e) {\n        throw err(\"stateinvalid\", e.message);\n      }\n      return this;\n    }\n\n    /**\n     * Handler for when [[transitionTo]] is called with an invalid state.\n     *\n     * Invokes the [[onInvalid]] callbacks, in natural order.\n     * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n     * The results of the callbacks are wrapped in Promise.resolve(), so the callbacks may return promises.\n     *\n     * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n     *\n     * @internal\n     */\n    _handleInvalidTargetState(fromPath, toState) {\n      const fromState = makeTargetState(this.stateRegistry, fromPath);\n      const globals = this.globals;\n      const latestThing = () => globals.transitionHistory.peekTail();\n      const latest = latestThing();\n      /** @type {Queue<Function>} */\n      const callbackQueue = new Queue(this.invalidCallbacks.slice());\n      const injector = this.$injector;\n      const checkForRedirect = (result) => {\n        if (!(result instanceof TargetState)) {\n          return;\n        }\n        let target = result;\n        // Recreate the TargetState, in case the state is now defined.\n        target = this.target(\n          target.identifier(),\n          target.params(),\n          target.options(),\n        );\n        if (!target.valid()) {\n          return Rejection.invalid(target.error()).toPromise();\n        }\n        if (latestThing() !== latest) {\n          return Rejection.superseded().toPromise();\n        }\n        return this.transitionTo(\n          target.identifier(),\n          target.params(),\n          target.options(),\n        );\n      };\n      function invokeNextCallback() {\n        const nextCallback = callbackQueue.dequeue();\n        if (nextCallback === undefined)\n          return Rejection.invalid(toState.error()).toPromise();\n        const callbackResult = Promise.resolve(\n          nextCallback(toState, fromState, injector),\n        );\n        return callbackResult\n          .then(checkForRedirect)\n          .then((result) => result || invokeNextCallback());\n      }\n      return invokeNextCallback();\n    }\n    /**\n     * Registers an Invalid State handler\n     *\n     * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n     * has been called with an invalid state reference parameter\n     *\n     * Example:\n     * ```js\n     * stateService.onInvalid(function(to, from, injector) {\n     *   if (to.name() === 'foo') {\n     *     let lazyLoader = injector.get('LazyLoadService');\n     *     return lazyLoader.load('foo')\n     *         .then(() => stateService.target('foo'));\n     *   }\n     * });\n     * ```\n     *\n     * @param {function} callback invoked when the toState is invalid\n     *   This function receives the (invalid) toState, the fromState, and an injector.\n     *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n     *   If one is returned, it is treated as a redirect.\n     *\n     * @returns a function which deregisters the callback\n     */\n    onInvalid(callback) {\n      this.invalidCallbacks.push(callback);\n      return function deregisterListener() {\n        removeFrom(this.invalidCallbacks)(callback);\n      }.bind(this);\n    }\n    /**\n     * Reloads the current state\n     *\n     * A method that force reloads the current state, or a partial state hierarchy.\n     * All resolves are re-resolved, and components reinstantiated.\n     *\n     * #### Example:\n     * ```js\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     $state.reload();\n     *   }\n     * });\n     * ```\n     *\n     * Note: `reload()` is just an alias for:\n     *\n     * ```js\n     * $state.transitionTo($state.current, $state.params, {\n     *   reload: true, inherit: false\n     * });\n     * ```\n     *\n     * @param reloadState A state name or a state object.\n     *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n     *\n     * #### Example:\n     * ```js\n     * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n     * //and current state is 'contacts.detail.item'\n     * let app angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.reload = function(){\n     *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n     *     $state.reload('contact.detail');\n     *   }\n     * });\n     * ```\n     *\n     * @returns A promise representing the state of the new transition. See [[StateService.go]]\n     */\n    reload(reloadState) {\n      return this.transitionTo(this.globals.current, this.globals.params, {\n        reload: isDefined(reloadState) ? reloadState : true,\n        inherit: false,\n        notify: false,\n      });\n    }\n    /**\n     * Transition to a different state and/or parameters\n     *\n     * Convenience method for transitioning to a new state.\n     *\n     * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n     * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n     * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n     * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n     * inherit from the current parameter values (because of `inherit: true`).\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.go('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to Absolute state name, state object, or relative state path (relative to current state).\n     *\n     * Some examples:\n     *\n     * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n     * - `$state.go('^')` - will go to the parent state\n     * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n     * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n     *\n     * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n     *\n     *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n     *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n     *\n     * @param options Transition options\n     *\n     * @returns {promise} A promise representing the state of the new transition.\n     */\n    go(to, params, options) {\n      const defautGoOpts = { relative: this.$current, inherit: true };\n      const transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n      return this.transitionTo(to, params, transOpts);\n    }\n    /**\n     * Creates a [[TargetState]]\n     *\n     * This is a factory method for creating a TargetState\n     *\n     * This may be returned from a Transition Hook to redirect a transition, for example.\n     */\n    target(identifier, params, options = {}) {\n      // If we're reloading, find the state object to reload from\n      if (isObject(options.reload) && !options.reload.name)\n        throw new Error(\"Invalid reload state object\");\n      const reg = this.stateRegistry;\n      options.reloadState =\n        options.reload === true\n          ? reg.root()\n          : reg.matcher.find(options.reload, options.relative);\n      if (options.reload && !options.reloadState)\n        throw new Error(\n          `No such reload state '${isString(options.reload) ? options.reload : options.reload.name}'`,\n        );\n      return new TargetState(this.stateRegistry, identifier, params, options);\n    }\n\n    getCurrentPath() {\n      const globals = this.globals;\n      const latestSuccess = globals.successfulTransitions.peekTail();\n      const rootPath = () => [new PathNode(this.stateRegistry.root())];\n      return latestSuccess ? latestSuccess._treeChanges.to : rootPath();\n    }\n    /**\n     * Low-level method for transitioning to a new state.\n     *\n     * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n     *\n     * #### Example:\n     * ```js\n     * let app = angular.module('app', ['ui.router']);\n     *\n     * app.controller('ctrl', function ($scope, $state) {\n     *   $scope.changeState = function () {\n     *     $state.transitionTo('contact.detail');\n     *   };\n     * });\n     * ```\n     *\n     * @param to State name or state object.\n     * @param toParams A map of the parameters that will be sent to the state,\n     *      will populate $stateParams.\n     * @param options Transition options\n     *\n     * @returns A promise representing the state of the new transition. See [[go]]\n     */\n    transitionTo(to, toParams = {}, options = {}) {\n      options = defaults(options, defaultTransOpts);\n      const getCurrent = () => this.globals.transition;\n      options = Object.assign(options, { current: getCurrent });\n      const ref = this.target(to, toParams, options);\n      const currentPath = this.getCurrentPath();\n      if (!ref.exists()) return this._handleInvalidTargetState(currentPath, ref);\n      if (!ref.valid()) return silentRejection(ref.error());\n      if (options.supercede === false && getCurrent()) {\n        return Rejection.ignored(\n          \"Another transition is in progress and supercede has been set to false in TransitionOptions for the transition. So the transition was ignored in favour of the existing one in progress.\",\n        ).toPromise();\n      }\n      /**\n       * Special handling for Ignored, Aborted, and Redirected transitions\n       *\n       * The semantics for the transition.run() promise and the StateService.transitionTo()\n       * promise differ. For instance, the run() promise may be rejected because it was\n       * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n       * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n       * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n       */\n      const rejectedTransitionHandler = (trans) => (error) => {\n        if (error instanceof Rejection) {\n          const isLatest = this.globals.lastStartedTransitionId <= trans.$id;\n          if (error.type === RejectType.IGNORED) {\n            isLatest && this.urlService.update();\n            // Consider ignored `Transition.run()` as a successful `transitionTo`\n            return Promise.resolve(this.globals.current);\n          }\n          const detail = error.detail;\n          if (\n            error.type === RejectType.SUPERSEDED &&\n            error.redirected &&\n            detail instanceof TargetState\n          ) {\n            // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n            // by returning the promise for the new (redirect) `Transition.run()`.\n            const redirect = trans.redirect(detail);\n            return redirect.run().catch(rejectedTransitionHandler(redirect));\n          }\n          if (error.type === RejectType.ABORTED) {\n            isLatest && this.urlService.update();\n            return Promise.reject(error);\n          }\n        }\n        const errorHandler = this.defaultErrorHandler();\n        errorHandler(error);\n        return Promise.reject(error);\n      };\n      const transition = this.transitionService.create(currentPath, ref);\n      const transitionToPromise = transition\n        .run()\n        .catch(rejectedTransitionHandler(transition));\n      silenceUncaughtInPromise(transitionToPromise); // issue #2676\n      // Return a promise for the transition, which also has the transition object on it.\n      return Object.assign(transitionToPromise, { transition });\n    }\n    /**\n     * Checks if the current state *is* the provided state\n     *\n     * Similar to [[includes]] but only checks for the full state name.\n     * If params is supplied then it will be tested for strict equality against the current\n     * active params object, so all params must match with none missing and no extras.\n     *\n     * #### Example:\n     * ```js\n     * $state.$current.name = 'contacts.details.item';\n     *\n     * // absolute name\n     * $state.is('contact.details.item'); // returns true\n     * $state.is(contactDetailItemStateObject); // returns true\n     * ```\n     *\n     * // relative name (. and ^), typically from a template\n     * // E.g. from the 'contacts.details' template\n     * ```html\n     * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n     * ```\n     *\n     * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n     * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n     * to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns Returns true if it is the state.\n     */\n    is(stateOrName, params, options) {\n      options = defaults(options, { relative: this.$current });\n      const state = this.stateRegistry.matcher.find(\n        stateOrName,\n        options.relative,\n      );\n      if (!isDefined(state)) return undefined;\n      if (this.$current !== state) return false;\n      if (!params) return true;\n      const schema = state.parameters({ inherit: true, matchingKeys: params });\n      return Param.equals(\n        schema,\n        Param.values(schema, params),\n        this.globals.params,\n      );\n    }\n    /**\n     * Checks if the current state *includes* the provided state\n     *\n     * A method to determine if the current active state is equal to or is the child of the\n     * state stateName. If any params are passed then they will be tested for a match as well.\n     * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n     *\n     * #### Example when `$state.$current.name === 'contacts.details.item'`\n     * ```js\n     * // Using partial names\n     * $state.includes(\"contacts\"); // returns true\n     * $state.includes(\"contacts.details\"); // returns true\n     * $state.includes(\"contacts.details.item\"); // returns true\n     * $state.includes(\"contacts.list\"); // returns false\n     * $state.includes(\"about\"); // returns false\n     * ```\n     *\n     * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n     * ```js\n     * $state.includes(\"*.details.*.*\"); // returns true\n     * $state.includes(\"*.details.**\"); // returns true\n     * $state.includes(\"**.item.**\"); // returns true\n     * $state.includes(\"*.details.item.url\"); // returns true\n     * $state.includes(\"*.details.*.url\"); // returns true\n     * $state.includes(\"*.details.*\"); // returns false\n     * $state.includes(\"item.**\"); // returns false\n     * ```\n     *\n     * @param stateOrName A partial name, relative name, glob pattern,\n     *   or state object to be searched for within the current state name.\n     * @param params A param object, e.g. `{sectionId: section.id}`,\n     *   that you'd like to test against the current active state.\n     * @param options An options object. The options are:\n     *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n     *     test relative to `options.relative` state (or name).\n     *\n     * @returns {boolean} Returns true if it does include the state\n     */\n    includes(stateOrName, params, options) {\n      options = defaults(options, { relative: this.$current });\n      const glob = isString(stateOrName) && Glob.fromString(stateOrName);\n      if (glob) {\n        if (!glob.matches(this.$current.name)) return false;\n        stateOrName = this.$current.name;\n      }\n      const state = this.stateRegistry.matcher.find(\n        stateOrName,\n        options.relative,\n      );\n      const include = this.$current.includes;\n      if (!isDefined(state)) return undefined;\n      if (!isDefined(include[state.name])) return false;\n      if (!params) return true;\n      const schema = state.parameters({ inherit: true, matchingKeys: params });\n      return Param.equals(\n        schema,\n        Param.values(schema, params),\n        this.globals.params,\n      );\n    }\n    /**\n     * Generates a URL for a state and parameters\n     *\n     * Returns the url for the given state populated with the given params.\n     *\n     * #### Example:\n     * ```js\n     * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n     * ```\n     *\n     * @param stateOrName The state name or state object you'd like to generate a url from.\n     * @param params An object of parameter values to fill the state's required parameters.\n     * @param options Options object. The options are:\n     *\n     * @returns {string} compiled state url\n     */\n    href(stateOrName, params, options) {\n      const defaultHrefOpts = {\n        lossy: true,\n        inherit: true,\n        absolute: false,\n        relative: this.$current,\n      };\n      options = defaults(options, defaultHrefOpts);\n      params = params || {};\n      const state = this.stateRegistry.matcher.find(\n        stateOrName,\n        options.relative,\n      );\n      if (!isDefined(state)) return null;\n      if (options.inherit)\n        params = this.globals.params.$inherit(params, this.$current, state);\n      const nav = state && options.lossy ? state.navigable : state;\n      if (!nav || nav.url === undefined || nav.url === null) {\n        return null;\n      }\n      return this.urlService.href(nav.url, params, {\n        absolute: options.absolute,\n      });\n    }\n    /**\n     * Sets or gets the default [[transitionTo]] error handler.\n     *\n     * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n     * This includes errors caused by resolves and transition hooks.\n     *\n     * Note:\n     * This handler does not receive certain Transition rejections.\n     * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n     *\n     * The built-in default error handler logs the error to the console.\n     *\n     * You can provide your own custom handler.\n     *\n     * #### Example:\n     * ```js\n     * stateService.defaultErrorHandler(function() {\n     *   // Do not log transitionTo errors\n     * });\n     * ```\n     *\n     * @param handler a global error handler function\n     * @returns the current global error handler\n     */\n    defaultErrorHandler(handler) {\n      return (this._defaultErrorHandler = handler || this._defaultErrorHandler);\n    }\n\n    get(stateOrName, base) {\n      const reg = this.stateRegistry;\n      if (arguments.length === 0) return reg.get();\n      return reg.get(stateOrName, base || this.$current);\n    }\n    /**\n     * Lazy loads a state\n     *\n     * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n     *\n     * @param stateOrName the state that should be lazy loaded\n     * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n     * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n     * This noop transition is not actually run.\n     *\n     * @returns a promise to lazy load\n     */\n    lazyLoad(stateOrName, transition) {\n      const state = this.get(stateOrName);\n      if (!state || !state.lazyLoad)\n        throw new Error(\"Can not lazy load \" + stateOrName);\n      const currentPath = this.getCurrentPath();\n      const target = makeTargetState(this.stateRegistry, currentPath);\n      transition =\n        transition || this.transitionService.create(currentPath, target);\n      return lazyLoadState(transition, state);\n    }\n  }\n\n  class ViewScrollProvider {\n    constructor() {\n      this.enabled = false;\n    }\n\n    useAnchorScroll() {\n      this.enabled = true;\n    }\n\n    $get = [\n      $injectTokens.$anchorScroll,\n      /**\n       * @param {import('../services/anchor-scroll.js').AnchorScrollObject} $anchorScroll\n       * @returns {import('../services/anchor-scroll.js').AnchorScrollObject|Function}\n       */\n      ($anchorScroll) => {\n        if (this.enabled) {\n          return $anchorScroll;\n        }\n        /**\n         * @param {Element} $element\n         * @returns {Promise<number>}\n         */\n        return async function ($element) {\n          return setTimeout(() => {\n            $element.scrollIntoView(false);\n          }, 0);\n        };\n      },\n    ];\n  }\n\n  /**\n   * @typedef BindingTuple\n   * @property {string} name\n   * @property {string} type\n   */\n\n  /**\n   * Service which manages loading of templates from a ViewConfig.\n   */\n  class TemplateFactoryProvider {\n    constructor() {\n      /** @type {boolean} */\n      this._useHttp = false;\n    }\n\n    $get = [\n      $injectTokens.$http,\n      $injectTokens.$templateCache,\n      $injectTokens.$templateRequest,\n      $injectTokens.$injector,\n      /**\n       * @param {import(\"interface.ts\").HttpService} $http\n       * @param {import(\"../services/template-cache/interface.ts\").TemplateCache} $templateCache\n       * @param {any} $templateRequest\n       * @param {import(\"../core/di/internal-injector.js\").InjectorService} $injector\n       * @returns\n       */\n      ($http, $templateCache, $templateRequest, $injector) => {\n        this.$templateRequest = $templateRequest;\n        this.$http = $http;\n        this.$templateCache = $templateCache;\n        this.$injector = $injector;\n        return this;\n      },\n    ];\n\n    /**\n     * Forces the provider to use $http service directly\n     * @param {boolean} value\n     */\n    useHttpService(value) {\n      this._useHttp = value;\n    }\n\n    /**\n     * Creates a template from a configuration object.\n     *\n     * @param config Configuration object for which to load a template.\n     * The following properties are search in the specified order, and the first one\n     * that is defined is used to create the template:\n     *\n     * @param {any} config\n     * @param {any} params  Parameters to pass to the template function.\n     * @param {import(\"./resolve/resolve-context.js\").ResolveContext} context The resolve context associated with the template's view\n     *\n     * @return {string|object}  The template html as a string, or a promise for\n     * that string,or `null` if no template is configured.\n     */\n    fromConfig(config, params, context) {\n      const defaultTemplate = \"<ng-view></ng-view>\";\n      const asTemplate = (result) =>\n        Promise.resolve(result).then((str) => ({ template: str }));\n      const asComponent = (result) =>\n        Promise.resolve(result).then((str) => ({ component: str }));\n\n      const getConfigType = (config) => {\n        if (isDefined(config.template)) return \"template\";\n        if (isDefined(config.templateUrl)) return \"templateUrl\";\n        if (isDefined(config.templateProvider)) return \"templateProvider\";\n        if (isDefined(config.component)) return \"component\";\n        if (isDefined(config.componentProvider)) return \"componentProvider\";\n        return \"default\";\n      };\n\n      switch (getConfigType(config)) {\n        case \"template\":\n          return asTemplate(this.fromString(config.template, params));\n        case \"templateUrl\":\n          return asTemplate(this.fromUrl(config.templateUrl, params));\n        case \"templateProvider\":\n          return asTemplate(\n            this.fromProvider(config.templateProvider, params, context),\n          );\n        case \"component\":\n          return asComponent(config.component);\n        case \"componentProvider\":\n          return asComponent(\n            this.fromComponentProvider(config.componentProvider, context),\n          );\n        default:\n          return asTemplate(defaultTemplate);\n      }\n    }\n    /**\n     * Creates a template from a string or a function returning a string.\n     *\n     * @param {string | Function} template html template as a string or function that returns an html template as a string.\n     * @param {any} [params] Parameters to pass to the template function.\n     *\n     * @return {string|object} The template html as a string, or a promise for that\n     * string.\n     */\n    fromString(template, params) {\n      return isFunction(template)\n        ? /** @type {Function} */ (template)(params)\n        : template;\n    }\n    /**\n     * Loads a template from the a URL via `$http` and `$templateCache`.\n     *\n     * @param {string|Function} url url of the template to load, or a function\n     * that returns a url.\n     * @param {Object} params Parameters to pass to the url function.\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    fromUrl(url, params) {\n      if (isFunction(url)) url = /** @type {Function} */ (url)(params);\n      if (url == null) return null;\n      if (this._useHttp) {\n        return this.$http\n          .get(/** @type {string} */ (url), {\n            cache: this.$templateCache,\n            headers: { Accept: \"text/html\" },\n          })\n          .then(function (response) {\n            return response.data;\n          });\n      }\n      return this.$templateRequest(url);\n    }\n    /**\n     * Creates a template by invoking an injectable provider function.\n     *\n     * @param {import('../interface.ts').Injectable} provider Function to invoke via `locals`\n     * @param {Function} params a function used to invoke the template provider\n     * @param {import(\"./resolve/resolve-context.js\").ResolveContext} context\n     * @return {string|Promise.<string>} The template html as a string, or a promise\n     * for that string.\n     */\n    fromProvider(provider, params, context) {\n      const deps = annotate(provider);\n      const providerFn = Array.isArray(provider) ? tail(provider) : provider;\n      const resolvable = new Resolvable(\"\", providerFn, deps);\n      return resolvable.get(context);\n    }\n    /**\n     * Creates a component's template by invoking an injectable provider function.\n     *\n     * @param {import('../interface.ts').Injectable} provider Function to invoke via `locals`\n     * @return {Promise<any>} The template html as a string: \"<component-name input1='::$resolve.foo'></component-name>\".\n     */\n    fromComponentProvider(provider, context) {\n      const deps = annotate(provider);\n      const providerFn = Array.isArray(provider) ? tail(provider) : provider;\n      const resolvable = new Resolvable(\"\", providerFn, deps);\n      return resolvable.get(context); // https://github.com/angular-ui/ui-router/pull/3165/files\n    }\n    /**\n     * Creates a template from a component's name\n     *\n     * This implements route-to-component.\n     * It works by retrieving the component (directive) metadata from the injector.\n     * It analyses the component's bindings, then constructs a template that instantiates the component.\n     * The template wires input and output bindings to resolves or from the parent component.\n     *\n     * @param {any} ngView {object} The parent ng-view (for binding outputs to callbacks)\n     * @param {import(\"./resolve/resolve-context.js\").ResolveContext} context The ResolveContext (for binding outputs to callbacks returned from resolves)\n     * @param {string} component {string} Component's name in camel case.\n     * @param {any} [bindings] An object defining the component's bindings: {foo: '<'}\n     * @return {string} The template as a string: \"<component-name input1='$resolve.foo'></component-name>\".\n     */\n    makeComponentTemplate(ngView, context, component, bindings) {\n      bindings = bindings || {};\n      // Bind once prefix\n      // Convert to kebob name. Add x- prefix if the string starts with `x-` or `data-`\n      const kebob = (camelCase) => {\n        const kebobed = kebobString(camelCase);\n        return /^(x|data)-/.exec(kebobed) ? `x-${kebobed}` : kebobed;\n      };\n\n      const attributeTpl = /** @param {BindingTuple} input*/ (input) => {\n        const { name, type } = input;\n        const attrName = kebob(name);\n        // If the ng-view has an attribute which matches a binding on the routed component\n        // then pass that attribute through to the routed component template.\n        // Prefer ng-view wired mappings to resolve data, unless the resolve was explicitly bound using `bindings:`\n        if (ngView.getAttribute(attrName) && !bindings[name])\n          return `${attrName}='${ngView.getAttribute(attrName)}'`;\n        const resolveName = bindings[name] || name;\n        // Pre-evaluate the expression for \"@\" bindings by enclosing in {{ }}\n        // some-attr=\"{{$resolve.someResolveName }}\"\n        if (type === \"@\") return `${attrName}='{{s$resolve.${resolveName}}}'`;\n        // Wire \"&\" callbacks to resolves that return a callback function\n        // Get the result of the resolve (should be a function) and annotate it to get its arguments.\n        // some-attr=\"$resolve.someResolveResultName(foo, bar)\"\n        if (type === \"&\") {\n          const res = context.getResolvable(resolveName);\n          const fn = res && res.data;\n          const args = (fn && annotate(fn)) || [];\n          // account for array style injection, i.e., ['foo', function(foo) {}]\n          const arrayIdxStr = Array.isArray(fn) ? `[${fn.length - 1}]` : \"\";\n          return `${attrName}='$resolve.${resolveName}${arrayIdxStr}(${args.join(\",\")})'`;\n        }\n        // some-attr=\"::$resolve.someResolveName\"\n        return `${attrName}='$resolve.${resolveName}'`;\n      };\n      const attrs = getComponentBindings(this.$injector, component)\n        .map(attributeTpl)\n        .join(\" \");\n      const kebobName = kebob(component);\n      return `<${kebobName} ${attrs}></${kebobName}>`;\n    }\n  }\n\n  /**\n   * Gets all the directive(s)' inputs ('@', '=', and '<') and outputs ('&')\n   */\n  function getComponentBindings($injector, name) {\n    const cmpDefs = $injector.get(name + DirectiveSuffix); // could be multiple\n    if (!cmpDefs || !cmpDefs.length)\n      throw new Error(`Unable to find component named '${name}'`);\n    return cmpDefs.map(getBindings).reduce(unnestR, []);\n  }\n  // Given a directive definition, find its object input attributes\n  // Use different properties, depending on the type of directive (component, bindToController, normal)\n  const getBindings = (def) => {\n    if (isObject(def.bindToController))\n      return scopeBindings(def.bindToController);\n    return scopeBindings(def.scope);\n  };\n  // for ng 1.2 style, process the scope: { input: \"=foo\" }\n  // for ng 1.3 through ng 1.5, process the component's bindToController: { input: \"=foo\" } object\n  const scopeBindings = (bindingsObj) =>\n    Object.keys(bindingsObj || {})\n      // [ 'input', [ '=foo', '=', 'foo' ] ]\n      .map((key) => [key, /^([=<@&])[?]?(.*)/.exec(bindingsObj[key])])\n      // skip malformed values\n      .filter((tuple) => isDefined(tuple) && Array.isArray(tuple[1]))\n      // { name: ('foo' || 'input'), type: '=' }\n      .map((tuple) => ({ name: tuple[1][2] || tuple[0], type: tuple[1][1] }));\n\n  function quoteRegExp(str, param) {\n    let surroundPattern = [\"\", \"\"];\n    let result = str.replace(/[\\\\[\\]^$*+?.()|{}]/g, \"\\\\$&\");\n    if (!param) return result;\n    switch (param.squash) {\n      case false:\n        surroundPattern = [\"(\", \")\" + (param.isOptional ? \"?\" : \"\")];\n        break;\n      case true:\n        result = result.replace(/\\/$/, \"\");\n        surroundPattern = [\"(?:/(\", \")|/)?\"];\n        break;\n      default:\n        surroundPattern = [`(${param.squash}|`, \")?\"];\n        break;\n    }\n    return (\n      result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1]\n    );\n  }\n  const memoizeTo = (obj, _prop, fn) => (obj[_prop] = obj[_prop] || fn());\n  const splitOnSlash = splitOnDelim(\"/\");\n  const defaultConfig = {\n    state: { params: {} },\n    strict: true,\n    caseInsensitive: true,\n  };\n  /**\n   * Matches URLs against patterns.\n   *\n   * Matches URLs against patterns and extracts named parameters from the path or the search\n   * part of the URL.\n   *\n   * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n   * parameters. Multiple search parameter names are separated by '&'. Search parameters\n   * do not influence whether or not a URL is matched, but their values are passed through into\n   * the matched parameters returned by [[UrlMatcher.exec]].\n   *\n   * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n   * or colon placeholders (`/somePath/:param`).\n   *\n   * - *A parameter RegExp* may be defined for a param after a colon\n   * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n   * The regexp must match for the url to be matched.\n   * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n   *\n   * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n   *\n   * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n   *   See [[UrlMatcherFactory.type]] for more information.\n   *\n   * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n   *   A catch-all * parameter value will contain the remainder of the URL.\n   *\n   * ---\n   *\n   * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n   * must be unique within the pattern (across both path and search parameters).\n   * A path parameter matches any number of characters other than '/'. For catch-all\n   * placeholders the path parameter matches any number of characters.\n   *\n   * Examples:\n   *\n   * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n   *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n   * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n   *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n   * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n   * * `'/user/{id:[^/]*}'` - Same as the previous example.\n   * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n   *   parameter consists of 1 to 8 hex digits.\n   * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n   *   path into the parameter 'path'.\n   * * `'/files/*path'` - ditto.\n   * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n   *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n   *\n   */\n  class UrlMatcher {\n    /** @internal Given a matcher, return an array with the matcher's path segments and path params, in order */\n    static pathSegmentsAndParams(matcher) {\n      const staticSegments = matcher._segments;\n      const pathParams = matcher._params.filter(\n        (p) => p.location === DefType.PATH,\n      );\n      return arrayTuples(staticSegments, pathParams.concat(undefined))\n        .reduce(unnestR, [])\n        .filter((x) => x !== \"\" && isDefined(x));\n    }\n    /** @internal Given a matcher, return an array with the matcher's query params */\n    static queryParams(matcher) {\n      return matcher._params.filter((p) => p.location === DefType.SEARCH);\n    }\n    /**\n     * Compare two UrlMatchers\n     *\n     * This comparison function converts a UrlMatcher into static and dynamic path segments.\n     * Each static path segment is a static string between a path separator (slash character).\n     * Each dynamic segment is a path parameter.\n     *\n     * The comparison function sorts static segments before dynamic ones.\n     */\n    static compare(a, b) {\n      /**\n       * Turn a UrlMatcher and all its parent matchers into an array\n       * of slash literals '/', string literals, and Param objects\n       *\n       * This example matcher matches strings like \"/foo/:param/tail\":\n       * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n       * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n       *\n       * Caches the result as `matcher._cache.segments`\n       */\n      const segments = (matcher) =>\n        (matcher._cache.segments =\n          matcher._cache.segments ||\n          matcher._cache.path\n            .map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(unnestR, [])\n            .reduce(joinNeighborsR, [])\n            .map((x) => (isString(x) ? splitOnSlash(x) : x))\n            .reduce(unnestR, []));\n      /**\n       * Gets the sort weight for each segment of a UrlMatcher\n       *\n       * Caches the result as `matcher._cache.weights`\n       */\n      const weights = (matcher) =>\n        (matcher._cache.weights =\n          matcher._cache.weights ||\n          segments(matcher).map((segment) => {\n            // Sort slashes first, then static strings, the Params\n            if (segment === \"/\") return 1;\n            if (isString(segment)) return 2;\n            if (segment instanceof Param) return 3;\n          }));\n      /**\n       * Pads shorter array in-place (mutates)\n       */\n      const padArrays = (l, r, padVal) => {\n        const len = Math.max(l.length, r.length);\n        while (l.length < len) l.push(padVal);\n        while (r.length < len) r.push(padVal);\n      };\n      const weightsA = weights(a),\n        weightsB = weights(b);\n      padArrays(weightsA, weightsB, 0);\n      const _pairs = arrayTuples(weightsA, weightsB);\n      let cmp, i;\n      for (i = 0; i < _pairs.length; i++) {\n        cmp = _pairs[i][0] - _pairs[i][1];\n        if (cmp !== 0) return cmp;\n      }\n      return 0;\n    }\n    /**\n     * @param pattern The pattern to compile into a matcher.\n     * @param paramTypes The [[ParamTypes]] registry\n     * @param paramFactory A [[ParamFactory]] object\n     * @param config  A [[UrlMatcherCompileConfig]] configuration object\n     */\n    constructor(pattern, paramTypes, paramFactory, config) {\n      this._cache = { path: [/** @type {UrlMatcher} */ (this)] };\n\n      this._children = [];\n\n      this._params = [];\n\n      this._segments = [];\n\n      this._compiled = [];\n      this.config = config = defaults(config, defaultConfig);\n      this.pattern = pattern;\n      // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n      //   '*' name\n      //   ':' name\n      //   '{' name '}'\n      //   '{' name ':' regexp '}'\n      // The regular expression is somewhat complicated due to the need to allow curly braces\n      // inside the regular expression. The placeholder regexp breaks down as follows:\n      //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n      //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n      //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n      //    [^{}\\\\]+                       - anything other than curly braces or backslash\n      //    \\\\.                            - a backslash escape\n      //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n      const placeholder =\n        /([:*])([\\w[\\]]+)|\\{([\\w[\\]]+)(?::\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g;\n      const searchPlaceholder =\n        /([:]?)([\\w[\\].-]+)|\\{([\\w[\\].-]+)(?::\\s*((?:[^{\\\\}]+|\\\\.|{(?:[^{\\\\}]+|\\\\.)*})+))?\\}/g;\n      const patterns = [];\n      let last = 0;\n      let matchArray;\n      const checkParamErrors = (id) => {\n        if (!UrlMatcher.nameValidator.test(id))\n          throw new Error(\n            `Invalid parameter name '${id}' in pattern '${pattern}'`,\n          );\n        if (find(this._params, propEq(\"id\", id)))\n          throw new Error(\n            `Duplicate parameter name '${id}' in pattern '${pattern}'`,\n          );\n      };\n      // Split into static segments separated by path parameter placeholders.\n      // The number of segments is always 1 more than the number of parameters.\n      const matchDetails = (m, isSearch) => {\n        // IE[78] returns '' for unmatched groups instead of null\n        const id = m[2] || m[3];\n        const regexp = isSearch\n          ? m[4]\n          : m[4] || (m[1] === \"*\" ? \"[\\\\s\\\\S]*\" : null);\n        const makeRegexpType = (str) =>\n          inherit(paramTypes.type(isSearch ? \"query\" : \"path\"), {\n            pattern: new RegExp(\n              str,\n              this.config.caseInsensitive ? \"i\" : undefined,\n            ),\n          });\n        return {\n          id,\n          regexp,\n          segment: pattern.substring(last, m.index),\n          type: !regexp\n            ? null\n            : paramTypes.type(regexp) || makeRegexpType(regexp),\n        };\n      };\n      let details;\n      let segment;\n      while ((matchArray = placeholder.exec(pattern))) {\n        details = matchDetails(matchArray, false);\n        if (details.segment.indexOf(\"?\") >= 0) break; // we're into the search part\n        checkParamErrors(details.id);\n        this._params.push(\n          paramFactory.fromPath(details.id, details.type, config.state),\n        );\n        this._segments.push(details.segment);\n        patterns.push([details.segment, tail(this._params)]);\n        last = placeholder.lastIndex;\n      }\n      segment = pattern.substring(last);\n      // Find any search parameter names and remove them from the last segment\n      const i = segment.indexOf(\"?\");\n      if (i >= 0) {\n        const search = segment.substring(i);\n        segment = segment.substring(0, i);\n        if (search.length > 0) {\n          last = 0;\n          while ((matchArray = searchPlaceholder.exec(search))) {\n            details = matchDetails(matchArray, true);\n            checkParamErrors(details.id);\n            this._params.push(\n              paramFactory.fromSearch(details.id, details.type, config.state),\n            );\n            last = placeholder.lastIndex;\n            // check if ?&\n          }\n        }\n      }\n      this._segments.push(segment);\n      this._compiled = patterns\n        .map((_pattern) => quoteRegExp.apply(null, _pattern))\n        .concat(quoteRegExp(segment));\n    }\n    /**\n     * Creates a new concatenated UrlMatcher\n     *\n     * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n     *\n     * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n     */\n    append(url) {\n      this._children.push(url);\n      url._cache = {\n        path: this._cache.path.concat(url),\n        parent: this,\n        pattern: null,\n      };\n      return url;\n    }\n\n    isRoot() {\n      return this._cache.path[0] === this;\n    }\n    /** Returns the input pattern string */\n    toString() {\n      return this.pattern;\n    }\n    _getDecodedParamValue(value, param) {\n      return param.value(value);\n    }\n    /**\n     * Tests the specified url/path against this matcher.\n     *\n     * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n     * parameter values.  Returns null if the path does not match.\n     *\n     * The returned object contains the values\n     * of any search parameters that are mentioned in the pattern, but their value may be null if\n     * they are not present in `search`. This means that search parameters are always treated\n     * as optional.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n     *   x: '1', q: 'hello'\n     * });\n     * // returns { id: 'bob', q: 'hello', r: null }\n     * ```\n     *\n     * @param path    The URL path to match, e.g. `$location.getPath()`.\n     * @param search  URL search parameters, e.g. `$location.getSearch()`.\n     * @param hash    URL hash e.g. `$location.getHash()`.\n     *\n     * @returns The captured parameter values.\n     */\n    exec(path, search = {}, hash) {\n      const match = memoizeTo(this._cache, \"pattern\", () => {\n        return new RegExp(\n          [\n            \"^\",\n            unnest(this._cache.path.map((x) => x._compiled)).join(\"\"),\n            this.config.strict === false ? \"/?\" : \"\",\n            \"$\",\n          ].join(\"\"),\n          this.config.caseInsensitive ? \"i\" : undefined,\n        );\n      }).exec(path);\n      if (!match) return null;\n      // options = defaults(options, { isolate: false });\n      const allParams = this.parameters(),\n        pathParams = allParams.filter((param) => !param.isSearch()),\n        searchParams = allParams.filter((param) => param.isSearch()),\n        nPathSegments = this._cache.path\n          .map((urlm) => urlm._segments.length - 1)\n          .reduce((a, x) => a + x),\n        values = {};\n      if (nPathSegments !== match.length - 1)\n        throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n      function decodePathArray(paramVal) {\n        const reverseString = (str) => str.split(\"\").reverse().join(\"\");\n        const unquoteDashes = (str) => str.replace(/\\\\-/g, \"-\");\n        const split = reverseString(paramVal).split(/-(?!\\\\)/);\n        const allReversed = map(split, reverseString);\n        return map(allReversed, unquoteDashes).reverse();\n      }\n      for (let i = 0; i < nPathSegments; i++) {\n        const param = pathParams[i];\n        let value = match[i + 1];\n        // if the param value matches a pre-replace pair, replace the value before decoding.\n        for (let j = 0; j < param.replace.length; j++) {\n          if (param.replace[j].from === value) value = param.replace[j].to;\n        }\n        if (value && param.array === true) value = decodePathArray(value);\n        values[param.id] = this._getDecodedParamValue(value, param);\n      }\n      searchParams.forEach((param) => {\n        let value = search[param.id];\n        for (let j = 0; j < param.replace.length; j++) {\n          if (param.replace[j].from === value) value = param.replace[j].to;\n        }\n        values[param.id] = this._getDecodedParamValue(value, param);\n      });\n      if (hash) values[\"#\"] = hash;\n      return values;\n    }\n    /**\n     * @internal\n     * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n     *\n     * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n     *    pattern has no parameters, an empty array is returned.\n     */\n    parameters(opts = {}) {\n      if (opts.inherit === false) return this._params;\n      return unnest(this._cache.path.map((matcher) => matcher._params));\n    }\n    /**\n     * @internal\n     * Returns a single parameter from this UrlMatcher by id\n     *\n     * @param id\n     * @param opts\n     * @returns {Param|any|boolean|UrlMatcher|null}\n     */\n    parameter(id, opts = {}) {\n      const findParam = () => {\n        for (const param of this._params) {\n          if (param.id === id) return param;\n        }\n      };\n      const parent = this._cache.parent;\n      return (\n        findParam() ||\n        (opts.inherit !== false && parent && parent.parameter(id, opts)) ||\n        null\n      );\n    }\n    /**\n     * Validates the input parameter values against this UrlMatcher\n     *\n     * Checks an object hash of parameters to validate their correctness according to the parameter\n     * types of this `UrlMatcher`.\n     *\n     * @param params The object hash of parameters to validate.\n     * @returns Returns `true` if `params` validates, otherwise `false`.\n     */\n    validates(params) {\n      const validParamVal = (param, val) => !param || param.validates(val);\n      params = params || {};\n      // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n      const paramSchema = this.parameters().filter((paramDef) =>\n        hasOwn(params, paramDef.id),\n      );\n      return paramSchema\n        .map((paramDef) => validParamVal(paramDef, params[paramDef.id]))\n        .reduce(allTrueR, true);\n    }\n    /**\n     * Given a set of parameter values, creates a URL from this UrlMatcher.\n     *\n     * Creates a URL that matches this pattern by substituting the specified values\n     * for the path and search parameters.\n     *\n     * #### Example:\n     * ```js\n     * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n     * // returns '/user/bob?q=yes'\n     * ```\n     *\n     * @param values  the values to substitute for the parameters in this pattern.\n     * @returns the formatted URL (path and optionally search part).\n     */\n    format(values = {}) {\n      // Build the full path of UrlMatchers (including all parent UrlMatchers)\n      const urlMatchers = this._cache.path;\n      // Extract all the static segments and Params (processed as ParamDetails)\n      // into an ordered array\n      const pathSegmentsAndParams = urlMatchers\n        .map(UrlMatcher.pathSegmentsAndParams)\n        .reduce(unnestR, [])\n        .map((x) => (isString(x) ? x : getDetails(x)));\n      // Extract the query params into a separate array\n      const queryParams = urlMatchers\n        .map(UrlMatcher.queryParams)\n        .reduce(unnestR, [])\n        .map(getDetails);\n      const isInvalid = (param) => param.isValid === false;\n      if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n        return null;\n      }\n      /**\n       * Given a Param, applies the parameter value, then returns detailed information about it\n       */\n      function getDetails(param) {\n        // Normalize to typed value\n        const value = param.value(values[param.id]);\n        const isValid = param.validates(value);\n        const isDefaultValue = param.isDefaultValue(value);\n        // Check if we're in squash mode for the parameter\n        const squash = isDefaultValue ? param.squash : false;\n        // Allow the Parameter's Type to encode the value\n        const encoded = param.type.encode(value);\n        return { param, value, isValid, isDefaultValue, squash, encoded };\n      }\n      // Build up the path-portion from the list of static segments and parameters\n      const pathString = pathSegmentsAndParams.reduce((acc, x) => {\n        // The element is a static segment (a raw string); just append it\n        if (isString(x)) return acc + x;\n        // Otherwise, it's a ParamDetails.\n        const { squash, encoded, param } = x;\n        // If squash is === true, try to remove a slash from the path\n        if (squash === true) return acc.match(/\\/$/) ? acc.slice(0, -1) : acc;\n        // If squash is a string, use the string for the param value\n        if (isString(squash)) return acc + squash;\n        if (squash !== false) return acc; // ?\n        if (encoded == null) return acc;\n        // If this parameter value is an array, encode the value using encodeDashes\n        if (Array.isArray(encoded))\n          return acc + map(encoded, encodeDashes).join(\"-\");\n        // If the parameter type is \"raw\", then do not encodeURIComponent\n        if (param.raw) return acc + encoded;\n        // Encode the value\n        return acc + encodeURIComponent(encoded);\n      }, \"\");\n      // Build the query string by applying parameter values (array or regular)\n      // then mapping to key=value, then flattening and joining using \"&\"\n      const queryString = queryParams\n        .map((paramDetails) => {\n          let { param, squash, encoded, isDefaultValue } = paramDetails;\n          if (encoded == null || (isDefaultValue && squash !== false)) return;\n          if (!Array.isArray(encoded)) encoded = [encoded];\n          if (encoded.length === 0) return;\n          if (!param.raw) encoded = map(encoded, encodeURIComponent);\n          return encoded.map((val) => `${param.id}=${val}`);\n        })\n        .reduce(unnestR, [])\n        .join(\"&\");\n      // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n      return (\n        pathString +\n        (queryString ? `?${queryString}` : \"\") +\n        (values[\"#\"] ? \"#\" + values[\"#\"] : \"\")\n      );\n    }\n  }\n\n  UrlMatcher.nameValidator = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  function encodeDashes(str) {\n    // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(\n      /-/g,\n      (c) => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n  }\n\n  /** @typedef {import('./interface.js').StateDeclaration} StateDeclaration */\n\n  /**\n   * Internal representation of a ng-router state.\n   *\n   * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n   *\n   * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n   *\n   * This class prototypally inherits from the corresponding [[StateDeclaration]].\n   * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n   * @implements {StateDeclaration}\n   */\n  class StateObject {\n    name = undefined;\n    navigable = undefined;\n    /** @type {?StateObject} */\n    parent = undefined;\n    params = undefined;\n    url = undefined;\n    includes = undefined;\n\n    /**\n     * @param {import('./interface.js').StateDeclaration} config\n     */\n    constructor(config) {\n      Object.assign(this, config);\n      this.$$state = () => {\n        return this;\n      };\n      /**\n       * @type {import('./interface.js').StateDeclaration}\n       */\n      this.self = config;\n      /**\n       * @type {?Glob}\n       */\n      const nameGlob = this.name ? Glob.fromString(this.name) : null;\n      this.__stateObjectCache = { nameGlob };\n    }\n    /**\n     * Returns true if the provided parameter is the same state.\n     *\n     * Compares the identity of the state against the passed value, which is either an object\n     * reference to the actual `State` instance, the original definition object passed to\n     * `$stateProvider.state()`, or the fully-qualified name.\n     *\n     * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n     *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n     * @returns Returns `true` if `ref` matches the current `State` instance.\n     */\n    is(ref) {\n      return this === ref || this.self === ref || this.fqn() === ref;\n    }\n    /**\n     * @deprecated this does not properly handle dot notation\n     * @returns Returns a dot-separated name of the state.\n     */\n    fqn() {\n      if (!this.parent || !(this.parent instanceof this.constructor))\n        return this.name;\n      const name = this.parent.fqn();\n      return name ? name + \".\" + this.name : this.name;\n    }\n    /**\n     * Returns the root node of this state's tree.\n     *\n     * @returns The root of this state's tree.\n     */\n    root() {\n      return (this.parent && this.parent.root()) || this;\n    }\n    /**\n     * Gets the state's `Param` objects\n     *\n     * Gets the list of [[Param]] objects owned by the state.\n     * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n     * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n     *\n     * @param opts options\n     */\n    parameters(opts) {\n      opts = defaults(opts, { inherit: true, matchingKeys: null });\n      const inherited =\n        (opts.inherit && this.parent && this.parent.parameters()) || [];\n      return inherited\n        .concat(Object.values(this.params))\n        .filter(\n          (param) => !opts.matchingKeys || hasOwn(opts.matchingKeys, param.id),\n        );\n    }\n    /**\n     * Returns a single [[Param]] that is owned by the state\n     *\n     * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n     * @param id the name of the [[Param]] to return\n     * @param opts options\n     */\n    parameter(id, opts = {}) {\n      return (\n        (this.url && this.url.parameter(id, opts)) ||\n        find(Object.values(this.params), propEq(\"id\", id)) ||\n        (opts.inherit && this.parent && this.parent.parameter(id))\n      );\n    }\n    toString() {\n      return this.fqn();\n    }\n  }\n  /** Predicate which returns true if the object is a [[StateDeclaration]] object */\n  StateObject.isStateDeclaration = (obj) => isFunction(obj[\"$$state\"]);\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n  StateObject.isState = (obj) => isObject(obj[\"__stateObjectCache\"]);\n\n  /**\n   * Creates a [[UrlRule]]\n   *\n   * Creates a [[UrlRule]] from a:\n   *\n   * - `string`\n   * - [[UrlMatcher]]\n   * - `RegExp`\n   * - [[StateObject]]\n   */\n  class UrlRuleFactory {\n    /**\n     * @param {import('../url/url-service.js').UrlService} urlService\n     * @param {import('../state/state-service.js').StateProvider} stateService\n     * @param {import('../router.js').Router} routerGlobals\n     */\n    constructor(urlService, stateService, routerGlobals) {\n      this.urlService = urlService;\n      this.stateService = stateService;\n      this.routerGlobals = routerGlobals;\n    }\n\n    /**\n     *\n     * @param {*} what\n     * @param {*} handler\n     * @returns {BaseUrlRule}\n     */\n    create(what, handler) {\n      const { isState, isStateDeclaration } = StateObject;\n      const makeRule = pattern([\n        [isString, (_what) => makeRule(this.urlService.compile(_what))],\n        [is(UrlMatcher), (_what) => this.fromUrlMatcher(_what, handler)],\n        [\n          (...args) => isState(...args) || isStateDeclaration(...args),\n          (_what) => this.fromState(_what, this.stateService, this.routerGlobals),\n        ],\n        [is(RegExp), (_what) => this.fromRegExp(_what, handler)],\n        [isFunction, (_what) => new BaseUrlRule(_what, handler)],\n      ]);\n      const rule = makeRule(what);\n      if (!rule) throw new Error(\"invalid 'what' in when()\");\n      return rule;\n    }\n    /**\n     * A UrlRule which matches based on a UrlMatcher\n     *\n     * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     *\n     * ## Handler as UrlMatcher\n     *\n     * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n     * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n     * The url is replaced with the result.\n     *\n     * #### Example:\n     * ```js\n     * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n     * var handler = $umf.compile(\"/home/:fooId/:barId\");\n     * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match); // '/home/123/456'\n     * ```\n     */\n    fromUrlMatcher(urlMatcher, handler) {\n      let _handler = handler;\n      if (isString(handler)) handler = this.urlService.compile(handler);\n      if (is(UrlMatcher)(handler)) _handler = (match) => handler.format(match);\n      function matchUrlParamters(url) {\n        const params = urlMatcher.exec(url.path, url.search, url.hash);\n        return urlMatcher.validates(params) && params;\n      }\n      // Prioritize URLs, lowest to highest:\n      // - Some optional URL parameters, but none matched\n      // - No optional parameters in URL\n      // - Some optional parameters, some matched\n      // - Some optional parameters, all matched\n      function matchPriority(params) {\n        const optional = urlMatcher\n          .parameters()\n          .filter((param) => param.isOptional);\n        if (!optional.length) return 0.000001;\n        const matched = optional.filter((param) => params[param.id]);\n        return matched.length / optional.length;\n      }\n      const details = { urlMatcher, matchPriority, type: \"URLMATCHER\" };\n      return Object.assign(new BaseUrlRule(matchUrlParamters, _handler), details);\n    }\n    /**\n     * A UrlRule which matches a state by its url\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromState($state.get('foo'), router);\n     * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n     * var result = rule.handler(match);\n     * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n     * ```\n     */\n    fromState(stateOrDecl, stateService, globals) {\n      const state = StateObject.isStateDeclaration(stateOrDecl)\n        ? stateOrDecl.$$state()\n        : stateOrDecl;\n      /**\n       * Handles match by transitioning to matched state\n       *\n       * First checks if the router should start a new transition.\n       * A new transition is not required if the current state's URL\n       * and the new URL are already identical\n       */\n      const handler = (match) => {\n        const $state = stateService;\n        if (\n          $state.href(state, match) !==\n          $state.href(globals.current, globals.params)\n        ) {\n          $state.transitionTo(state, match, { inherit: true, source: \"url\" });\n        }\n      };\n      const details = { state, type: \"STATE\" };\n      return Object.assign(this.fromUrlMatcher(state.url, handler), details);\n    }\n    /**\n     * A UrlRule which matches based on a regular expression\n     *\n     * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n     *\n     * ## Handler as a function\n     *\n     * If `handler` is a function, the function is invoked with:\n     *\n     * - regexp match array (from `regexp`)\n     * - url: the current Url ([[UrlParts]])\n     * - router: the router object ([[UIRouter]])\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     *\n     * ## Handler as string\n     *\n     * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n     * The string is first interpolated using `string.replace()` style pattern.\n     *\n     * #### Example:\n     * ```js\n     * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n     * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n     * var result = rule.handler(match); // '/home/bar'\n     * ```\n     */\n    fromRegExp(regexp, handler) {\n      if (regexp.global || regexp.sticky)\n        throw new Error(\"Rule RegExp must not be global or sticky\");\n      /**\n       * If handler is a string, the url will be replaced by the string.\n       * If the string has any String.replace() style variables in it (like `$2`),\n       * they will be replaced by the captures from [[match]]\n       */\n      const redirectUrlTo = (match) =>\n        // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n        handler.replace(\n          /\\$(\\$|\\d{1,2})/,\n          (m, what) => match[what === \"$\" ? 0 : Number(what)],\n        );\n      const _handler = isString(handler) ? redirectUrlTo : handler;\n      const matchParamsFromRegexp = (url) => regexp.exec(url.path);\n      const details = { regexp, type: \"REGEXP\" };\n      return Object.assign(\n        new BaseUrlRule(matchParamsFromRegexp, _handler),\n        details,\n      );\n    }\n  }\n  UrlRuleFactory.isUrlRule = (obj) =>\n    obj && [\"type\", \"match\", \"handler\"].every((key) => isDefined(obj[key]));\n\n  /**\n   * A base rule which calls `match`\n   *\n   * The value from the `match` function is passed through to the `handler`.\n   */\n  class BaseUrlRule {\n    constructor(match, handler) {\n      this.match = match;\n      this.type = \"RAW\";\n      this.$id = -1;\n      this._group = undefined;\n      this.handler = handler || ((x) => x);\n      this.priority = undefined;\n    }\n\n    /**\n     * This function should be overridden\n     * @param {*} [params]\n     * @returns {number}\n     */\n    matchPriority(params) {\n      assert(isUndefined(params));\n      return 0 - this.$id;\n    }\n  }\n\n  function prioritySort(a, b) {\n    return (b.priority || 0) - (a.priority || 0);\n  }\n\n  const typeSort = (a, b) => {\n    const weights = { STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1 };\n    return (weights[a.type] || 0) - (weights[b.type] || 0);\n  };\n\n  const urlMatcherSort = (a, b) =>\n    !a.urlMatcher || !b.urlMatcher\n      ? 0\n      : UrlMatcher.compare(a.urlMatcher, b.urlMatcher);\n\n  const idSort = (a, b) => {\n    // Identically sorted STATE and URLMATCHER best rule will be chosen by `matchPriority` after each rule matches the URL\n    const useMatchPriority = { STATE: true, URLMATCHER: true };\n    const equal = useMatchPriority[a.type] && useMatchPriority[b.type];\n    return equal ? 0 : (a.$id || 0) - (b.$id || 0);\n  };\n\n  /**\n   * Default rule priority sorting function.\n   *\n   * Sorts rules by:\n   *\n   * - Explicit priority (set rule priority using [[UrlRules.when]])\n   * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n   * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n   * - Rule registration order (for rule types other than STATE and URLMATCHER)\n   *   - Equally sorted State and UrlMatcher rules will each match the URL.\n   *     Then, the *best* match is chosen based on how many parameter values were matched.\n   */\n  function defaultRuleSortFn(a, b) {\n    let cmp = prioritySort(a, b);\n    if (cmp !== 0) return cmp;\n    cmp = typeSort(a, b);\n    if (cmp !== 0) return cmp;\n    cmp = urlMatcherSort(a, b);\n    if (cmp !== 0) return cmp;\n    return idSort(a, b);\n  }\n\n  function getHandlerFn(handler) {\n    if (\n      !isFunction(handler) &&\n      !isString(handler) &&\n      !is(TargetState)(handler) &&\n      !TargetState.isDef(handler)\n    ) {\n      throw new Error(\n        \"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\",\n      );\n    }\n    return isFunction(handler) ? handler : val(handler);\n  }\n  /**\n   * API for managing URL rules\n   *\n   * This API is used to create and manage URL rules.\n   * URL rules are a mechanism to respond to specific URL patterns.\n   *\n   * The most commonly used methods are [[otherwise]] and [[when]].\n   *\n   * This API is found at `$url.rules` (see: [[UIRouter.urlService]], [[URLService.rules]])\n   */\n  class UrlRules {\n    /** @param {UrlRuleFactory} urlRuleFactory */\n    constructor(urlRuleFactory) {\n      this._sortFn = defaultRuleSortFn;\n      this._rules = [];\n      this._id = 0;\n      this.urlRuleFactory = urlRuleFactory;\n    }\n\n    /**\n     * Defines the initial state, path, or behavior to use when the app starts.\n     *\n     * This rule defines the initial/starting state for the application.\n     *\n     * This rule is triggered the first time the URL is checked (when the app initially loads).\n     * The rule is triggered only when the url matches either `\"\"` or `\"/\"`.\n     *\n     * Note: The rule is intended to be used when the root of the application is directly linked to.\n     * When the URL is *not* `\"\"` or `\"/\"` and doesn't match other rules, the [[otherwise]] rule is triggered.\n     * This allows 404-like behavior when an unknown URL is deep-linked.\n     *\n     * #### Example:\n     * Start app at `home` state.\n     * ```js\n     * .initial({ state: 'home' });\n     * ```\n     *\n     * #### Example:\n     * Start app at `/home` (by url)\n     * ```js\n     * .initial('/home');\n     * ```\n     *\n     * #### Example:\n     * When no other url rule matches, go to `home` state\n     * ```js\n     * .initial((matchValue, url, router) => {\n     *   console.log('initial state');\n     *   return { state: 'home' };\n     * })\n     * ```\n     *\n     * @param handler The initial state or url path, or a function which returns the state or url path (or performs custom logic).\n     */\n    initial(handler) {\n      const handlerFn = getHandlerFn(handler);\n      const matchFn = (urlParts, router) =>\n        router.globals.transitionHistory.size() === 0 &&\n        !!/^\\/?$/.exec(urlParts.path);\n      this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n    }\n    /**\n     * Defines the state, url, or behavior to use when no other rule matches the URL.\n     *\n     * This rule is matched when *no other rule* matches.\n     * It is generally used to handle unknown URLs (similar to \"404\" behavior, but on the client side).\n     *\n     * - If `handler` a string, it is treated as a url redirect\n     *\n     * #### Example:\n     * When no other url rule matches, redirect to `/index`\n     * ```js\n     * .otherwise('/index');\n     * ```\n     *\n     * - If `handler` is an object with a `state` property, the state is activated.\n     *\n     * #### Example:\n     * When no other url rule matches, redirect to `home` and provide a `dashboard` parameter value.\n     * ```js\n     * .otherwise({ state: 'home', params: { dashboard: 'default' } });\n     * ```\n     *\n     * - If `handler` is a function, the function receives the current url ([[UrlParts]]) and the [[UIRouter]] object.\n     *   The function can perform actions, and/or return a value.\n     *\n     * #### Example:\n     * When no other url rule matches, manually trigger a transition to the `home` state\n     * ```js\n     * .otherwise((matchValue, urlParts, router) => {\n     *   router.stateService.go('home');\n     * });\n     * ```\n     *\n     * #### Example:\n     * When no other url rule matches, go to `home` state\n     * ```js\n     * .otherwise((matchValue, urlParts, router) => {\n     *   return { state: 'home' };\n     * });\n     * ```\n     *\n     * @param handler The url path to redirect to, or a function which returns the url path (or performs custom logic).\n     */\n    otherwise(handler) {\n      const handlerFn = getHandlerFn(handler);\n      this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n      this._sorted = false;\n    }\n    /**\n     * Remove a rule previously registered\n     *\n     * @param rule the matcher rule that was previously registered using [[rule]]\n     */\n    removeRule(rule) {\n      removeFrom(this._rules, rule);\n    }\n    /**\n     * Manually adds a URL Rule.\n     *\n     * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n     * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n     * Rules can be created using [[urlRuleFactory]], or created manually as simple objects.\n     *\n     * A rule should have a `match` function which returns truthy if the rule matched.\n     * It should also have a `handler` function which is invoked if the rule is the best match.\n     *\n     * @return a function that deregisters the rule\n     */\n    rule(rule) {\n      if (!UrlRuleFactory.isUrlRule(rule)) throw new Error(\"invalid rule\");\n      rule.$id = this._id++;\n      rule.priority = rule.priority || 0;\n      this._rules.push(rule);\n      this._sorted = false;\n      return () => this.removeRule(rule);\n    }\n    /**\n     * Gets all registered rules\n     *\n     * @returns an array of all the registered rules\n     */\n    rules() {\n      this.ensureSorted();\n      return this._rules.concat(this._otherwiseFn ? [this._otherwiseFn] : []);\n    }\n    /**\n     * Defines URL Rule priorities\n     *\n     * More than one rule ([[UrlRule]]) might match a given URL.\n     * This `compareFn` is used to sort the rules by priority.\n     * Higher priority rules should sort earlier.\n     *\n     * The [[defaultRuleSortFn]] is used by default.\n     *\n     * You only need to call this function once.\n     * The `compareFn` will be used to sort the rules as each is registered.\n     *\n     * If called without any parameter, it will re-sort the rules.\n     *\n     * ---\n     *\n     * Url rules may come from multiple sources: states's urls ([[StateDeclaration.url]]), [[when]], and [[rule]].\n     * Each rule has a (user-provided) [[UrlRule.priority]], a [[UrlRule.type]], and a [[UrlRule.$id]]\n     * The `$id` is is the order in which the rule was registered.\n     *\n     * The sort function should use these data, or data found on a specific type\n     * of [[UrlRule]] (such as [[StateRule.state]]), to order the rules as desired.\n     *\n     * #### Example:\n     * This compare function prioritizes rules by the order in which the rules were registered.\n     * A rule registered earlier has higher priority.\n     *\n     * ```js\n     * function compareFn(a, b) {\n     *   return a.$id - b.$id;\n     * }\n     * ```\n     *\n     * @param compareFn a function that compares to [[UrlRule]] objects.\n     *    The `compareFn` should abide by the `Array.sort` compare function rules.\n     *    Given two rules, `a` and `b`, return a negative number if `a` should be higher priority.\n     *    Return a positive number if `b` should be higher priority.\n     *    Return `0` if the rules are identical.\n     *\n     *    See the [mozilla reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)\n     *    for details.\n     */\n    sort(compareFn) {\n      const sorted = this.stableSort(\n        this._rules,\n        (this._sortFn = compareFn || this._sortFn),\n      );\n      // precompute _sortGroup values and apply to each rule\n      let group = 0;\n      for (let i = 0; i < sorted.length; i++) {\n        sorted[i]._group = group;\n        if (\n          i < sorted.length - 1 &&\n          this._sortFn(sorted[i], sorted[i + 1]) !== 0\n        ) {\n          group++;\n        }\n      }\n      this._rules = sorted;\n      this._sorted = true;\n    }\n\n    ensureSorted() {\n      this._sorted || this.sort();\n    }\n\n    stableSort(arr, compareFn) {\n      const arrOfWrapper = arr.map((elem, idx) => ({ elem, idx }));\n      arrOfWrapper.sort((wrapperA, wrapperB) => {\n        const cmpDiff = compareFn(wrapperA.elem, wrapperB.elem);\n        return cmpDiff === 0 ? wrapperA.idx - wrapperB.idx : cmpDiff;\n      });\n      return arrOfWrapper.map((wrapper) => wrapper.elem);\n    }\n    /**\n     * Registers a `matcher` and `handler` for custom URLs handling.\n     *\n     * The `matcher` can be:\n     *\n     * - a [[UrlMatcher]]: See: [[UrlMatcherFactory.compile]]\n     * - a `string`: The string is compiled to a [[UrlMatcher]]\n     * - a `RegExp`: The regexp is used to match the url.\n     *\n     * The `handler` can be:\n     *\n     * - a string: The url is redirected to the value of the string.\n     * - a function: The url is redirected to the return value of the function.\n     *\n     * ---\n     *\n     * When the `handler` is a `string` and the `matcher` is a `UrlMatcher` (or string), the redirect\n     * string is interpolated with parameter values.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(\"/foo/:param1\", \"/bar/:param1\")\n     * ```\n     *\n     * ---\n     *\n     * When the `handler` is a string and the `matcher` is a `RegExp`, the redirect string is\n     * interpolated with capture groups from the RegExp.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(new RegExp(\"^/foo/(.*)$\"), \"/bar/$1\");\n     * ```\n     *\n     * ---\n     *\n     * When the handler is a function, it receives the matched value, the current URL, and the `UIRouter` object (See [[UrlRuleHandlerFn]]).\n     * The \"matched value\" differs based on the `matcher`.\n     * For [[UrlMatcher]]s, it will be the matched state params.\n     * For `RegExp`, it will be the match array from `regexp.exec()`.\n     *\n     * If the handler returns a string, the URL is redirected to the string.\n     *\n     * #### Example:\n     * When the URL is `/foo/123` the rule will redirect to `/bar/123`.\n     * ```js\n     * .when(new RegExp(\"^/foo/(.*)$\"), match => \"/bar/\" + match[1]);\n     * ```\n     *\n     * Note: the `handler` may also invoke arbitrary code, such as `$state.go()`\n     *\n     * @param matcher A pattern `string` to match, compiled as a [[UrlMatcher]], or a `RegExp`.\n     * @param handler The path to redirect to, or a function that returns the path.\n     * @param options `{ priority: number }`\n     *\n     * @return the registered [[UrlRule]]\n     */\n    when(matcher, handler, options) {\n      const rule = this.urlRuleFactory.create(matcher, handler);\n      if (isDefined(options && options.priority))\n        rule.priority = options.priority;\n      this.rule(rule);\n      return rule;\n    }\n  }\n\n  class ParamFactory {\n    /**\n     * @param {import(\"../url/url-config.js\").UrlConfigProvider} urlServiceConfig\n     */\n    constructor(urlServiceConfig) {\n      /**\n       * @type {import(\"../url/url-config.js\").UrlConfigProvider}\n       */\n      this.urlServiceConfig = urlServiceConfig;\n    }\n\n    fromConfig(id, type, state) {\n      return new Param(id, type, DefType.CONFIG, this.urlServiceConfig, state);\n    }\n    fromPath(id, type, state) {\n      return new Param(id, type, DefType.PATH, this.urlServiceConfig, state);\n    }\n    fromSearch(id, type, state) {\n      return new Param(id, type, DefType.SEARCH, this.urlServiceConfig, state);\n    }\n  }\n\n  /**\n   * API for URL management\n   */\n  class UrlService {\n    static $inject = provider([\n      $injectTokens.$location,\n      $injectTokens.$state,\n      $injectTokens.$router,\n      $injectTokens.$urlConfig,\n    ]);\n\n    /** @type {import(\"../../services/location/location\").Location} */\n    $location;\n\n    /**\n     * @param {import(\"../../services/location/location\").LocationProvider} $locationProvider\n     * @param {import(\"../../router/state/state-service.js\").StateProvider} stateService\n     * @param {import(\"../router.js\").Router} globals\n     * @param {import(\"../../router/url/url-config.js\").UrlConfigProvider} urlConfigProvider\n     */\n    constructor($locationProvider, stateService, globals, urlConfigProvider) {\n      this.$locationProvider = $locationProvider;\n      this.stateService = stateService;\n      this.stateService.urlService = this; // circular wiring\n\n      /** Provides services related to the URL */\n      this.urlRuleFactory = new UrlRuleFactory(this, this.stateService, globals);\n\n      /**\n       * The nested [[UrlRules]] API for managing URL rules and rewrites\n       * @type {UrlRules}\n       */\n      this.rules = new UrlRules(this.urlRuleFactory);\n      /**\n       * The nested [[UrlConfig]] API to configure the URL and retrieve URL information\n       * @type {import(\"./url-config.js\").UrlConfigProvider}\n       */\n      this.config = urlConfigProvider;\n\n      /** Creates a new [[Param]] for a given location (DefType) */\n      this.paramFactory = new ParamFactory(this.config);\n\n      this._urlListeners = [];\n    }\n\n    /**\n     * Gets the path part of the current url\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n     *\n     * @return {string} the path portion of the url\n     */\n    getPath() {\n      return this.$location.getPath();\n    }\n\n    /**\n     * Gets the search part of the current url as an object\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n     *\n     * @return {Object} the search (query) portion of the url, as an object\n     */\n    getSearch() {\n      return this.$location.getSearch();\n    }\n    /**\n     * Gets the hash part of the current url\n     *\n     * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n     *\n     * @return {string} the hash (anchor) portion of the url\n     */\n    getHash() {\n      return this.$location.getHash();\n    }\n\n    $get = [\n      $injectTokens.$location,\n      $injectTokens.$rootScope,\n      /**\n       *\n       * @param {import('../../services/location/location.js').Location} $location\n       * @param {import('../../core/scope/scope.js').Scope} $rootScope\n       * @returns {UrlService}\n       */\n      ($location, $rootScope) => {\n        this.$location = $location;\n        $rootScope.$on(\"$locationChangeSuccess\", (evt) => {\n          this._urlListeners.forEach((fn) => {\n            fn(evt);\n          });\n        });\n        this.listen(true);\n        return this;\n      },\n    ];\n\n    /**\n     * @returns {string}\n     */\n    baseHref() {\n      return (\n        this._baseHref ||\n        (this._baseHref = getBaseHref() || window.location.pathname)\n      );\n    }\n\n    /**\n     * Gets the current url, or updates the url\n     *\n     * ### Getting the current URL\n     *\n     * When no arguments are passed, returns the current URL.\n     * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n     *\n     * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n     * have a base HREF prepended ([[PushStateLocationServices]]).\n     *\n     * The raw URL in the browser might be:\n     *\n     * ```\n     * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n     * ```\n     *\n     * or\n     *\n     * ```\n     * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n     * ```\n     *\n     * then this method returns:\n     *\n     * ```\n     * /internal/path/123?param1=foo#anchor\n     * ```\n     *\n     *\n     * #### Example:\n     * ```js\n     * locationServices.url(); // \"/some/path?query=value#anchor\"\n     * ```\n     *\n     * ### Updating the URL\n     *\n     * When `newurl` arguments is provided, changes the URL to reflect `newurl`\n     *\n     * #### Example:\n     * ```js\n     * locationServices.url(\"/some/path?query=value#anchor\", true);\n     * ```\n     *\n     * @param {string} [newUrl] The new value for the URL.\n     *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n     *               It should not include the protocol, site, port, or base path of an absolute HREF.\n     * @param {any} [state] The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n     *\n     * @return the url (after potentially being processed)\n     */\n    url(newUrl, state) {\n      if (isDefined(newUrl)) {\n        const decodeUri = decodeURIComponent(newUrl);\n        this.$location.setUrl(decodeUri);\n      }\n      if (state) this.$location.setState(state);\n      return this.$location.getUrl();\n    }\n\n    /**\n     * @private\n     *\n     * Registers a low level url change handler\n     *\n     * Note: Because this is a low level handler, it's not recommended for general use.\n     *\n     * #### Example:\n     * ```js\n     * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n     * ```\n     *\n     * @param {Function} callback a function that will be called when the url is changing\n     * @return {Function} a function that de-registers the callback\n     */\n    onChange(callback) {\n      this._urlListeners.push(callback);\n      return () => removeFrom(this._urlListeners)(callback);\n    }\n\n    /**\n     * Gets the current URL parts.\n     *\n     * Returns an object with the `path`, `search`, and `hash` components\n     * of the current browser location.\n     *\n     * @returns {import(\"../../services/location/interface.ts\").UrlParts} The current URL's path, search, and hash.\n     */\n    parts() {\n      return {\n        path: this.$location.getPath(),\n        search: this.$location.getSearch(),\n        hash: this.$location.getHash(),\n      };\n    }\n\n    /**\n     * Activates the best rule for the current URL\n     *\n     * Checks the current URL for a matching [[UrlRule]], then invokes that rule's handler.\n     * This method is called internally any time the URL has changed.\n     *\n     * This effectively activates the state (or redirect, etc) which matches the current URL.\n     *\n     * #### Example:\n     * ```js\n     *\n     * fetch('/states.json').then(resp => resp.json()).then(data => {\n     *   data.forEach(state => $stateRegistry.register(state));\n     *   urlService.listen();\n     *   // Find the matching URL and invoke the handler.\n     *   urlService.sync();\n     * });\n     * ```\n     */\n    sync(evt) {\n      if (evt && evt.defaultPrevented) return;\n      const stateService = this.stateService;\n      const url = {\n        path: this.$location.getPath(),\n        search: this.$location.getSearch(),\n        hash: this.$location.getHash(),\n      };\n      /**\n       * @type {*}\n       */\n      const best = this.match(url);\n      const applyResult = pattern([\n        [isString, (newurl) => this.url(newurl)],\n        [\n          TargetState.isDef,\n          (def) => stateService.go(def.state, def.params, def.options),\n        ],\n        [\n          is(TargetState),\n          (target) =>\n            stateService.go(target.state(), target.params(), target.options()),\n        ],\n      ]);\n\n      applyResult(best && best.rule.handler(best.match, url));\n    }\n    /**\n     * Starts or stops listening for URL changes\n     *\n     * Call this sometime after calling [[deferIntercept]] to start monitoring the url.\n     * This causes ng-router to start listening for changes to the URL, if it wasn't already listening.\n     *\n     * If called with `false`, ng-router will stop listening (call listen(true) to start listening again).\n     *\n     * #### Example:\n     * ```js\n     *\n     * fetch('/states.json').then(resp => resp.json()).then(data => {\n     *   data.forEach(state => $stateRegistry.register(state));\n     *   // Start responding to URL changes\n     *   urlService.listen();\n     *   urlService.sync();\n     * });\n     * ```\n     *\n     * @param {boolean} enabled `true` or `false` to start or stop listening to URL changes\n     */\n    listen(enabled) {\n      if (enabled === false) {\n        this._stopListeningFn && this._stopListeningFn();\n        delete this._stopListeningFn;\n      } else {\n        return (this._stopListeningFn =\n          this._stopListeningFn || this.onChange((evt) => this.sync(evt)));\n      }\n    }\n\n    /**\n     * Matches a URL\n     *\n     * Given a URL (as a [[UrlParts]] object), check all rules and determine the best matching rule.\n     * Return the result as a [[MatchResult]].\n     * @returns {any}\n     */\n    match(url) {\n      url = Object.assign({ path: \"\", search: {}, hash: \"\" }, url);\n      const rules = this.rules.rules();\n      // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n      /**\n       *\n       * @param {import(\"./url-rule\").BaseUrlRule} rule\n       */\n      const checkRule = (rule) => {\n        const match = rule.match(url);\n        return match && { match, rule, weight: rule.matchPriority(match) };\n      };\n      // The rules are pre-sorted.\n      // - Find the first matching rule.\n      // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n      // - Choose the rule with the highest match weight.\n      let best;\n      for (let i = 0; i < rules.length; i++) {\n        // Stop when there is a 'best' rule and the next rule sorts differently than it.\n        if (best && best.rule._group !== rules[i]._group) break;\n        const current = checkRule(rules[i]);\n        // Pick the best MatchResult\n        best =\n          !best || (current && current.weight > best.weight) ? current : best;\n      }\n      return best;\n    }\n\n    update(read) {\n      if (read) {\n        this.location = this.url();\n        return;\n      }\n      if (this.url() === this.location) return;\n      this.url(/** @type {string} */ (this.location), true);\n    }\n\n    /**\n     * Internal API.\n     *\n     * Pushes a new location to the browser history.\n     *\n     * @internal\n     * @param urlMatcher\n     * @param params\n     * @param options\n     */\n    push(urlMatcher, params, options) {\n      const replace = options && !!options.replace;\n      this.url(urlMatcher.format(params || {}), replace);\n    }\n\n    /**\n     * Builds and returns a URL with interpolated parameters\n     *\n     * #### Example:\n     * ```js\n     * matcher = $umf.compile(\"/about/:person\");\n     * params = { person: \"bob\" };\n     * $bob = $url.href(matcher, params);\n     * // $bob == \"/about/bob\";\n     * ```\n     *\n     * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n     * @param params An object of parameter values to fill the matcher's required parameters.\n     * @param options Options object. The options are:\n     *\n     * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n     *\n     * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n     */\n    href(urlMatcher, params, options) {\n      let url = urlMatcher.format(params);\n      if (url == null) return null;\n      options = options || { absolute: false };\n      const isHtml5 = this.$locationProvider.html5ModeConf.enabled;\n      if (!isHtml5) {\n        url = \"#\" + this.$locationProvider.hashPrefixConf + url;\n      }\n      url = appendBasePath(url, isHtml5, options.absolute, this.baseHref());\n      if (!options.absolute || !url) {\n        return url;\n      }\n      const slash = !isHtml5 && url ? \"/\" : \"\";\n      return [\n        `${window.location.protocol}//`,\n        window.location.host,\n        slash,\n        url,\n      ].join(\"\");\n    }\n\n    /**\n     * Creates a [[UrlMatcher]] for the specified pattern.\n     *\n     * @param pattern  The URL pattern.\n     * @param config  The config object hash.\n     * @returns The UrlMatcher.\n     */\n    compile(pattern, config) {\n      const urlConfig = this.config;\n      // backward-compatible support for config.params -> config.state.params\n      const params = config && !config.state && config.params;\n      config = params ? Object.assign({ state: { params } }, config) : config;\n      const globalConfig = {\n        strict: urlConfig._isStrictMode,\n        caseInsensitive: urlConfig._isCaseInsensitive,\n      };\n      return new UrlMatcher(\n        pattern,\n        urlConfig.paramTypes,\n        this.paramFactory,\n        Object.assign(globalConfig, config),\n      );\n    }\n\n    /**\n     * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n     *\n     * @param object  The object to perform the type check against.\n     * @returns `true` if the object matches the `UrlMatcher` interface, by\n     *          implementing all the same methods.\n     */\n    isMatcher(object) {\n      // TODO: typeof?\n      if (!isObject(object)) return false;\n      let result = true;\n      Object.entries(UrlMatcher.prototype).forEach(([name, val]) => {\n        if (isFunction(val))\n          result = result && isDefined(object[name]) && isFunction(object[name]);\n      });\n      return result;\n    }\n  }\n\n  function appendBasePath(url, isHtml5, absolute, baseHref) {\n    if (baseHref === \"/\") return url;\n    if (isHtml5) return stripLastPathElement(baseHref) + url;\n    if (absolute) return baseHref.slice(1) + url;\n    return url;\n  }\n\n  class StateMatcher {\n    constructor(_states) {\n      this._states = _states;\n    }\n    isRelative(stateName) {\n      stateName = stateName || \"\";\n      return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n    }\n    find(stateOrName, base, matchGlob = true) {\n      if (!stateOrName && stateOrName !== \"\") return undefined;\n      const isStr = isString(stateOrName);\n      let name = isStr ? stateOrName : stateOrName.name;\n      if (this.isRelative(name)) name = this.resolvePath(name, base);\n      const state = this._states[name];\n      if (\n        state &&\n        (isStr ||\n          (!isStr && (state === stateOrName || state.self === stateOrName)))\n      ) {\n        return state;\n      } else if (isStr && matchGlob) {\n        const _states = Object.values(this._states);\n        const matches = _states.filter(\n          (_state) =>\n            _state.__stateObjectCache.nameGlob &&\n            _state.__stateObjectCache.nameGlob.matches(name),\n        );\n        if (matches.length > 1) {\n          console.error(\n            `stateMatcher.find: Found multiple matches for ${name} using glob: `,\n            matches.map((match) => match.name),\n          );\n        }\n        return matches[0];\n      }\n      return undefined;\n    }\n    resolvePath(name, base) {\n      if (!base) throw new Error(`No reference point given for path '${name}'`);\n      const baseState = this.find(base);\n      const splitName = name.split(\".\");\n      const pathLength = splitName.length;\n      let i = 0,\n        current = baseState;\n      for (; i < pathLength; i++) {\n        if (splitName[i] === \"\" && i === 0) {\n          current = baseState;\n          continue;\n        }\n        if (splitName[i] === \"^\") {\n          if (!current.parent)\n            throw new Error(\n              `Path '${name}' not valid for state '${baseState.name}'`,\n            );\n          current = current.parent;\n          continue;\n        }\n        break;\n      }\n      const relName = splitName.slice(i).join(\".\");\n      return current.name + (current.name && relName ? \".\" : \"\") + relName;\n    }\n  }\n\n  function parseUrl(url) {\n    if (!isString(url)) return false;\n    const root = url.charAt(0) === \"^\";\n    return { val: root ? url.substring(1) : url, root };\n  }\n\n  function selfBuilder(state) {\n    state.self.$$state = () => state;\n    return state.self;\n  }\n\n  function dataBuilder(state) {\n    if (state.parent && state.parent.data) {\n      state.data = state.self.data = inherit(state.parent.data, state.data);\n    }\n    return state.data;\n  }\n\n  function getUrlBuilder($url, root) {\n    return function (stateObject) {\n      let stateDec = stateObject.self;\n      // For future states, i.e., states whose name ends with `.**`,\n      // match anything that starts with the url prefix\n      if (\n        stateDec &&\n        stateDec.url &&\n        stateDec.name &&\n        stateDec.name.match(/\\.\\*\\*$/)\n      ) {\n        const newStateDec = {};\n        copy(stateDec, newStateDec);\n        newStateDec.url += \"{remainder:any}\"; // match any path (.*)\n        stateDec = newStateDec;\n      }\n      const parent = stateObject.parent;\n      const parsed = parseUrl(stateDec.url);\n      const url = !parsed\n        ? stateDec.url\n        : $url.compile(parsed.val, { state: stateDec });\n      if (!url) return null;\n      if (!$url.isMatcher(url))\n        throw new Error(`Invalid url '${url}' in state '${stateObject}'`);\n      return parsed && parsed.root\n        ? url\n        : ((parent && parent.navigable) || root()).url.append(url);\n    };\n  }\n\n  function getNavigableBuilder(isRoot) {\n    return function (state) {\n      return !isRoot(state) && state.url\n        ? state\n        : state.parent\n          ? state.parent.navigable\n          : null;\n    };\n  }\n\n  /**\n   * @param {import(\"../params/param-factory.js\").ParamFactory} paramFactory\n   */\n  function getParamsBuilder(paramFactory) {\n    return function (state) {\n      const makeConfigParam = (_config, id) =>\n        paramFactory.fromConfig(id, null, state.self);\n      const urlParams =\n        (state.url && state.url.parameters({ inherit: false })) || [];\n      const nonUrlParams = Object.values(\n        map(\n          omit(\n            state.params || {},\n            urlParams.map((x) => x.id),\n          ),\n          makeConfigParam,\n        ),\n      );\n      return urlParams\n        .concat(nonUrlParams)\n        .map((p) => [p.id, p])\n        .reduce(applyPairs, {});\n    };\n  }\n\n  function pathBuilder(state) {\n    return state.parent ? state.parent.path.concat(state) : [state];\n  }\n\n  function includesBuilder(state) {\n    const includes = state.parent ? Object.assign({}, state.parent.includes) : {};\n    includes[state.name] = true;\n    return includes;\n  }\n\n  /**\n   * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n   *\n   * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n   * validates the `resolve` property and converts it to a [[Resolvable]] array.\n   *\n   * resolve: input value can be:\n   *\n   * {\n   *   // analyzed but not injected\n   *   myFooResolve: function() { return \"myFooData\"; },\n   *\n   *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n   *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n   *\n   *   // Array split; \"DependencyName\" dep as string\n   *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n   *\n   *   // Array split; DependencyType dep as token (compared using ===)\n   *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n   *\n   *   // val.$inject used as deps\n   *   // where:\n   *   //     corgeResolve.$inject = [\"DependencyName\"];\n   *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n   *   // then \"DependencyName\" dep as string\n   *   myCorgeResolve: corgeResolve,\n   *\n   *  // inject service by name\n   *  // When a string is found, desugar creating a resolve that injects the named service\n   *   myGraultResolve: \"SomeService\"\n   * }\n   *\n   * or:\n   *\n   * [\n   *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n   *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n   *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n   * ]\n   */\n  function resolvablesBuilder(state) {\n    /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n    const objects2Tuples = (resolveObj, resolvePolicies) =>\n      Object.keys(resolveObj || {}).map((token) => ({\n        token,\n        val: resolveObj[token],\n        deps: undefined,\n        policy: resolvePolicies[token],\n      }));\n    /** fetch DI annotations from a function or ng1-style array */\n    const annotateFn = (fn) => {\n      const $injector = window[\"angular\"].$injector;\n      // ng1 doesn't have an $injector until runtime.\n      // If the $injector doesn't exist, use \"deferred\" literal as a\n      // marker indicating they should be annotated when runtime starts\n      return (\n        fn[\"$inject\"] ||\n        ($injector && annotate(fn, $injector.strictDi)) ||\n        \"deferred\"\n      );\n    };\n    /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n    const isResolveLiteral = (obj) => !!(obj.token && obj.resolveFn);\n    /** true if the object looks like a tuple from obj2Tuples */\n    const isTupleFromObj = (obj) =>\n      !!(\n        obj &&\n        obj.val &&\n        (isString(obj.val) || Array.isArray(obj.val) || isFunction(obj.val))\n      );\n\n    // Given a literal resolve or provider object, returns a Resolvable\n    const literal2Resolvable = pattern([\n      [\n        (x) => x.resolveFn,\n        (p) => new Resolvable(getToken(p), p.resolveFn, p.deps, p.policy),\n      ],\n      [\n        (x) => x.useFactory,\n        (p) =>\n          new Resolvable(\n            getToken(p),\n            p.useFactory,\n            p.deps || p.dependencies,\n            p.policy,\n          ),\n      ],\n      [\n        (x) => x.useClass,\n        (p) => new Resolvable(getToken(p), () => new p.useClass(), [], p.policy),\n      ],\n      [\n        (x) => x.useValue,\n        (p) =>\n          new Resolvable(getToken(p), () => p.useValue, [], p.policy, p.useValue),\n      ],\n      [\n        (x) => x.useExisting,\n        (p) => new Resolvable(getToken(p), (x) => x, [p.useExisting], p.policy),\n      ],\n    ]);\n    const tuple2Resolvable = pattern([\n      [\n        pipe((x) => x.val, isString),\n        (tuple) =>\n          new Resolvable(tuple.token, (x) => x, [tuple.val], tuple.policy),\n      ],\n      [\n        pipe((x) => x.val, Array.isArray),\n        (tuple) =>\n          new Resolvable(\n            tuple.token,\n            tail(tuple.val),\n            tuple.val.slice(0, -1),\n            tuple.policy,\n          ),\n      ],\n      [\n        pipe((x) => x.val, isFunction),\n        (tuple) =>\n          new Resolvable(\n            tuple.token,\n            tuple.val,\n            annotateFn(tuple.val),\n            tuple.policy,\n          ),\n      ],\n    ]);\n    const item2Resolvable = pattern([\n      [is(Resolvable), (r) => r],\n      [isResolveLiteral, literal2Resolvable],\n      [isTupleFromObj, tuple2Resolvable],\n      [\n        val(true),\n        (obj) => {\n          throw new Error(\"Invalid resolve value: \" + stringify(obj));\n        },\n      ],\n    ]);\n    // If resolveBlock is already an array, use it as-is.\n    // Otherwise, assume it's an object and convert to an Array of tuples\n    const decl = state.resolve;\n    const items = Array.isArray(decl)\n      ? decl\n      : objects2Tuples(decl, state.resolvePolicy || {});\n    return items.map(item2Resolvable);\n  }\n  /**\n   * A internal global service\n   *\n   * StateBuilder is a factory for the internal [[StateObject]] objects.\n   *\n   * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n   * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n   * [[StateObject]] object, which has an API and is used internally.\n   *\n   * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n   * using the [[builder]] method.\n   */\n  class StateBuilder {\n    /**\n     * @param {import('./state-matcher.js').StateMatcher} matcher\n     * @param urlService\n     */\n    constructor(matcher, urlService) {\n      this.matcher = matcher;\n      this.$injector = undefined;\n      const self = this;\n      const root = () => matcher.find(\"\");\n      function parentBuilder(state) {\n        if (isRoot(state)) return null;\n        return matcher.find(self.parentName(state)) || root();\n      }\n      this.builders = {\n        name: [(state) => state.name],\n        self: [selfBuilder],\n        parent: [parentBuilder],\n        data: [dataBuilder],\n        // Build a URLMatcher if necessary, either via a relative or absolute URL\n        url: [getUrlBuilder(urlService, root)],\n        // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n        navigable: [getNavigableBuilder(isRoot)],\n        // TODO\n        params: [getParamsBuilder(urlService.paramFactory)],\n        // Each framework-specific ng-router implementation should define its own `views` builder\n        // e.g., src/ng1/statebuilders/views.ts\n        views: [],\n        // Keep a full path from the root down to this state as this is needed for state activation.\n        path: [pathBuilder],\n        // Speed up $state.includes() as it's used a lot\n        includes: [includesBuilder],\n        resolvables: [resolvablesBuilder],\n      };\n    }\n    builder(name, fn) {\n      const builders = this.builders;\n      const array = builders[name] || [];\n      // Backwards compat: if only one builder exists, return it, else return whole arary.\n      if (isString(name) && !isDefined(fn))\n        return array.length > 1 ? array : array[0];\n      if (!isString(name) || !isFunction(fn)) return;\n      builders[name] = array;\n      builders[name].push(fn);\n      return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n    }\n    /**\n     * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n     * properties and API built.\n     *\n     * @param state an uninitialized State object\n     * @returns the built State object\n     */\n    build(state) {\n      const { matcher, builders } = this;\n      const parent = this.parentName(state);\n      if (parent && !matcher.find(parent, undefined, false)) {\n        return null;\n      }\n      for (const key in builders) {\n        if (!hasOwn(builders, key)) continue;\n        const chain = builders[key].reduce(\n          (parentFn, step) => (_state) => step(_state, parentFn),\n          () => {},\n        );\n        state[key] = chain(state);\n      }\n      return state;\n    }\n\n    parentName(state) {\n      // name = 'foo.bar.baz.**'\n      const name = state.name || \"\";\n      // segments = ['foo', 'bar', 'baz', '.**']\n      const segments = name.split(\".\");\n      // segments = ['foo', 'bar', 'baz']\n      const lastSegment = segments.pop();\n      // segments = ['foo', 'bar'] (ignore .** segment for future states)\n      if (lastSegment === \"**\") segments.pop();\n      if (segments.length) {\n        if (state.parent) {\n          throw new Error(\n            `States that specify the 'parent:' property should not have a '.' in their name (${name})`,\n          );\n        }\n        // 'foo.bar'\n        return segments.join(\".\");\n      }\n      if (!state.parent) return \"\";\n      return isString(state.parent) ? state.parent : state.parent.name;\n    }\n    name(state) {\n      const name = state.name;\n      if (name.indexOf(\".\") !== -1 || !state.parent) return name;\n      const parentName = isString(state.parent)\n        ? state.parent\n        : state.parent.name;\n      return parentName ? parentName + \".\" + name : name;\n    }\n  }\n\n  function isRoot(state) {\n    return state.name === \"\";\n  }\n\n  /** extracts the token from a Provider or provide literal */\n  function getToken(p) {\n    return p.provide || p.token;\n  }\n\n  class StateQueueManager {\n    /**\n     * @param {import(\"./state-registry.js\").StateRegistryProvider} stateRegistry\n     * @param {*} urlServiceRules\n     * @param {*} states\n     * @param {*} builder\n     * @param {*} listeners\n     */\n    constructor(stateRegistry, urlServiceRules, states, builder, listeners) {\n      this.stateRegistry = stateRegistry;\n      this.urlServiceRules = urlServiceRules;\n      this.states = states;\n      this.builder = builder;\n      this.listeners = listeners;\n      /**\n       * @type {Array<StateObject>}\n       */\n      this.queue = [];\n    }\n\n    register(stateDecl) {\n      const state = new StateObject(stateDecl);\n      if (!isString(name)) throw new Error(\"State must have a valid name\");\n      if (\n        hasOwn(this.states, state.name) ||\n        this.queue.map((x) => x.name).includes(state.name)\n      )\n        throw new Error(`State '${state.name}' is already defined`);\n      this.queue.push(state);\n      this.flush();\n      return state;\n    }\n\n    flush() {\n      const { queue, states, builder } = this;\n      const registered = [], // states that got registered\n        orphans = [], // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n      const getState = (name) => hasOwn(this.states, name) && this.states[name];\n      const notifyListeners = () => {\n        if (registered.length) {\n          this.listeners.forEach((listener) =>\n            listener(\n              \"registered\",\n              registered.map((s) => s.self),\n            ),\n          );\n        }\n      };\n      while (queue.length > 0) {\n        const state = queue.shift();\n        const name = state.name;\n        const result = builder.build(state);\n        const orphanIdx = orphans.indexOf(state);\n        if (result) {\n          const existingState = getState(name);\n          if (existingState && existingState.name === name) {\n            throw new Error(`State '${name}' is already defined`);\n          }\n          const existingFutureState = getState(name + \".**\");\n          if (existingFutureState) {\n            // Remove future state of the same name\n            this.stateRegistry.deregister(existingFutureState);\n          }\n          states[name] = state;\n          this.attachRoute(state);\n          if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n          registered.push(state);\n          continue;\n        }\n        const prev = previousQueueLength[name];\n        previousQueueLength[name] = queue.length;\n        if (orphanIdx >= 0 && prev === queue.length) {\n          // Wait until two consecutive iterations where no additional states were dequeued successfully.\n          // throw new Error(`Cannot register orphaned state '${name}'`);\n          queue.push(state);\n          notifyListeners();\n          return states;\n        } else if (orphanIdx < 0) {\n          orphans.push(state);\n        }\n        queue.push(state);\n      }\n      notifyListeners();\n      return states;\n    }\n    attachRoute(state) {\n      if (state.abstract || !state.url) return;\n      const rulesApi = this.urlServiceRules;\n      rulesApi.rule(rulesApi.urlRuleFactory.create(state));\n    }\n  }\n\n  /** @typedef {import('../../interface.ts').ServiceProvider} ServiceProvider } */\n  /**\n   * A registry for all of the application's [[StateDeclaration]]s\n   *\n   * This API is found at `$stateRegistry` ([[UIRouter.stateRegistry]])\n   *\n   */\n  class StateRegistryProvider {\n    static $inject = provider([$injectTokens.$url, $injectTokens.$state, $injectTokens.$router, $injectTokens.$view]);\n\n    /**\n     * @param urlService\n     * @param stateService\n     * @param {import('../router.js').Router} globals\n     * @param viewService\n     */\n    constructor(urlService, stateService, globals, viewService) {\n      this.states = {};\n      stateService.stateRegistry = this; // <- circular wiring\n      this.urlService = urlService;\n      this.urlServiceRules = urlService.rules;\n      this.$injector = undefined;\n      this.listeners = [];\n      this.matcher = new StateMatcher(this.states);\n      this.builder = new StateBuilder(this.matcher, urlService);\n      // Apply ng1 specific StateBuilder code for `views`, `resolve`, and `onExit/Retain/Enter` properties\n      // TODO we can probably move this inside buildr\n      this.builder.builder(\"views\", ng1ViewsBuilder);\n      this.builder.builder(\"onExit\", this.getStateHookBuilder(\"onExit\"));\n      this.builder.builder(\"onRetain\", this.getStateHookBuilder(\"onRetain\"));\n      this.builder.builder(\"onEnter\", this.getStateHookBuilder(\"onEnter\"));\n\n      this.stateQueue = new StateQueueManager(\n        this,\n        this.urlServiceRules,\n        this.states,\n        this.builder,\n        this.listeners,\n      );\n\n      this.registerRoot();\n\n      viewService.rootViewContext(this.root());\n      globals.$current = this.root();\n      globals.current = globals.$current.self;\n    }\n\n    $get = [\n      $injectTokens.$injector,\n      /**\n       * @param {import(\"../../core/di/internal-injector\").InjectorService} $injector\n       * @returns {StateRegistryProvider}\n       */\n      ($injector) => {\n        this.$injector = $injector;\n        this.builder.$injector = $injector;\n        return this;\n      },\n    ];\n\n    /**\n     * This is a [[StateBuilder.builder]] function for angular1 `onEnter`, `onExit`,\n     * `onRetain` callback hooks on a [[StateDeclaration]].\n     *\n     * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n     * ensures that those hooks are injectable for @uirouter/angularjs (ng1).\n     *\n     * @internalapi\n     */\n    getStateHookBuilder(hookName) {\n      let that = this;\n      return function stateHookBuilder(stateObject) {\n        const hook = stateObject[hookName];\n        const pathname = hookName === \"onExit\" ? \"from\" : \"to\";\n        function decoratedNg1Hook(trans, state) {\n          const resolveContext = new ResolveContext(trans.treeChanges(pathname));\n          const subContext = resolveContext.subContext(state.$$state());\n          const locals = Object.assign(getLocals(subContext), {\n            $state$: state,\n            $transition$: trans,\n          });\n          return that.$injector.invoke(hook, this, locals);\n        }\n        return hook ? decoratedNg1Hook : undefined;\n      };\n    }\n\n    /**\n     * @private\n     */\n    registerRoot() {\n      const rootStateDef = {\n        name: \"\",\n        url: \"^\",\n        views: null,\n        params: {\n          \"#\": { value: null, type: \"hash\", dynamic: true },\n        },\n        abstract: true,\n      };\n      this._root = this.stateQueue.register(rootStateDef);\n      this._root.navigable = null;\n    }\n\n    /**\n     * Listen for a State Registry events\n     *\n     * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n     *\n     * #### Example:\n     * ```js\n     * let allStates = registry.get();\n     *\n     * // Later, invoke deregisterFn() to remove the listener\n     * let deregisterFn = registry.onStatesChanged((event, states) => {\n     *   switch(event) {\n     *     case: 'registered':\n     *       states.forEach(state => allStates.push(state));\n     *       break;\n     *     case: 'deregistered':\n     *       states.forEach(state => {\n     *         let idx = allStates.indexOf(state);\n     *         if (idx !== -1) allStates.splice(idx, 1);\n     *       });\n     *       break;\n     *   }\n     * });\n     * ```\n     *\n     * @param listener a callback function invoked when the registered states changes.\n     *        The function receives two parameters, `event` and `state`.\n     *        See [[StateRegistryListener]]\n     * @return a function that deregisters the listener\n     */\n    onStatesChanged(listener) {\n      this.listeners.push(listener);\n      return function deregisterListener() {\n        removeFrom(this.listeners)(listener);\n      }.bind(this);\n    }\n    /**\n     * Gets the implicit root state\n     *\n     * Gets the root of the state tree.\n     * The root state is implicitly created by ng-router.\n     * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n     *\n     * @return the root [[StateObject]]\n     */\n    root() {\n      return this._root;\n    }\n    /**\n     * Adds a state to the registry\n     *\n     * Registers a [[StateDeclaration]] or queues it for registration.\n     *\n     * Note: a state will be queued if the state's parent isn't yet registered.\n     *\n     * @param stateDefinition the definition of the state to register.\n     * @returns the internal [[StateObject]] object.\n     *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n     *          If the state was only queued, then the object is not fully built.\n     */\n    register(stateDefinition) {\n      return this.stateQueue.register(stateDefinition);\n    }\n\n    _deregisterTree(state) {\n      const all = this.get().map((s) => s.$$state());\n      const getChildren = (states) => {\n        const _children = all.filter((s) => states.indexOf(s.parent) !== -1);\n        return _children.length === 0\n          ? _children\n          : _children.concat(getChildren(_children));\n      };\n      const children = getChildren([state]);\n      const deregistered = [state].concat(children).reverse();\n      deregistered.forEach((_state) => {\n        const rulesApi = this.urlServiceRules;\n        // Remove URL rule\n        rulesApi\n          .rules()\n          .filter(propEq(\"state\", _state))\n          .forEach((rule) => rulesApi.removeRule(rule));\n        // Remove state from registry\n        delete this.states[_state.name];\n      });\n      return deregistered;\n    }\n    /**\n     * Removes a state from the registry\n     *\n     * This removes a state from the registry.\n     * If the state has children, they are are also removed from the registry.\n     *\n     * @param stateOrName the state's name or object representation\n     * @returns {import('./state-object').StateObject[]} a list of removed states\n     */\n    deregister(stateOrName) {\n      const _state = this.get(stateOrName);\n      if (!_state)\n        throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n      const deregisteredStates = this._deregisterTree(_state.$$state());\n      this.listeners.forEach((listener) =>\n        listener(\n          \"deregistered\",\n          deregisteredStates.map((s) => s.self),\n        ),\n      );\n      return deregisteredStates;\n    }\n\n    get(stateOrName, base) {\n      if (arguments.length === 0)\n        return Object.keys(this.states).map((name) => this.states[name].self);\n      const found = this.matcher.find(stateOrName, base);\n      return (found && found.self) || null;\n    }\n\n    /**\n     * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n     * More than one BuilderFunction can be registered for a given property.\n     *\n     * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n     *\n     * @param property The name of the State property being registered for.\n     * @param builderFunction The BuilderFunction which will be used to build the State property\n     * @returns a function which deregisters the BuilderFunction\n     */\n    decorator(property, builderFunction) {\n      return this.builder.builder(property, builderFunction);\n    }\n  }\n\n  const getLocals = (ctx) => {\n    const tokens = ctx.getTokens().filter(isString);\n    const tuples = tokens.map((key) => {\n      const resolvable = ctx.getResolvable(key);\n      const waitPolicy = ctx.getPolicy(resolvable).async;\n      return [\n        key,\n        waitPolicy === \"NOWAIT\" ? resolvable.promise : resolvable.data,\n      ];\n    });\n    return tuples.reduce(applyPairs, {});\n  };\n\n  function parseStateRef(ref) {\n    const paramsOnly = ref.match(/^\\s*({[^}]*})\\s*$/);\n    if (paramsOnly) ref = \"(\" + paramsOnly[1] + \")\";\n    const parsed = ref\n      .replace(/\\n/g, \" \")\n      .match(/^\\s*([^(]*?)\\s*(\\((.*)\\))?\\s*$/);\n    if (!parsed || parsed.length !== 4)\n      throw new Error(\"Invalid state ref '\" + ref + \"'\");\n    return { state: parsed[1] || null, paramExpr: parsed[3] || null };\n  }\n\n  function stateContext(el) {\n    const $ngView = getInheritedData(el, \"$ngView\");\n    const path = parse(\"$cfg.path\")($ngView);\n    return path ? tail(path).state.name : undefined;\n  }\n\n  function processedDef($state, $element, def) {\n    const ngState = def.ngState || $state.current.name;\n    const ngStateOpts = Object.assign(\n      defaultOpts($element, $state),\n      def.ngStateOpts || {},\n    );\n    const href = $state.href(ngState, def.ngStateParams, ngStateOpts);\n    return { ngState, ngStateParams: def.ngStateParams, ngStateOpts, href };\n  }\n\n  function getTypeInfo(el) {\n    // SVGAElement does not use the href attribute, but rather the 'xlinkHref' attribute.\n    const isSvg =\n      Object.prototype.toString.call(el.getAttribute(\"href\")) ===\n      \"[object SVGAnimatedString]\";\n    const isForm = el.nodeName === \"FORM\";\n    return {\n      attr: isForm ? \"action\" : isSvg ? \"xlink:href\" : \"href\",\n      isAnchor: el.nodeName === \"A\",\n      clickable: !isForm,\n    };\n  }\n\n  function clickHook(el, $state, type, getDef, scope) {\n    return function (e) {\n      const button = e.which || e.button,\n        target = getDef();\n\n      let res =\n        button > 1 ||\n        e.ctrlKey ||\n        e.metaKey ||\n        e.shiftKey ||\n        e.altKey ||\n        el.getAttribute(\"target\");\n      if (!res) {\n        // HACK: This is to allow ng-clicks to be processed before the transition is initiated:\n        const transition = setTimeout(function () {\n          if (!el.getAttribute(\"disabled\")) {\n            const res = $state.go(\n              target.ngState,\n              target.ngStateParams,\n              target.ngStateOpts,\n            );\n            res.then(() => {\n              scope.$emit(\"$updateBrowser\");\n            });\n          }\n        });\n        e.preventDefault();\n        // if the state has no URL, ignore one preventDefault from the <a> directive.\n        let ignorePreventDefaultCount = type.isAnchor && !target.href ? 1 : 0;\n        e.preventDefault = function () {\n          if (ignorePreventDefaultCount-- <= 0) clearTimeout(transition);\n        };\n      } else {\n        // ignored\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    };\n  }\n\n  function defaultOpts(el, $state) {\n    return {\n      relative: stateContext(el) || $state.$current,\n      inherit: true,\n      source: \"sref\",\n    };\n  }\n\n  function bindEvents(element, scope, hookFn, ngStateOpts) {\n    let events;\n    if (ngStateOpts) {\n      events = ngStateOpts.events;\n    }\n    if (!Array.isArray(events)) {\n      events = [\"click\"];\n    }\n    //const on = element.on ? \"on\" : \"bind\";\n\n    for (const event of events) {\n      element.addEventListener(event, hookFn);\n    }\n    scope.$on(\"$destroy\", function () {\n      // const off = element.off ? \"off\" : \"unbind\";\n      for (const event of events) {\n        element.removeEventListener(event, hookFn);\n      }\n    });\n  }\n\n  // // TODO: SEPARATE THESE OUT\n\n  $StateRefDirective.$inject = [\"$state\", \"$stateRegistry\", \"$transitions\"];\n  function $StateRefDirective(\n    $stateService,\n    $stateRegistry,\n    $transitions,\n  ) {\n    const $state = $stateService;\n    return {\n      restrict: \"A\",\n      require: [\"?^ngSrefActive\", \"?^ngSrefActiveEq\"],\n      link: (scope, element, attrs, ngSrefActive) => {\n        const type = getTypeInfo(element);\n        const active = ngSrefActive[1] || ngSrefActive[0];\n        let unlinkInfoFn = null;\n        const rawDef = {};\n        const getDef = () => processedDef($state, element, rawDef);\n        const ref = parseStateRef(attrs.ngSref);\n        rawDef.ngState = ref.state;\n        rawDef.ngStateOpts = attrs.ngSrefOpts\n          ? scope.$eval(attrs.ngSrefOpts)\n          : {};\n\n        function update() {\n          rawDef.ngStateParams = Object.assign({}, scope.$eval(ref.paramExpr));\n          const def = getDef();\n          if (unlinkInfoFn) {\n            unlinkInfoFn();\n          }\n          if (active) {\n            unlinkInfoFn = active.$$addStateInfo(def.ngState, def.ngStateParams);\n          }\n          if (def.href != null) {\n            attrs.$set(type.attr, def.href);\n          }\n        }\n\n        if (ref.paramExpr) {\n          scope.$watch(\n            ref.paramExpr,\n            function (val) {\n              rawDef.ngStateParams = Object.assign({}, val);\n              update();\n            },\n            true,\n          );\n          rawDef.ngStateParams = Object.assign({}, scope.$eval(ref.paramExpr));\n        }\n\n        update();\n        scope.$on(\"$destroy\", $stateRegistry.onStatesChanged(update));\n        scope.$on(\"$destroy\", $transitions.onSuccess({}, update));\n        if (!type.clickable) {\n          return;\n        }\n        bindEvents(\n          element,\n          scope,\n          clickHook(element, $state, type, getDef, scope),\n          rawDef.ngStateOpts,\n        );\n      },\n    };\n  }\n\n  $StateRefDynamicDirective.$inject = [\n    \"$state\",\n    \"$stateRegistry\",\n    \"$transitions\",\n  ];\n\n  /**\n   * @param $state\n   * @param $stateRegistry\n   * @param $transitions\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function $StateRefDynamicDirective(\n    $state,\n    $stateRegistry,\n    $transitions,\n  ) {\n    return {\n      restrict: \"A\",\n      require: [\"?^ngSrefActive\", \"?^ngSrefActiveEq\"],\n      link: function (scope, element, attrs, ngSrefActive) {\n        const type = getTypeInfo(element);\n        const active = ngSrefActive[1] || ngSrefActive[0];\n        let unlinkInfoFn = null;\n        let hookFn;\n        const rawDef = {};\n        const getDef = () => processedDef($state, element, rawDef);\n        const inputAttrs = [\"ngState\", \"ngStateParams\", \"ngStateOpts\"];\n        const watchDeregFns = inputAttrs.reduce(\n          (acc, attr) => ((acc[attr] = () => {}), acc),\n          {},\n        );\n        function update() {\n          const def = getDef();\n\n          if (unlinkInfoFn) {\n            unlinkInfoFn();\n          }\n          if (active) {\n            unlinkInfoFn = active.$$addStateInfo(def.ngState, def.ngStateParams);\n          }\n          if (def.href != null) {\n            attrs.$set(type.attr, def.href);\n          }\n        }\n        inputAttrs.forEach((field) => {\n          rawDef[field] = attrs[field] ? scope.$eval(attrs[field]) : null;\n          attrs.$observe(field, (expr) => {\n            watchDeregFns[field]();\n            watchDeregFns[field] = scope.$watch(expr, (newval) => {\n              rawDef[field] = newval;\n              update();\n            });\n          });\n        });\n        update();\n        scope.$on(\"$destroy\", $stateRegistry.onStatesChanged(update));\n        scope.$on(\"$destroy\", $transitions.onSuccess({}, update));\n        if (!type.clickable) return;\n        hookFn = clickHook(element, $state, type, getDef, scope);\n        bindEvents(element, scope, hookFn, rawDef.ngStateOpts);\n      },\n    };\n  }\n\n  $StateRefActiveDirective.$inject = [\n    \"$state\",\n    \"$router\",\n    \"$interpolate\",\n    \"$stateRegistry\",\n    \"$transitions\",\n  ];\n\n  /**\n   * @param {*} $state\n   * @param {import('../router.js').Router} $router\n   * @param {*} $interpolate\n   * @param {*} $stateRegistry\n   * @param {*} $transitions\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function $StateRefActiveDirective(\n    $state,\n    $router,\n    $interpolate,\n    $stateRegistry,\n    $transitions,\n  ) {\n    return {\n      restrict: \"A\",\n      controller: function ($scope, $element, $attrs) {\n        let states = [];\n        let activeEqClass;\n        let ngSrefActive;\n        // There probably isn't much point in $observing this\n        // ngSrefActive and ngSrefActiveEq share the same directive object with some\n        // slight difference in logic routing\n        activeEqClass = $interpolate($attrs.ngSrefActiveEq || \"\", false)($scope);\n        try {\n          ngSrefActive = $scope.$eval($attrs.ngSrefActive);\n        } catch {\n          // Do nothing. ngSrefActive is not a valid expression.\n          // Fall back to using $interpolate below\n        }\n        ngSrefActive =\n          ngSrefActive || $interpolate($attrs.ngSrefActive || \"\", false)($scope);\n        setStatesFromDefinitionObject(ngSrefActive);\n        // Allow ngSref to communicate with ngSrefActive[Equals]\n        this.$$addStateInfo = function (newState, newParams) {\n          // we already got an explicit state provided by ng-sref-active, so we\n          // shadow the one that comes from ng-sref\n          if (isObject(ngSrefActive) && states.length > 0) {\n            return;\n          }\n          const deregister = addState(newState, newParams, ngSrefActive);\n          update();\n          return deregister;\n        };\n        function updateAfterTransition(trans) {\n          trans.promise.then(update, () => {});\n        }\n        $scope.$on(\"$destroy\", setupEventListeners());\n        if ($router.transition) {\n          updateAfterTransition($router.transition);\n        }\n        function setupEventListeners() {\n          const deregisterStatesChangedListener =\n            $stateRegistry.onStatesChanged(handleStatesChanged);\n          const deregisterOnStartListener = $transitions.onStart(\n            {},\n            updateAfterTransition,\n          );\n          const deregisterStateChangeSuccessListener = $scope.$on(\n            \"$stateChangeSuccess\",\n            update,\n          );\n          return function cleanUp() {\n            deregisterStatesChangedListener();\n            deregisterOnStartListener();\n            deregisterStateChangeSuccessListener();\n          };\n        }\n        function handleStatesChanged() {\n          setStatesFromDefinitionObject(ngSrefActive);\n        }\n        function setStatesFromDefinitionObject(statesDefinition) {\n          if (isObject(statesDefinition)) {\n            states = [];\n            Object.entries(statesDefinition).forEach(\n              ([activeClass, stateOrName]) => {\n                // Helper function to abstract adding state.\n                const addStateForClass = function (stateOrName, activeClass) {\n                  const ref = parseStateRef(stateOrName);\n                  addState(ref.state, $scope.$eval(ref.paramExpr), activeClass);\n                };\n                if (isString(stateOrName)) {\n                  // If state is string, just add it.\n                  addStateForClass(stateOrName, activeClass);\n                } else if (Array.isArray(stateOrName)) {\n                  // If state is an array, iterate over it and add each array item individually.\n                  stateOrName.forEach((stateOrName) => {\n                    addStateForClass(stateOrName, activeClass);\n                  });\n                }\n              },\n            );\n          }\n        }\n        function addState(stateName, stateParams, activeClass) {\n          const state = $state.get(stateName, stateContext($element));\n          const stateInfo = {\n            state: state || { name: stateName },\n            params: stateParams,\n            activeClass: activeClass,\n          };\n          states.push(stateInfo);\n          return function removeState() {\n            removeFrom(states)(stateInfo);\n          };\n        }\n        // Update route state\n        function update() {\n          const splitClasses = (str) => str.split(/\\s/).filter(Boolean);\n          const getClasses = (stateList) =>\n            stateList\n              .map((x) => x.activeClass)\n              .map(splitClasses)\n              .reduce(unnestR, []);\n          const allClasses = getClasses(states)\n            .concat(splitClasses(activeEqClass))\n            .reduce(uniqR, []);\n          const fuzzyClasses = getClasses(\n            states.filter((x) => $state.includes(x.state.name, x.params)),\n          );\n          const exactlyMatchesAny = !!states.filter((x) =>\n            $state.is(x.state.name, x.params),\n          ).length;\n          const exactClasses = exactlyMatchesAny\n            ? splitClasses(activeEqClass)\n            : [];\n          const addClasses = fuzzyClasses.concat(exactClasses).reduce(uniqR, []);\n          const removeClasses = allClasses.filter(\n            (cls) => !addClasses.includes(cls),\n          );\n          addClasses.forEach((className) => $element.classList.add(className));\n          removeClasses.forEach((className) =>\n            $element.classList.remove(className),\n          );\n        }\n        update();\n      },\n    };\n  }\n\n  /**\n   * `ng-view`: A viewport directive which is filled in by a view from the active state.\n   *\n   * ### Attributes\n   *\n   * - `name`: (Optional) A view name.\n   *   The name should be unique amongst the other views in the same state.\n   *   You can have views of the same name that live in different states.\n   *   The ng-view can be targeted in a View using the name ([[StateDeclaration.views]]).\n   *\n   * - `autoscroll`: an expression. When it evaluates to true, the `ng-view` will be scrolled into view when it is activated.\n   *   Uses [[$viewScroll]] to do the scrolling.\n   *\n   * - `onload`: Expression to evaluate whenever the view updates.\n   *\n   * #### Example:\n   * A view can be unnamed or named.\n   * ```html\n   * <!-- Unnamed -->\n   * <div ng-view></div>\n   *\n   * <!-- Named -->\n   * <div ng-view=\"viewName\"></div>\n   *\n   * <!-- Named (different style) -->\n   * <ng-view name=\"viewName\"></ng-view>\n   * ```\n   *\n   * You can only have one unnamed view within any template (or root html). If you are only using a\n   * single view and it is unnamed then you can populate it like so:\n   *\n   * ```html\n   * <div ng-view></div>\n   * $stateProvider.state(\"home\", {\n   *   template: \"<h1>HELLO!</h1>\"\n   * })\n   * ```\n   *\n   * The above is a convenient shortcut equivalent to specifying your view explicitly with the\n   * [[StateDeclaration.views]] config property, by name, in this case an empty name:\n   *\n   * ```js\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * But typically you'll only use the views property if you name your view or have more than one view\n   * in the same template. There's not really a compelling reason to name a view if its the only one,\n   * but you could if you wanted, like so:\n   *\n   * ```html\n   * <div ng-view=\"main\"></div>\n   * ```\n   *\n   * ```js\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"main\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * Really though, you'll use views to set up multiple views:\n   *\n   * ```html\n   * <div ng-view></div>\n   * <div ng-view=\"chart\"></div>\n   * <div ng-view=\"data\"></div>\n   * ```\n   *\n   * ```js\n   * $stateProvider.state(\"home\", {\n   *   views: {\n   *     \"\": {\n   *       template: \"<h1>HELLO!</h1>\"\n   *     },\n   *     \"chart\": {\n   *       template: \"<chart_thing/>\"\n   *     },\n   *     \"data\": {\n   *       template: \"<data_thing/>\"\n   *     }\n   *   }\n   * })\n   * ```\n   *\n   * #### Examples for `autoscroll`:\n   * ```html\n   * <!-- If autoscroll present with no expression,\n   *      then scroll ng-view into view -->\n   * <ng-view autoscroll/>\n   *\n   * <!-- If autoscroll present with valid expression,\n   *      then scroll ng-view into view if expression evaluates to true -->\n   * <ng-view autoscroll='true'/>\n   * <ng-view autoscroll='false'/>\n   * <ng-view autoscroll='scopeVariable'/>\n   * ```\n   *\n   * Resolve data:\n   *\n   * The resolved data from the state's `resolve` block is placed on the scope as `$resolve` (this\n   * can be customized using [[ViewDeclaration.resolveAs]]).  This can be then accessed from the template.\n   *\n   * Note that when `controllerAs` is being used, `$resolve` is set on the controller instance *after* the\n   * controller is instantiated.  The `$onInit()` hook can be used to perform initialization code which\n   * depends on `$resolve` data.\n   *\n   * #### Example:\n   * ```js\n   * $stateProvider.state('home', {\n   *   template: '<my-component user=\"$resolve.user\"></my-component>',\n   *   resolve: {\n   *     user: function(UserService) { return UserService.fetchUser(); }\n   *   }\n   * });\n   * ```\n   */\n\n  /** @type {import(\"../../interface.js\").AnnotatedDirectiveFactory} */\n  let ngView = [\n    \"$view\",\n    \"$animate\",\n    \"$viewScroll\",\n    \"$interpolate\",\n    /**\n     * @param {*} $view\n     * @param {*} $animate\n     * @param {*} $viewScroll\n     * @param {*} $interpolate\n     * @returns {import(\"../../interface.js\").Directive}\n     */\n    function $ViewDirective($view, $animate, $viewScroll, $interpolate) {\n      function getRenderer() {\n        return {\n          enter: function (element, target, cb) {\n            if (hasAnimate(element)) {\n              $animate.enter(element, null, target).then(cb);\n            } else {\n              target.after(element);\n              cb();\n            }\n          },\n          leave: function (element, cb) {\n            if (hasAnimate(element)) {\n              $animate.leave(element).then(cb);\n            } else {\n              element.parentElement.removeChild(element);\n              cb();\n            }\n          },\n        };\n      }\n      function configsEqual(config1, config2) {\n        return config1 === config2;\n      }\n      const rootData = {\n        $cfg: { viewDecl: { $context: $view.rootViewContext() } },\n        $ngView: {},\n      };\n      const directive = {\n        count: 0,\n        terminal: true,\n        priority: 400,\n        transclude: \"element\",\n        compile: function (_tElement, _tAttrs, $transclude) {\n          return function (scope, $element, attrs) {\n            const onloadExp = attrs[\"onload\"] || \"\",\n              autoScrollExp = attrs[\"autoscroll\"],\n              renderer = getRenderer(),\n              inherited = getInheritedData($element, \"$ngView\") || rootData,\n              name =\n                $interpolate(attrs[\"ngView\"] || attrs[\"name\"] || \"\")(scope) ||\n                \"$default\";\n            let previousEl, currentEl, currentScope, viewConfig;\n            const activeUIView = {\n              id: directive.count++, // Global sequential ID for ng-view tags added to DOM\n              name: name, // ng-view name (<div ng-view=\"name\"></div>\n              fqn: inherited.$ngView.fqn\n                ? inherited.$ngView.fqn + \".\" + name\n                : name, // fully qualified name, describes location in DOM\n              config: null, // The ViewConfig loaded (from a state.views definition)\n              configUpdated: configUpdatedCallback, // Called when the matching ViewConfig changes\n              get creationContext() {\n                // The context in which this ng-view \"tag\" was created\n                const fromParentTagConfig = parse(\"$cfg.viewDecl.$context\")(\n                  inherited,\n                );\n                // Allow <ng-view name=\"foo\"><ng-view name=\"bar\"></ng-view></ng-view>\n                // See https://github.com/angular-ui/ui-router/issues/3355\n                const fromParentTag = parse(\"$ngView.creationContext\")(inherited);\n                return fromParentTagConfig || fromParentTag;\n              },\n            };\n            trace.traceUIViewEvent(\"Linking\", activeUIView);\n            function configUpdatedCallback(config) {\n              if (config && !(config instanceof ViewConfig)) return;\n              if (configsEqual(viewConfig, config)) return;\n              trace.traceUIViewConfigUpdated(\n                activeUIView,\n                config && config.viewDecl && config.viewDecl.$context,\n              );\n              viewConfig = config;\n              updateView(config);\n            }\n\n            setCacheData($element, \"$ngView\", { $ngView: activeUIView });\n            updateView();\n            const unregister = $view.registerUIView(activeUIView);\n            scope.$on(\"$destroy\", function () {\n              trace.traceUIViewEvent(\"Destroying/Unregistering\", activeUIView);\n              unregister();\n            });\n            function cleanupLastView() {\n              if (previousEl) {\n                trace.traceUIViewEvent(\n                  \"Removing (previous) el\",\n                  getCacheData(previousEl, \"$ngView\"),\n                );\n                previousEl.remove();\n                previousEl = null;\n              }\n              if (currentScope) {\n                trace.traceUIViewEvent(\"Destroying scope\", activeUIView);\n                currentScope.$destroy();\n                currentScope = null;\n              }\n              if (currentEl) {\n                const _viewData = getCacheData(currentEl, \"$ngViewAnim\");\n                trace.traceUIViewEvent(\"Animate out\", _viewData);\n                renderer.leave(currentEl, function () {\n                  _viewData.$$animLeave.resolve();\n                  previousEl = null;\n                });\n                previousEl = currentEl;\n                currentEl = null;\n              }\n            }\n            function updateView(config) {\n              const newScope = scope.$new();\n              const animEnter = Promise.withResolvers();\n              const animLeave = Promise.withResolvers();\n              const $ngViewData = {\n                $cfg: config,\n                $ngView: activeUIView,\n              };\n              const $ngViewAnim = {\n                $animEnter: animEnter.promise,\n                $animLeave: animLeave.promise,\n                $$animLeave: animLeave,\n              };\n              /**\n               * Fired once the view **begins loading**, *before* the DOM is rendered.\n               *\n               * @param {Object} event Event object.\n               * @param {string} viewName Name of the view.\n               */\n              newScope.$emit(\"$viewContentLoading\", name);\n              currentEl = $transclude(newScope, function (clone) {\n                setCacheData(clone, \"$ngViewAnim\", $ngViewAnim);\n                setCacheData(clone, \"$ngView\", $ngViewData);\n                renderer.enter(clone, $element, function () {\n                  animEnter.resolve();\n                  if (currentScope)\n                    currentScope.$emit(\"$viewContentAnimationEnded\");\n                  if (\n                    (isDefined(autoScrollExp) && !autoScrollExp) ||\n                    scope.$eval(autoScrollExp)\n                  ) {\n                    $viewScroll(clone);\n                  }\n                });\n                cleanupLastView();\n              });\n              currentScope = newScope;\n              /**\n               * Fired once the view is **loaded**, *after* the DOM is rendered.\n               *\n               * @param {Object} event Event object.\n               */\n              currentScope.$emit(\"$viewContentLoaded\", config || viewConfig);\n              currentScope.$eval(onloadExp);\n            }\n          };\n        },\n      };\n      return directive;\n    },\n  ];\n\n  $ViewDirectiveFill.$inject = [\"$compile\", \"$controller\", \"$transitions\"];\n  function $ViewDirectiveFill($compile, $controller, $transitions) {\n    const getControllerAs = parse(\"viewDecl.controllerAs\");\n    const getResolveAs = parse(\"viewDecl.resolveAs\");\n    return {\n      priority: -400,\n      compile: function (tElement) {\n        const initial = tElement.innerHTML;\n        dealoc(tElement, true);\n        return function (scope, $element) {\n          const data = getCacheData($element, \"$ngView\");\n          if (!data) {\n            $element.innerHTML = initial;\n            $compile($element.contentDocument || $element.childNodes)(scope);\n            return;\n          }\n          const cfg = data.$cfg || { viewDecl: {}, getTemplate: () => {} };\n          const resolveCtx = cfg.path && new ResolveContext(cfg.path);\n          $element.innerHTML = cfg.getTemplate($element, resolveCtx) || initial;\n          trace.traceUIViewFill(data.$ngView, $element.innerHTML);\n          const link = $compile($element.contentDocument || $element.childNodes);\n          const controller = cfg.controller;\n          const controllerAs = getControllerAs(cfg);\n          const resolveAs = getResolveAs(cfg);\n          const locals = resolveCtx && getLocals(resolveCtx);\n          if (resolveAs) {\n            scope.$target[resolveAs] = locals;\n          }\n          if (controller) {\n            const controllerInstance = $controller(\n              controller,\n              Object.assign({}, locals, { $scope: scope, $element: $element }),\n            );\n            if (controllerAs) {\n              scope.$target[controllerAs] = controllerInstance;\n              scope.$target[controllerAs][resolveAs] = locals;\n            }\n            // TODO: Use $view service as a central point for registering component-level hooks\n            // Then, when a component is created, tell the $view service, so it can invoke hooks\n            // $view.componentLoaded(controllerInstance, { $scope: scope, $element: $element });\n            // scope.$on('$destroy', () => $view.componentUnloaded(controllerInstance, { $scope: scope, $element: $element }));\n            setCacheData($element, \"$ngControllerController\", controllerInstance);\n            Array.from($element.children).forEach((e) => {\n              setCacheData(e, \"$ngControllerController\", controllerInstance);\n            });\n            registerControllerCallbacks(\n              $transitions,\n              controllerInstance,\n              scope,\n              cfg,\n            );\n          }\n          // Wait for the component to appear in the DOM\n          // if (isString(cfg.component)) {\n          //const kebobName = kebobString(cfg.component);\n          // const tagRegexp = new RegExp(`^(x-|data-)?${kebobName}$`, \"i\");\n          // const getComponentController = () => {\n          //   const directiveEl = [].slice\n          //     .call($element.children)\n          //     .filter((el) => el && el.tagName && tagRegexp.exec(el.tagName));\n          //   return (\n          //     directiveEl &&\n          //     getCacheData(directiveEl, `$${cfg.component}Controller`)\n          //   );\n          // };\n          //console.error(getComponentController());\n          // const deregisterWatch = scope.$watch(\n          //   getComponentController,\n          //   function (ctrlInstance) {\n          //     if (!ctrlInstance) return;\n          //     registerControllerCallbacks(\n          //       $transitions,\n          //       ctrlInstance,\n          //       scope,\n          //       cfg,\n          //     );\n          //     deregisterWatch();\n          //   },\n          // );\n          // }\n          link(scope);\n        };\n      },\n    };\n  }\n  /** @ignore */\n  /** @ignore incrementing id */\n  let _uiCanExitId = 0;\n  /** @ignore TODO: move these callbacks to $view and/or `/hooks/components.ts` or something */\n  function registerControllerCallbacks(\n    $transitions,\n    controllerInstance,\n    $scope,\n    cfg,\n  ) {\n    // Call $onInit() ASAP\n    if (\n      isFunction(controllerInstance.$onInit) &&\n      !(cfg.viewDecl.component || cfg.viewDecl.componentProvider)\n    ) {\n      controllerInstance.$onInit();\n    }\n    const viewState = tail(cfg.path).state.self;\n    const hookOptions = { bind: controllerInstance };\n    // Add component-level hook for onUiParamsChanged\n    if (isFunction(controllerInstance.uiOnParamsChanged)) {\n      const resolveContext = new ResolveContext(cfg.path);\n      const viewCreationTrans = resolveContext.getResolvable(\"$transition$\").data;\n      // Fire callback on any successful transition\n      const paramsUpdated = ($transition$) => {\n        // Exit early if the $transition$ is the same as the view was created within.\n        // Exit early if the $transition$ will exit the state the view is for.\n        if (\n          $transition$ === viewCreationTrans ||\n          $transition$.exiting().indexOf(viewState) !== -1\n        )\n          return;\n        const toParams = $transition$.params(\"to\");\n        const fromParams = $transition$.params(\"from\");\n        const getNodeSchema = (node) => node.paramSchema;\n        const toSchema = $transition$\n          .treeChanges(\"to\")\n          .map(getNodeSchema)\n          .reduce(unnestR, []);\n        const fromSchema = $transition$\n          .treeChanges(\"from\")\n          .map(getNodeSchema)\n          .reduce(unnestR, []);\n        // Find the to params that have different values than the from params\n        const changedToParams = toSchema.filter((param) => {\n          const idx = fromSchema.indexOf(param);\n          return (\n            idx === -1 ||\n            !fromSchema[idx].type.equals(toParams[param.id], fromParams[param.id])\n          );\n        });\n        // Only trigger callback if a to param has changed or is new\n        if (changedToParams.length) {\n          const changedKeys = changedToParams.map((x) => x.id);\n          // Filter the params to only changed/new to params.  `$transition$.params()` may be used to get all params.\n          const newValues = filter(\n            toParams,\n            (val, key) => changedKeys.indexOf(key) !== -1,\n          );\n          controllerInstance.uiOnParamsChanged(newValues, $transition$);\n        }\n      };\n      $scope.$on(\n        \"$destroy\",\n        $transitions.onSuccess({}, paramsUpdated, hookOptions),\n      );\n    }\n    // Add component-level hook for uiCanExit\n    if (isFunction(controllerInstance.uiCanExit)) {\n      const id = _uiCanExitId++;\n      const cacheProp = \"_uiCanExitIds\";\n      // Returns true if a redirect transition already answered truthy\n      const prevTruthyAnswer = (trans) =>\n        !!trans &&\n        ((trans[cacheProp] && trans[cacheProp][id] === true) ||\n          prevTruthyAnswer(trans.redirectedFrom()));\n      // If a user answered yes, but the transition was later redirected, don't also ask for the new redirect transition\n      const wrappedHook = (trans) => {\n        let promise;\n        const ids = (trans[cacheProp] = trans[cacheProp] || {});\n        if (!prevTruthyAnswer(trans)) {\n          promise = Promise.resolve(controllerInstance.uiCanExit(trans));\n          promise.then((val) => (ids[id] = val !== false));\n        }\n        return promise;\n      };\n      const criteria = { exiting: viewState.name };\n      $scope.$on(\n        \"$destroy\",\n        $transitions.onBefore(criteria, wrappedHook, hookOptions),\n      );\n    }\n  }\n\n  ngChannelDirective.$inject = [$injectTokens.$eventBus];\n  /**\n   * @param {import(\"../../services/pubsub/pubsub.js\").PubSub} $eventBus\n   * @returns {import(\"../../interface.ts\").Directive}\n   */\n  function ngChannelDirective($eventBus) {\n    return {\n      link: (scope, element, attrs) => {\n        const channel = attrs[\"ngChannel\"];\n        const hasTemplateContent = element.childNodes.length > 0;\n\n        const key = $eventBus.subscribe(channel, (value) => {\n          if (hasTemplateContent) {\n            if (isObject(value)) {\n              scope.$merge(value);\n            }\n          } else {\n            element.innerHTML = value;\n          }\n        });\n\n        scope.$on(\"$destroy\", () => {\n          $eventBus.unsubscribeByKey(key);\n        });\n      },\n    };\n  }\n\n  ngSetterDirective.$inject = [$injectTokens.$parse, $injectTokens.$log];\n\n  /**\n   * @param {import('../../core/parse/interface.ts').ParseService} $parse\n   * @param {import('../../services/log/interface.ts').LogService} $log\n   * @returns {import('interface.ts').Directive}\n   */\n  function ngSetterDirective($parse, $log) {\n    return {\n      restrict: \"A\",\n      link(scope, element, attrs) {\n        const modelExpression = attrs[\"ngSetter\"];\n\n        if (!modelExpression) {\n          $log.warn(\"ng-setter: expression null\");\n          return;\n        }\n\n        const assignModel = $parse(modelExpression).assign;\n\n        if (!assignModel) {\n          $log.warn(\"ng-setter: expression invalid\");\n          return;\n        }\n\n        const updateModel = (value) => {\n          assignModel(scope, value.trim());\n        };\n\n        const observer = new MutationObserver((mutationsList) => {\n          let contentChanged = false;\n          for (const mutation of mutationsList) {\n            if (\n              mutation.type === \"childList\" ||\n              mutation.type === \"characterData\"\n            ) {\n              contentChanged = true;\n              break;\n            }\n          }\n\n          if (contentChanged) {\n            updateModel(element.innerHTML);\n          }\n        });\n\n        observer.observe(element, {\n          childList: true,\n          subtree: true,\n          characterData: true,\n        });\n\n        scope.$on(\"$destroy\", () => observer.disconnect());\n        updateModel(element.innerHTML);\n      },\n    };\n  }\n\n  /**\n   * @param {\"get\" | \"delete\" | \"post\" | \"put\"} method\n   * @returns {import('../../interface.ts').DirectiveFactory}\n   */\n  function defineDirective(method) {\n    const attrName = \"ng\" + method.charAt(0).toUpperCase() + method.slice(1);\n    const directive = createHttpDirective(method, attrName);\n    directive[\"$inject\"] = [$injectTokens.$http, $injectTokens.$compile, $injectTokens.$log, $injectTokens.$parse, $injectTokens.$state];\n    return directive;\n  }\n\n  /** @type {import('../../interface.ts').DirectiveFactory} */\n  const ngGetDirective = defineDirective(\"get\");\n\n  /** @type {import('../../interface.ts').DirectiveFactory} */\n  const ngDeleteDirective = defineDirective(\"delete\");\n\n  /** @type {import('../../interface.ts').DirectiveFactory} */\n  const ngPostDirective = defineDirective(\"post\");\n\n  /** @type {import('../../interface.ts').DirectiveFactory} */\n  const ngPutDirective = defineDirective(\"put\");\n\n  /**\n   * @typedef {\"click\" | \"change\" | \"submit\"} EventType\n   */\n\n  /**\n   * Selects DOM event to listen for based on the element type.\n   *\n   * @param {Element} element - The DOM element to inspect.\n   * @returns {EventType} The name of the event to listen for.\n   */\n  function getEventNameForElement(element) {\n    const tag = element.tagName.toLowerCase();\n    if ([\"input\", \"textarea\", \"select\"].includes(tag)) {\n      return \"change\";\n    } else if (tag === \"form\") {\n      return \"submit\";\n    }\n    return \"click\";\n  }\n\n  /**\n   * Handles DOM manipulation based on a swap strategy and server-rendered HTML.\n   *\n   * @param {string} html - The HTML string returned from the server.\n   * @param {import(\"../../interface.ts\").SwapModeType} swap\n   * @param {Element} target - The target DOM element to apply the swap to.\n   * @param {import('../../core/scope/scope.js').Scope} scope\n   * @param {import('../../core/compile/compile.js').CompileFn} $compile\n   */\n  function handleSwapResponse(html, swap, target, scope, $compile) {\n    let nodes = [];\n    if (![\"textcontent\", \"delete\", \"none\"].includes(swap)) {\n      if (!html) {\n        return;\n      }\n\n      if (isObject(html)) {\n        scope.$merge(html);\n        return;\n      }\n\n      const compiled = $compile(html)(scope);\n      nodes =\n        compiled instanceof DocumentFragment\n          ? Array.from(compiled.childNodes)\n          : [compiled];\n    }\n\n    switch (swap) {\n      case \"innerHTML\":\n        target.replaceChildren(...nodes);\n        break;\n\n      case \"outerHTML\": {\n        const parent = target.parentNode;\n        if (!parent) return;\n        const frag = document.createDocumentFragment();\n        nodes.forEach((n) => frag.appendChild(n));\n        parent.replaceChild(frag, target);\n        break;\n      }\n\n      case \"textContent\":\n        target.textContent = html;\n        break;\n\n      case \"beforebegin\":\n        nodes.forEach((node) => target.parentNode.insertBefore(node, target));\n        break;\n\n      case \"afterbegin\":\n        nodes\n          .slice()\n          .reverse()\n          .forEach((node) => target.insertBefore(node, target.firstChild));\n        break;\n\n      case \"beforeend\":\n        nodes.forEach((node) => target.appendChild(node));\n        break;\n\n      case \"afterend\":\n        nodes\n          .slice()\n          .reverse()\n          .forEach((node) =>\n            target.parentNode.insertBefore(node, target.nextSibling),\n          );\n        break;\n\n      case \"delete\":\n        target.remove();\n        break;\n\n      case \"none\":\n        break;\n\n      default:\n        target.replaceChildren(...nodes);\n        break;\n    }\n  }\n\n  /**\n   * Creates an HTTP directive factory that supports GET, DELETE, POST, PUT.\n   *\n   * @param {\"get\" | \"delete\" | \"post\" | \"put\"} method - HTTP method to use.\n   * @param {string} attrName - Attribute name containing the URL.\n   * @returns {import('../../interface.ts').DirectiveFactory}\n   */\n  function createHttpDirective(method, attrName) {\n    /**\n     * @param {import(\"interface.ts\").HttpService} $http\n     * @param {import(\"../../core/compile/compile.js\").CompileFn} $compile\n     * @param {import(\"../../services/log/interface.ts\").LogService} $log\n     * @param {import(\"../../core/parse/interface.ts\").ParseService} $parse\n     * @param {import(\"../../router/state/state-service.js\").StateProvider} $state\n     * @returns {import('../../interface.ts').Directive}\n     */\n    return function ($http, $compile, $log, $parse, $state) {\n      /**\n       * Collects form data from the element or its associated form.\n       *\n       * @param {HTMLElement} element\n       * @returns {Object<string, any>}\n       */\n      function collectFormData(element) {\n        /** @type {HTMLFormElement | null} */\n        let form = null;\n\n        const tag = element.tagName.toLowerCase();\n\n        if (tag === \"form\") {\n          /** @type {HTMLFormElement} */\n          form = /** @type {HTMLFormElement} */ (element);\n        } else if (\"form\" in element && element.form) {\n          /** @type {HTMLFormElement} */\n          form = /** @type {HTMLFormElement} */ (element.form);\n        } else if (element.hasAttribute(\"form\")) {\n          const formId = element.getAttribute(\"form\");\n          if (formId) {\n            /** @type {HTMLElement | null} */\n            const maybeForm = document.getElementById(formId);\n            if (maybeForm && maybeForm.tagName.toLowerCase() === \"form\") {\n              form = /** @type {HTMLFormElement} */ (maybeForm);\n            }\n          }\n        }\n\n        if (!form) {\n          if (\n            \"name\" in element &&\n            typeof element.name === \"string\" &&\n            element.name.length > 0\n          ) {\n            if (\n              element instanceof HTMLInputElement ||\n              element instanceof HTMLTextAreaElement ||\n              element instanceof HTMLSelectElement\n            ) {\n              const key = element.name;\n              const value = element.value;\n              return { [key]: value };\n            }\n          }\n          return {};\n        }\n\n        const formData = new FormData(form);\n        const data = {};\n        formData.forEach((value, key) => {\n          data[key] = value;\n        });\n        return data;\n      }\n\n      return {\n        restrict: \"A\",\n        link(scope, element, attrs) {\n          const eventName =\n            attrs[\"trigger\"] ||\n            /** @type {EventType} */ getEventNameForElement(element);\n\n          const tag = element.tagName.toLowerCase();\n\n          if (isDefined(attrs[\"latch\"])) {\n            attrs.$observe(\n              \"latch\",\n              callBackAfterFirst(() =>\n                element.dispatchEvent(new Event(eventName)),\n              ),\n            );\n          }\n\n          let throttled = false;\n          let intervalId;\n\n          if (isDefined(attrs[\"interval\"])) {\n            element.dispatchEvent(new Event(eventName));\n            intervalId = setInterval(\n              () => element.dispatchEvent(new Event(eventName)),\n              parseInt(attrs[\"interval\"]) || 1000,\n            );\n          }\n\n          element.addEventListener(eventName, async (event) => {\n            if (/** @type {HTMLButtonElement} */ (element).disabled) return;\n            if (tag === \"form\") event.preventDefault();\n\n            const swap = attrs[\"swap\"] || \"innerHTML\";\n            const targetSelector = attrs[\"target\"];\n            const target = targetSelector\n              ? document.querySelector(targetSelector)\n              : element;\n\n            if (!target) {\n              $log.warn(`${attrName}: target \"${targetSelector}\" not found`);\n              return;\n            }\n\n            const url = attrs[attrName];\n            if (!url) {\n              $log.warn(`${attrName}: no URL specified`);\n              return;\n            }\n\n            const handler = (res) => {\n              if (isDefined(attrs[\"loading\"])) {\n                attrs.$set(\"loading\", false);\n              }\n\n              if (isDefined(attrs[\"loadingClass\"])) {\n                attrs.$removeClass(attrs[\"loadingClass\"]);\n              }\n\n              const html = res.data;\n              if (200 <= res.status && res.status <= 299) {\n                if (isDefined(attrs[\"success\"])) {\n                  $parse(attrs[\"success\"])(scope, { $res: html });\n                }\n\n                if (isDefined(attrs[\"stateSuccess\"])) {\n                  $state.go(attrs[\"stateSuccess\"]);\n                }\n              } else if (400 <= res.status && res.status <= 599) {\n                if (isDefined(attrs[\"error\"])) {\n                  $parse(attrs[\"error\"])(scope, { $res: html });\n                }\n\n                if (isDefined(attrs[\"stateError\"])) {\n                  $state.go(attrs[\"stateError\"]);\n                }\n              }\n\n              handleSwapResponse(\n                html,\n                /** @type {import(\"../../interface.ts\").SwapModeType} */ (swap),\n                target,\n                scope,\n                $compile,\n              );\n            };\n\n            if (isDefined(attrs[\"delay\"])) {\n              await wait(parseInt(attrs[\"delay\"]) | 0);\n            }\n\n            if (throttled) {\n              return;\n            }\n\n            if (isDefined(attrs[\"throttle\"])) {\n              throttled = true;\n              attrs.$set(\"throttled\", true);\n              setTimeout(() => {\n                attrs.$set(\"throttled\", false);\n                throttled = false;\n              }, parseInt(attrs[\"throttle\"]));\n            }\n\n            if (isDefined(attrs[\"loading\"])) {\n              attrs.$set(\"loading\", true);\n            }\n\n            if (isDefined(attrs[\"loadingClass\"])) {\n              attrs.$addClass(attrs[\"loadingClass\"]);\n            }\n\n            if (method === \"post\" || method === \"put\") {\n              let data;\n              const config = {};\n              if (attrs[\"enctype\"]) {\n                config.headers = {\n                  \"Content-Type\": attrs[\"enctype\"],\n                };\n                data = toKeyValue(collectFormData(element));\n              } else {\n                data = collectFormData(element);\n              }\n              $http[method](url, data, config).then(handler).catch(handler);\n            } else {\n              $http[method](url).then(handler).catch(handler);\n            }\n          });\n\n          scope.$on(\"$destroy\", () => clearInterval(intervalId));\n        },\n      };\n    };\n  }\n\n  /**\n   * Initializes core `ng` module.\n   * @param {import('./angular.js').Angular} angular\n   * @returns {import('./core/di/ng-module.js').NgModule} `ng` module\n   */\n  function registerNgModule(angular) {\n    return angular\n      .module(\n        \"ng\",\n        [],\n        [\n          $injectTokens.$provide,\n          /** @param {import(\"./interface.js\").Provider} $provide */\n          ($provide) => {\n            // $$sanitizeUriProvider needs to be before $compileProvider as it is used by it.\n            $provide.provider({\n              $$sanitizeUri: SanitizeUriProvider,\n            });\n            $provide\n              .provider($injectTokens.$compile, CompileProvider)\n              .directive({\n                input: inputDirective,\n                textarea: inputDirective,\n                form: formDirective,\n                script: scriptDirective,\n                select: selectDirective,\n                option: optionDirective,\n                ngBind: ngBindDirective,\n                ngBindHtml: ngBindHtmlDirective,\n                ngBindTemplate: ngBindTemplateDirective,\n                ngClass: ngClassDirective,\n                ngClassEven: ngClassEvenDirective,\n                ngClassOdd: ngClassOddDirective,\n                ngCloak: ngCloakDirective,\n                ngController: ngControllerDirective,\n                ngDelete: ngDeleteDirective,\n                ngDisabled: ngDisabledAriaDirective,\n                ngForm: ngFormDirective,\n                ngGet: ngGetDirective,\n                ngHide: ngHideDirective,\n                ngIf: ngIfDirective,\n                ngInclude: ngIncludeDirective,\n                ngInit: ngInitDirective,\n                ngMessages: ngMessagesDirective,\n                ngMessage: ngMessageDirective,\n                ngMessageExp: ngMessageExpDirective,\n                ngMessagesInclude: ngMessagesIncludeDirective,\n                ngMessageDefault: ngMessageDefaultDirective,\n                ngNonBindable: ngNonBindableDirective,\n                ngPost: ngPostDirective,\n                ngPut: ngPutDirective,\n                ngRef: ngRefDirective,\n                ngRepeat: ngRepeatDirective,\n                ngSetter: ngSetterDirective,\n                ngShow: ngShowDirective,\n                ngStyle: ngStyleDirective,\n                ngSwitch: ngSwitchDirective,\n                ngSwitchWhen: ngSwitchWhenDirective,\n                ngSwitchDefault: ngSwitchDefaultDirective,\n                ngOptions: ngOptionsDirective,\n                ngTransclude: ngTranscludeDirective,\n                ngModel: ngModelDirective,\n                pattern: patternDirective,\n                ngPattern: patternDirective,\n                required: requiredDirective,\n                ngRequired: requiredDirective,\n                ngMinlength: minlengthDirective,\n                minlength: minlengthDirective,\n                ngMaxlength: maxlengthDirective,\n                maxlength: maxlengthDirective,\n                ngValue: ngValueDirective,\n                ngModelOptions: ngModelOptionsDirective,\n              })\n              .directive({\n                input: hiddenInputBrowserCacheDirective,\n                ngAnimateSwap: ngAnimateSwapDirective,\n                ngAnimateChildren: $$AnimateChildrenDirective,\n                ngChecked: ngCheckedAriaDirective,\n                ngClick: ngClickAriaDirective,\n                ngDblclick: ngDblclickAriaDirective,\n                ngInclude: ngIncludeFillContentDirective,\n                ngHide: ngHideAriaDirective,\n                ngShow: ngShowAriaDirective,\n                ngMessages: ngMessagesAriaDirective,\n                ngModel: ngModelAriaDirective,\n                ngReadonly: ngReadonlyAriaDirective,\n                ngRequired: ngRequiredAriaDirective,\n                ngValue: ngValueAriaDirective,\n                ngSref: $StateRefDirective,\n                ngSrefActive: $StateRefActiveDirective,\n                ngSrefActiveEq: $StateRefActiveDirective,\n                ngState: $StateRefDynamicDirective,\n                ngView: ngView,\n                ngChannel: ngChannelDirective,\n              })\n              .directive({\n                ngView: $ViewDirectiveFill,\n              })\n              .directive(ngAttributeAliasDirectives)\n              .directive(ngEventDirectives);\n            $provide.provider({\n              $aria: AriaProvider,\n              $anchorScroll: AnchorScrollProvider,\n              $animate: AnimateProvider,\n              $$animation: AnimationProvider,\n              $animateCss: AnimateCssProvider,\n              $$animateCssDriver: AnimateCssDriverProvider,\n              $$animateJs: AnimateJsProvider,\n              $$animateJsDriver: AnimateJsDriverProvider,\n              $$animateCache: AnimateCacheProvider,\n              $$animateQueue: AnimateQueueProvider,\n              $$AnimateRunner: AnimateRunnerFactoryProvider,\n              $$animateAsyncRun: AnimateAsyncRunFactoryProvider,\n              $controller: ControllerProvider,\n              $exceptionHandler: ExceptionHandlerProvider,\n              $filter: FilterProvider,\n              $interpolate: InterpolateProvider,\n              $http: HttpProvider,\n              $httpParamSerializer: HttpParamSerializerProvider,\n              $httpBackend: HttpBackendProvider,\n              $location: LocationProvider,\n              $log: LogProvider,\n              $parse: ParseProvider,\n              $$rAFScheduler: RafSchedulerProvider,\n              $rootScope: RootScopeProvider,\n              $router: Router,\n              $sce: SceProvider,\n              $sceDelegate: SceDelegateProvider,\n              $templateCache: TemplateCacheProvider,\n              $templateRequest: TemplateRequestProvider,\n              $urlConfig: UrlConfigProvider,\n              $view: ViewService,\n              $transitions: TransitionProvider,\n              $state: StateProvider,\n              $viewScroll: ViewScrollProvider,\n              $templateFactory: TemplateFactoryProvider,\n              $url: UrlService,\n              $stateRegistry: StateRegistryProvider,\n              $eventBus: PubSubProvider,\n            });\n          },\n        ],\n      )\n      .factory(\"$stateParams\", [\n        $injectTokens.$router,\n        /**\n         * @param {import('./router/router.js').Router} globals\n         * @returns {import('./router/params/state-params.js').StateParams }\n         */\n        (globals) => globals.params,\n      ])\n      .value(\"$trace\", trace);\n  }\n\n  const ngMinErr = minErr(\"ng\");\n  const $injectorMinErr = minErr(\"$injector\");\n\n  /** @type {Object.<string, NgModule>} */\n  const modules = {};\n\n  /**\n   * Configuration option for AngularTS bootstrap process.\n   *\n   * @typedef {Object} AngularBootstrapConfig\n   * @property {boolean} [strictDi] - Disable automatic function annotation for the application. This is meant to assist in finding bugs which break minified code. Defaults to `false`.\n   */\n\n  class Angular {\n    constructor() {\n      this.$cache = Cache;\n\n      /** @type {import('./services/pubsub/pubsub.js').PubSub} */\n      this.$eventBus = EventBus;\n\n      /**\n       * @type {string} `version` from `package.json`\n       */\n      this.version = \"0.9.3\"; //inserted via rollup plugin\n\n      /** @type {!Array<string|any>} */\n      this.bootsrappedModules = [];\n\n      this.getController = getController;\n      this.getInjector = getInjector;\n      this.getScope = getScope;\n      this.errorHandlingConfig = errorHandlingConfig;\n      this.$t = $injectTokens;\n\n      window[\"angular\"] = this;\n      registerNgModule(this);\n    }\n\n    /**\n     * Use this function to manually start up AngularTS application.\n     *\n     * AngularTS will detect if it has been loaded into the browser more than once and only allow the\n     * first loaded script to be bootstrapped and will report a warning to the browser console for\n     * each of the subsequent scripts. This prevents strange results in applications, where otherwise\n     * multiple instances of AngularTS try to work on the DOM.\n     *   *\n     * <div class=\"alert alert-warning\">\n     * **Note:** Do not bootstrap the app on an element with a directive that uses {@link ng.$compile#transclusion transclusion},\n     * such as {@link ng.ngIf `ngIf`}, {@link ng.ngInclude `ngInclude`} and {@link ngRoute.ngView `ngView`}.\n     * Doing this misplaces the app {@link ng.$rootElement `$rootElement`} and the app's {@link auto.$injector injector},\n     * causing animations to stop working and making the injector inaccessible from outside the app.\n     * </div>\n     *\n     * ```html\n     * <!doctype html>\n     * <html>\n     * <body>\n     * <div ng-controller=\"WelcomeController\">\n     *   {{greeting}}\n     * </div>\n     *\n     * <script src=\"angular.js\"></script>\n     * <script>\n     *   let app = angular.module('demo', [])\n     *   .controller('WelcomeController', function($scope) {\n     *       $scope.greeting = 'Welcome!';\n     *   });\n     *   angular.bootstrap(document, ['demo']);\n     * </script>\n     * </body>\n     * </html>\n     * ```\n     *\n     * @param {string | Element | Document} element DOM element which is the root of AngularTS application.\n     * @param {Array<String|any>} [modules] an array of modules to load into the application.\n     *     Each item in the array should be the name of a predefined module or a (DI annotated)\n     *     function that will be invoked by the injector as a `config` block.\n     *     See: {@link angular.module modules}\n     * @param {AngularBootstrapConfig} [config]\n     * @returns {import('./core/di/internal-injector.js').InjectorService} The created injector instance for this application.\n     */\n    bootstrap(element, modules, config) {\n      config = config || {\n        strictDi: false,\n      };\n\n      if (\n        (element instanceof Element || element instanceof Document) &&\n        getInjector(/** @type {Element} */ (element))\n      ) {\n        throw ngMinErr(\"btstrpd\", \"App already bootstrapped\");\n      }\n\n      if (Array.isArray(modules)) {\n        this.bootsrappedModules = modules;\n      }\n\n      this.bootsrappedModules.unshift([\n        \"$provide\",\n        /**\n         * @param {import('./interface.ts').Provider} $provide\n         */\n        ($provide) => {\n          $provide.value(\"$rootElement\", element);\n        },\n      ]);\n\n      this.bootsrappedModules.unshift(\"ng\");\n\n      const injector = createInjector(this.bootsrappedModules, config.strictDi);\n      injector.invoke([\n        $injectTokens.$rootScope,\n        $injectTokens.$rootElement,\n        $injectTokens.$compile,\n        $injectTokens.$injector,\n        /**\n         * @param {import('./core/scope/scope.js').Scope} scope\n         * @param {Element} el\n         * @param {import(\"./core/compile/compile.js\").CompileFn} compile\n         * @param {import(\"./core/di/internal-injector.js\").InjectorService} $injector\n         */\n        (scope, el, compile, $injector) => {\n          // ng-route deps\n          this.$injector = $injector;\n          setCacheData(el, \"$injector\", $injector);\n\n          const compileFn = compile(el);\n          compileFn(scope);\n\n          // https://github.com/angular-ui/ui-router/issues/3678\n          if (!hasOwn($injector, \"strictDi\")) {\n            try {\n              $injector.invoke(() => {});\n            } catch (error) {\n              $injector.strictDi = !!/strict mode/.exec(\n                error && error.toString(),\n              );\n            }\n          }\n\n          $injector\n            .get($injectTokens.$stateRegistry)\n            .get()\n            .map((x) => x.$$state().resolvables)\n            .reduce(unnestR, [])\n            .filter((x) => x.deps === \"deferred\")\n            .forEach(\n              (resolvable) =>\n                (resolvable.deps = annotate(\n                  resolvable.resolveFn,\n                  $injector.strictDi,\n                )),\n            );\n        },\n      ]);\n      return injector;\n    }\n\n    /**\n     * @param {any[]} modules\n     * @param {boolean?} strictDi\n     * @returns {import(\"./core/di/internal-injector.js\").InjectorService}\n     */\n    injector(modules, strictDi) {\n      return createInjector(modules, strictDi);\n    }\n\n    /**\n     * @param {Element|Document} element\n     */\n    init(element) {\n      let appElement;\n      let module;\n      const config = {};\n      // The element `element` has priority over any other element.\n      ngAttrPrefixes.forEach((prefix) => {\n        const name = `${prefix}app`;\n        if (\n          /** @type {Element} */ (element).hasAttribute &&\n          /** @type {Element} */ (element).hasAttribute(name)\n        ) {\n          appElement = element;\n          module = /** @type {Element} */ (element).getAttribute(name);\n        }\n      });\n      ngAttrPrefixes.forEach((prefix) => {\n        const name = `${prefix}app`;\n        let candidate;\n\n        if (\n          !appElement &&\n          (candidate = element.querySelector(`[${name.replace(\":\", \"\\\\:\")}]`))\n        ) {\n          appElement = candidate;\n          module = candidate.getAttribute(name);\n        }\n      });\n      if (appElement) {\n        config.strictDi = getNgAttribute(appElement, \"strict-di\") !== null;\n        this.bootstrap(appElement, module ? [module] : [], config);\n      }\n    }\n\n    /**\n     *\n     * The `angular.module` is a global place for creating, registering and retrieving AngularTS\n     * modules.\n     * All modules (AngularTS core or 3rd party) that should be available to an application must be\n     * registered using this mechanism.\n     *\n     * Passing one argument retrieves an existing {@link import('./interface.ts').Module},\n     * whereas passing more than one argument creates a new {@link import('./interface.ts').Module}\n     *\n     *\n     * # Module\n     *\n     * A module is a collection of services, directives, controllers, filters, and configuration information.\n     * `angular.module` is used to configure the {@link auto.$injector $injector}.\n     *\n     * ```js\n     * // Create a new module\n     * let myModule = angular.module('myModule', []);\n     *\n     * // register a new service\n     * myModule.value('appName', 'MyCoolApp');\n     *\n     * // configure existing services inside initialization blocks.\n     * myModule.config(['$locationProvider', function($locationProvider) {\n     *   // Configure existing providers\n     *   $locationProvider.hashPrefix('!');\n     * }]);\n     * ```\n     *\n     * Then you can create an injector and load your modules like this:\n     *\n     * ```js\n     * let injector = angular.injector(['ng', 'myModule'])\n     * ```\n     *\n     * However it's more likely that you'll just use\n     * {@link ng.directive:ngApp ngApp} or\n     * {@link angular.bootstrap} to simplify this process for you.\n     *\n     * @param {string} name The name of the module to create or retrieve.\n     * @param {Array.<string>} [requires] If specified then new module is being created. If\n     *        unspecified then the module is being retrieved for further configuration.\n     * @param {import(\"./interface.js\").Injectable} [configFn] Optional configuration function for the module that gets\n     *        passed to {@link NgModule.config NgModule.config()}.\n     * @returns {NgModule} A newly registered module.\n     */\n    module(name, requires, configFn) {\n      assertNotHasOwnProperty(name, \"module\");\n      if (requires && hasOwn(modules, name)) {\n        modules[name] = null;\n      }\n      return ensure(modules, name, () => {\n        if (!requires) {\n          throw $injectorMinErr(\n            \"nomod\",\n            \"Module '{0}' is not available. Possibly misspelled or not loaded\",\n            name,\n          );\n        }\n        return new NgModule(name, requires, configFn);\n      });\n    }\n  }\n\n  function ensure(obj, name, factory) {\n    return obj[name] || (obj[name] = factory());\n  }\n\n  const angular = new Angular();\n  document.addEventListener(\"DOMContentLoaded\", () => angular.init(document), {\n    once: true,\n  });\n\n  exports.angular = angular;\n\n}));\n"],
  "mappings": "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",
  "names": ["exports", "name", "val", "keyValue", "module", "err", "self", "cache", "provider", "value", "modulesToLoad", "runBlocks", "$exceptionHandler", "$parse", "parse", "pattern", "require", "directiveFactory", "compileNodes", "transcludeFn", "scope", "newValue", "parentValueWatch", "controller", "validationErrorKey", "formElement", "attr", "element", "map", "previousDate", "oldVal", "oldClassString", "clone", "hasAnimate", "$attr", "block", "locals", "getLocals", "classes", "filter", "decorated", "concat", "exp", "defaults", "chainInterceptors", "promise", "config", "url", "newUrl", "console", "listeners", "x", "key", "id", "ngMessageDirective", "nativeAriaNodeNames", "elem", "contains", "isValidAnimation", "animationDetails", "runner", "event", "options", "animations", "tree", "i", "node", "bind", "tail", "ngView", "defaultConfig", "inherit", "wait", "stateContext", "split", "isRoot", "includes", "resolvePolicies", "res", "stateOrName", "activeClass", "angular", "modules"]
}
